/**
 * @filename: Type
 * @brief: Provides classes and predicates for working with JavaScript / TypeScript types.
 */

/**
 * A type node.
 */
schema TypeNode extends Node {
}

impl TypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *TypeNode {
        for (tmp in Node(db)) {
            if (isTypeNode(tmp)) {
                yield TypeNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A keyword type node.
 */
schema KeywordTypeNode extends TypeNode {
}

impl KeywordTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *KeywordTypeNode {
        for (tmp in TypeNode(db)) {
            if (isKeywordTypeNode(Node {id: tmp.id})) {
                yield KeywordTypeNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A type predicate.
 */
schema TypePredicateNode extends TypeNode {
}

impl TypePredicateNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *TypePredicateNode {
        for (tmp in TypeNode(db)) {
            if (isTypePredicate(Node {id: tmp.id})) {
                yield TypePredicateNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A function type node.
 */
schema FunctionTypeNode extends TypeNode {
}

impl FunctionTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *FunctionTypeNode {
        for (tmp in TypeNode(db)) {
            if (isFunctionType(Node {id: tmp.id})) {
                yield FunctionTypeNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A constructor type node.
 */
schema ConstructorTypeNode extends TypeNode {
}

impl ConstructorTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *ConstructorTypeNode {
        for (tmp in TypeNode(db)) {
            if (isConstructorType(Node {id: tmp.id})) {
                yield ConstructorTypeNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A type query node.
 */
schema TypeQueryNode extends TypeNode {
}

impl TypeQueryNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *TypeQueryNode {
        for (tmp in TypeNode(db)) {
            if (isTypeQuery(Node {id: tmp.id})) {
                yield TypeQueryNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A type literal node.
 */
schema TypeLiteralNode extends TypeNode {
}

impl TypeLiteralNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *TypeLiteralNode {
        for (tmp in TypeNode(db)) {
            if (isTypeLiteral(Node {id: tmp.id})) {
                yield TypeLiteralNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * An array type node.
 */
schema ArrayTypeNode extends TypeNode {
}

impl ArrayTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *ArrayTypeNode {
        for (tmp in TypeNode(db)) {
            if (isArrayType(Node {id: tmp.id})) {
                yield ArrayTypeNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A tuple type node.
 */
schema TupleTypeNode extends TypeNode {
}

impl TupleTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *TupleTypeNode {
        for (tmp in TypeNode(db)) {
            if (isTupleType(Node {id: tmp.id})) {
                yield TupleTypeNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * An optional type node.
 */
schema OptionalTypeNode extends TypeNode {
}

impl OptionalTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *OptionalTypeNode {
        for (tmp in TypeNode(db)) {
            if (isOptionalType(Node {id: tmp.id})) {
                yield OptionalTypeNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A rest type node.
 */
schema RestTypeNode extends TypeNode {
}

impl RestTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *RestTypeNode {
        for (tmp in TypeNode(db)) {
            if (isRestType(Node {id: tmp.id})) {
                yield RestTypeNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * An union type node.
 */
schema UnionTypeNode extends TypeNode {
}

impl UnionTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *UnionTypeNode {
        for (tmp in TypeNode(db)) {
            if (isUnionType(Node {id: tmp.id})) {
                yield UnionTypeNode {
                    id : tmp.id
                }
            }
        }
    }

    pub fn getAType(self) -> *TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            for (auto_tmp1 in self.getAChild()) {
                if (typeNode.key_eq(auto_tmp1)) {
                    yield typeNode
                }
            }
        }
    }

    pub fn getType(self, i: int) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (typeNode.key_eq(self.getChild(i))) {
                return typeNode
            }
        }
    }
}

/**
 * An intersection type node.
 */
schema IntersectionTypeNode extends TypeNode {
}

impl IntersectionTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *IntersectionTypeNode {
        for (tmp in TypeNode(db)) {
            if (isIntersectionType(Node {id: tmp.id})) {
                yield IntersectionTypeNode {
                    id : tmp.id
                }
            }
        }
    }

    pub fn getAType(self) -> *TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            for (auto_tmp1 in self.getAChild()) {
                if (typeNode.key_eq(auto_tmp1)) {
                    yield typeNode
                }
            }
        }
    }

    pub fn getType(self, i: int) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (typeNode.key_eq(self.getChild(i))) {
                return typeNode
            }
        }
    }
}

/**
 * A conditional type node.
 */
schema ConditionalTypeNode extends TypeNode {
}

impl ConditionalTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *ConditionalTypeNode {
        for (tmp in TypeNode(db)) {
            if (isConditionalType(Node {id: tmp.id})) {
                yield ConditionalTypeNode {
                    id : tmp.id
                }
            }
        }
    }

    pub fn getCheckType(self) -> TypeNode {
        for (checkType in TypeNode(__all_data__)) {
            if (checkType.key_eq(self.getChild(0))) {
                return checkType
            }
        }
    }

    pub fn getExtendsType(self) -> TypeNode {
        for (extendsType in TypeNode(__all_data__)) {
            if (extendsType.key_eq(self.getChild(1))) {
                return extendsType
            }
        }
    }

    pub fn getThenType(self) -> TypeNode {
        for (thenType in TypeNode(__all_data__)) {
            if (thenType.key_eq(self.getChild(2))) {
                return thenType
            }
        }
    }

    pub fn getElseType(self) -> TypeNode {
        for (elseType in TypeNode(__all_data__)) {
            if (elseType.key_eq(self.getChild(3))) {
                return elseType
            }
        }
    }
}

/**
 * A infer type node.
 */
schema InferTypeNode extends TypeNode {
}

impl InferTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *InferTypeNode {
        for (tmp in TypeNode(db)) {
            if (isInferType(Node {id: tmp.id})) {
                yield InferTypeNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A parenthesized type node.
 */
schema ParenthesizedTypeNode extends TypeNode {
}

impl ParenthesizedTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *ParenthesizedTypeNode {
        for (tmp in TypeNode(db)) {
            if (isParenthesizedType(Node {id: tmp.id})) {
                yield ParenthesizedTypeNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A this type node.
 */
schema ThisTypeNode extends TypeNode {
}

impl ThisTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *ThisTypeNode {
        for (tmp in TypeNode(db)) {
            if (isThisType(Node {id: tmp.id})) {
                yield ThisTypeNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A type operator node.
 */
schema TypeOperatorNode extends TypeNode {
}

impl TypeOperatorNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *TypeOperatorNode {
        for (tmp in TypeNode(db)) {
            if (isTypeOperator(Node {id: tmp.id})) {
                yield TypeOperatorNode {
                    id : tmp.id
                }
            }
        }
    }

    pub fn getOperator(self) -> KeywordToken {
        for (typeOperator in KeywordToken(__all_data__)) {
            if (typeOperator.key_eq(self.getChild(0))) {
                return typeOperator
            }
        }
    }

    pub fn getType(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (typeNode.key_eq(self.getChild(1))) {
                return typeNode
            }
        }
    }
}

/**
 * An indexed access type node.
 */
schema IndexedAccessTypeNode extends TypeNode {
}

impl IndexedAccessTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *IndexedAccessTypeNode {
        for (tmp in TypeNode(db)) {
            if (isIndexedAccessType(Node {id: tmp.id})) {
                yield IndexedAccessTypeNode {
                    id : tmp.id
                }
            }
        }
    }

    pub fn getObjectType(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (typeNode.key_eq(self.getChild(0))) {
                return typeNode
            }
        }
    }

    pub fn getIndexType(self) -> TypeNode {
        for (typeNode in TypeNode(__all_data__)) {
            if (typeNode.key_eq(self.getChild(1))) {
                return typeNode
            }
        }
    }
}

/**
 * A mapped type node.
 */
schema MappedTypeNode extends TypeNode {
}

impl MappedTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *MappedTypeNode {
        for (tmp in TypeNode(db)) {
            if (isMappedType(Node {id: tmp.id})) {
                yield MappedTypeNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A literal type node.
 */
schema LiteralTypeNode extends TypeNode {
}

impl LiteralTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *LiteralTypeNode {
        for (tmp in TypeNode(db)) {
            if (isLiteralType(Node {id: tmp.id})) {
                yield LiteralTypeNode {
                    id : tmp.id
                }
            }
        }
    }

    pub fn getLiteral(self) -> Node {
        let (literal = self.getChild(0)) {
            if (isNullLiteral(literal)) {
                return literal
            }
            if (isBooleanLiteral(literal)) {
                return literal
            }
            if (isLiteralExpression(literal)) {
                return literal
            }
            if (isPrefixUnaryExpression(literal)) {
                return literal
            }
        }
    }
}

/**
 * A named tuple member.
 */
schema NamedTupleMember extends TypeNode {
}

impl NamedTupleMember {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *NamedTupleMember {
        for (tmp in TypeNode(db)) {
            if (isNamedTupleMember(Node {id: tmp.id})) {
                yield NamedTupleMember {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A template literal type node.
 */
schema TemplateLiteralTypeNode extends TypeNode {
}

impl TemplateLiteralTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *TemplateLiteralTypeNode {
        for (tmp in TypeNode(db)) {
            if (isTemplateLiteralType(Node {id: tmp.id})) {
                yield TemplateLiteralTypeNode {
                    id : tmp.id
                }
            }
        }
    }

    pub fn getHead(self) -> TemplateHead {
        for (head in TemplateHead(__all_data__)) {
            if (head.key_eq(self.getChild(0))) {
                return head
            }
        }
    }

    pub fn getATemplateSpan(self) -> *TemplateLiteralTypeSpan {
        for (templateSpan in TemplateLiteralTypeSpan(__all_data__)) {
            for (auto_tmp1 in self.getAChild()) {
                if (templateSpan.key_eq(auto_tmp1)) {
                    yield templateSpan
                }
            }
        }
    }

    pub fn getTemplateSpan(self, i: int) -> TemplateLiteralTypeSpan {
        for (index in int::__undetermined_all__()) {
            for (templateSpan in TemplateLiteralTypeSpan(__all_data__)) {
                if (templateSpan.key_eq(self.getChild(index))) {
                    if (index - 1 = i) {
                        return templateSpan
                    }
                }
            }
        }
    }
}

/**
 * A template literal type span.
 */
schema TemplateLiteralTypeSpan extends TypeNode {
}

impl TemplateLiteralTypeSpan {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *TemplateLiteralTypeSpan {
        for (tmp in TypeNode(db)) {
            if (isTemplateLiteralTypeSpan(Node {id: tmp.id})) {
                yield TemplateLiteralTypeSpan {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A node with type arguments.
 */
schema NodeWithTypeArguments extends TypeNode {
}

impl NodeWithTypeArguments {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *NodeWithTypeArguments {
        for (tmp in TypeNode(db)) {
            if (isNodeWithTypeArguments(Node {id: tmp.id})) {
                yield NodeWithTypeArguments {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A type reference node.
 */
schema TypeReferenceNode extends NodeWithTypeArguments {
}

impl TypeReferenceNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *TypeReferenceNode {
        for (tmp in NodeWithTypeArguments(db)) {
            if (isTypeReference(Node {id: tmp.id})) {
                yield TypeReferenceNode {
                    id : tmp.id
                }
            }
        }
    }

    pub fn getTypeName(self) -> Node {
        let (typeName = self.getChild(0)) {
            if (isIdentifier(typeName)) {
                return typeName
            }
            if (isQualifiedName(typeName)) {
                return typeName
            }
        }
    }
}

/**
 * An import type node.
 */
schema ImportTypeNode extends NodeWithTypeArguments {
}

impl ImportTypeNode {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *ImportTypeNode {
        for (tmp in NodeWithTypeArguments(db)) {
            if (isImportType(Node {id: tmp.id})) {
                yield ImportTypeNode {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * An expression with type arguments.
 */
schema ExpressionWithTypeArguments extends NodeWithTypeArguments {
}

impl ExpressionWithTypeArguments {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *ExpressionWithTypeArguments {
        for (tmp in NodeWithTypeArguments(db)) {
            if (isExpressionWithTypeArguments(Node {id: tmp.id})) {
                yield ExpressionWithTypeArguments {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A type element.
 */
schema TypeElement extends Node {
}

impl TypeElement {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *TypeElement {
        for (tmp in Node(db)) {
            if (isTypeElement(tmp)) {
                yield TypeElement {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A property signature.
 */
schema PropertySignature extends TypeElement {
}

impl PropertySignature {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *PropertySignature {
        for (tmp in TypeElement(db)) {
            if (isPropertySignature(Node {id: tmp.id})) {
                yield PropertySignature {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A method signature.
 */
schema MethodSignature extends TypeElement {
}

impl MethodSignature {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *MethodSignature {
        for (tmp in TypeElement(db)) {
            if (isMethodSignature(Node {id: tmp.id})) {
                yield MethodSignature {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A call signature declaration.
 */
schema CallSignatureDeclaration extends TypeElement {
}

impl CallSignatureDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *CallSignatureDeclaration {
        for (tmp in TypeElement(db)) {
            if (isCallSignature(Node {id: tmp.id})) {
                yield CallSignatureDeclaration {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * A construct signature declaration.
 */
schema ConstructSignatureDeclaration extends TypeElement {
}

impl ConstructSignatureDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *ConstructSignatureDeclaration {
        for (tmp in TypeElement(db)) {
            if (isConstructSignature(Node {id: tmp.id})) {
                yield ConstructSignatureDeclaration {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * An index signature declaration.
 */
schema IndexSignatureDeclaration extends TypeElement {
}

impl IndexSignatureDeclaration {
    @data_constraint
    @inline
    pub fn __all__(db: JavascriptDB) -> *IndexSignatureDeclaration {
        for (tmp in TypeElement(db)) {
            if (isIndexSignature(Node {id: tmp.id})) {
                yield IndexSignatureDeclaration {
                    id : tmp.id
                }
            }
        }
    }
}

/**
 * Determines whether a node is a keyword type node.
 */
pub fn isKeywordTypeNode(node: Node) -> bool {
    if (isAnyKeyword(node)) {
        return true
    }
    if (isBigIntKeyword(node)) {
        return true
    }
    if (isBooleanKeyword(node)) {
        return true
    }
    if (isIntrinsicKeyword(node)) {
        return true
    }
    if (isNeverKeyword(node)) {
        return true
    }
    if (isNumberKeyword(node)) {
        return true
    }
    if (isObjectKeyword(node)) {
        return true
    }
    if (isStringKeyword(node)) {
        return true
    }
    if (isSymbolKeyword(node)) {
        return true
    }
    if (isUndefinedKeyword(node)) {
        return true
    }
    if (isUnknownKeyword(node)) {
        return true
    }
    if (isVoidKeyword(node)) {
        return true
    }
}

/**
 * Determines whether a node is a type predicate.
 */
pub fn isTypePredicate(node: Node) -> bool {
    if (node.getKind() = 176) {
        return true
    }
}

/**
 * Determines whether a node is a type reference.
 */
pub fn isTypeReference(node: Node) -> bool {
    if (node.getKind() = 177) {
        return true
    }
}

/**
 * Determines whether a node is a function type.
 */
pub fn isFunctionType(node: Node) -> bool {
    if (node.getKind() = 178) {
        return true
    }
}

/**
 * Determines whether a node is a constructor type.
 */
pub fn isConstructorType(node: Node) -> bool {
    if (node.getKind() = 179) {
        return true
    }
}

/**
 * Determines whether a node is a type query.
 */
pub fn isTypeQuery(node: Node) -> bool {
    if (node.getKind() = 180) {
        return true
    }
}

/**
 * Determines whether a node is a type literal.
 */
pub fn isTypeLiteral(node: Node) -> bool {
    if (node.getKind() = 181) {
        return true
    }
}

/**
 * Determines whether a node is an array type.
 */
pub fn isArrayType(node: Node) -> bool {
    if (node.getKind() = 182) {
        return true
    }
}

/**
 * Determines whether a node is a tuple type.
 */
pub fn isTupleType(node: Node) -> bool {
    if (node.getKind() = 183) {
        return true
    }
}

/**
 * Determines whether a node is an optional type.
 */
pub fn isOptionalType(node: Node) -> bool {
    if (node.getKind() = 184) {
        return true
    }
}

/**
 * Determines whether a node is a rest type.
 */
pub fn isRestType(node: Node) -> bool {
    if (node.getKind() = 185) {
        return true
    }
}

/**
 * Determines whether a node is an union type.
 */
pub fn isUnionType(node: Node) -> bool {
    if (node.getKind() = 186) {
        return true
    }
}

/**
 * Determines whether a node is an intersection type.
 */
pub fn isIntersectionType(node: Node) -> bool {
    if (node.getKind() = 187) {
        return true
    }
}

/**
 * Determines whether a node is a conditional type.
 */
pub fn isConditionalType(node: Node) -> bool {
    if (node.getKind() = 188) {
        return true
    }
}

/**
 * Determines whether a node is an infer type.
 */
pub fn isInferType(node: Node) -> bool {
    if (node.getKind() = 189) {
        return true
    }
}

/**
 * Determines whether a node is a parenthesized type.
 */
pub fn isParenthesizedType(node: Node) -> bool {
    if (node.getKind() = 190) {
        return true
    }
}

/**
 * Determines whether a node is a this type.
 */
pub fn isThisType(node: Node) -> bool {
    if (node.getKind() = 191) {
        return true
    }
}

/**
 * Determines whether a node is a type operator.
 */
pub fn isTypeOperator(node: Node) -> bool {
    if (node.getKind() = 192) {
        return true
    }
}

/**
 * Determines whether a node is an indexed access type.
 */
pub fn isIndexedAccessType(node: Node) -> bool {
    if (node.getKind() = 193) {
        return true
    }
}

/**
 * Determines whether a node is a mapped type.
 */
pub fn isMappedType(node: Node) -> bool {
    if (node.getKind() = 194) {
        return true
    }
}

/**
 * Determines whether a node is a literal type.
 */
pub fn isLiteralType(node: Node) -> bool {
    if (node.getKind() = 195) {
        return true
    }
}

/**
 * Determines whether a node is a named tuple member.
 */
pub fn isNamedTupleMember(node: Node) -> bool {
    if (node.getKind() = 196) {
        return true
    }
}

/**
 * Determines whether a node is a template literal type.
 */
pub fn isTemplateLiteralType(node: Node) -> bool {
    if (node.getKind() = 197) {
        return true
    }
}

/**
 * Determines whether a node is a template literal type span.
 */
pub fn isTemplateLiteralTypeSpan(node: Node) -> bool {
    if (node.getKind() = 198) {
        return true
    }
}

/**
 * Determines whether a node is an import type.
 */
pub fn isImportType(node: Node) -> bool {
    if (node.getKind() = 199) {
        return true
    }
}

/**
 * Determines whether a node is an expression with type arguments.
 */
pub fn isExpressionWithTypeArguments(node: Node) -> bool {
    if (node.getKind() = 227) {
        return true
    }
}

/**
 * Determines whether a node is a node with type arguments.
 */
pub fn isNodeWithTypeArguments(node: Node) -> bool {
    if (isTypeReference(node)) {
        return true
    }
    if (isImportType(node)) {
        return true
    }
    if (isExpressionWithTypeArguments(node)) {
        return true
    }
}

/**
 * Determines whether a node is a type node.
 */
pub fn isTypeNode(node: Node) -> bool {
    if (isKeywordTypeNode(node)) {
        return true
    }
    if (isNodeWithTypeArguments(node)) {
        return true
    }
    if (isTypePredicate(node)) {
        return true
    }
    if (isFunctionType(node)) {
        return true
    }
    if (isConstructorType(node)) {
        return true
    }
    if (isTypeQuery(node)) {
        return true
    }
    if (isTypeLiteral(node)) {
        return true
    }
    if (isArrayType(node)) {
        return true
    }
    if (isTupleType(node)) {
        return true
    }
    if (isOptionalType(node)) {
        return true
    }
    if (isRestType(node)) {
        return true
    }
    if (isUnionType(node)) {
        return true
    }
    if (isIntersectionType(node)) {
        return true
    }
    if (isConditionalType(node)) {
        return true
    }
    if (isInferType(node)) {
        return true
    }
    if (isParenthesizedType(node)) {
        return true
    }
    if (isThisType(node)) {
        return true
    }
    if (isTypeOperator(node)) {
        return true
    }
    if (isIndexedAccessType(node)) {
        return true
    }
    if (isMappedType(node)) {
        return true
    }
    if (isLiteralType(node)) {
        return true
    }
    if (isNamedTupleMember(node)) {
        return true
    }
    if (isTemplateLiteralType(node)) {
        return true
    }
    if (isTemplateLiteralTypeSpan(node)) {
        return true
    }
}

/**
 * Determines whether a node is a property signature.
 */
pub fn isPropertySignature(node: Node) -> bool {
    if (node.getKind() = 165) {
        return true
    }
}

/**
 * Determines whether a node is a method signature.
 */
pub fn isMethodSignature(node: Node) -> bool {
    if (node.getKind() = 167) {
        return true
    }
}

/**
 * Determines whether a node is a call signature.
 */
pub fn isCallSignature(node: Node) -> bool {
    if (node.getKind() = 173) {
        return true
    }
}

/**
 * Determines whether a node is a construct signature.
 */
pub fn isConstructSignature(node: Node) -> bool {
    if (node.getKind() = 174) {
        return true
    }
}

/**
 * Determines whether a node is an index signature.
 */
pub fn isIndexSignature(node: Node) -> bool {
    if (node.getKind() = 175) {
        return true
    }
}

/**
 * Determines whether a node is a type element.
 */
pub fn isTypeElement(node: Node) -> bool {
    if (isPropertySignature(node)) {
        return true
    }
    if (isMethodSignature(node)) {
        return true
    }
    if (isCallSignature(node)) {
        return true
    }
    if (isConstructSignature(node)) {
        return true
    }
    if (isIndexSignature(node)) {
        return true
    }
}
