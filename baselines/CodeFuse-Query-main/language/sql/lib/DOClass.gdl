/**
 * @brief DO class: An antspark create table statement.
 */
schema AntsparkCreateTableStatementDO {
    @primary oid_: int,
    datasource_oid_: int,
    meta_life_cycle_oid_: int,
    serde_properties_: string
}
impl AntsparkCreateTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *AntsparkCreateTableStatementDO {
    	for (tmp in db.antspark_create_table_statement) {
            yield AntsparkCreateTableStatementDO {
                oid_ : tmp.oid_,
                datasource_oid_ : tmp.datasource_oid_,
                meta_life_cycle_oid_ : tmp.meta_life_cycle_oid_,
                serde_properties_ : tmp.serde_properties_
            }
    	}
    }
    /**
     * @brief gets the datasource oid of this element.
     * @return int
     */
    pub fn getDatasourceOid(self) -> int {
        return self.datasource_oid_
    }
    /**
     * @brief gets the meta life cycle oid of this element.
     * @return int
     */
    pub fn getMetaLifeCycleOid(self) -> int {
        return self.meta_life_cycle_oid_
    }
    /**
     * @brief gets the serde properties of this element.
     * @return string
     */
    pub fn getSerdeProperties(self) -> string {
        return self.serde_properties_
    }
}
/**
 * @brief DO class: A blink create table statement.
 */
schema BlinkCreateTableStatementDO {
    @primary oid_: int,
    period_for_oid_: int
}
impl BlinkCreateTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *BlinkCreateTableStatementDO {
    	for (tmp in db.blink_create_table_statement) {
            yield BlinkCreateTableStatementDO {
                oid_ : tmp.oid_,
                period_for_oid_ : tmp.period_for_oid_
            }
    	}
    }
    /**
     * @brief gets the period for oid of this element.
     * @return int
     */
    pub fn getPeriodForOid(self) -> int {
        return self.period_for_oid_
    }
}
/**
 * @brief DO class: A clickhouse create table statement.
 */
schema ClickhouseCreateTableStatementDO {
    @primary oid_: int,
    order_by_oid_: int,
    partition_by_oid_: int,
    sample_by_oid_: int
}
impl ClickhouseCreateTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *ClickhouseCreateTableStatementDO {
    	for (tmp in db.clickhouse_create_table_statement) {
            yield ClickhouseCreateTableStatementDO {
                oid_ : tmp.oid_,
                order_by_oid_ : tmp.order_by_oid_,
                partition_by_oid_ : tmp.partition_by_oid_,
                sample_by_oid_ : tmp.sample_by_oid_
            }
    	}
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the partition by oid of this element.
     * @return int
     */
    pub fn getPartitionByOid(self) -> int {
        return self.partition_by_oid_
    }
    /**
     * @brief gets the sample by oid of this element.
     * @return int
     */
    pub fn getSampleByOid(self) -> int {
        return self.sample_by_oid_
    }
}
/**
 * @brief DO class: A cobar show status.
 */
schema CobarShowStatusDO {
    @primary oid_: int
}
impl CobarShowStatusDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *CobarShowStatusDO {
    	for (tmp in db.cobar_show_status) {
            yield CobarShowStatusDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A corpus.
 */
schema CorpusDO {
    @primary oid_: int,
    printable_text: string
}
impl CorpusDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *CorpusDO {
    	for (tmp in db.corpus) {
            yield CorpusDO {
                oid_ : tmp.oid_,
                printable_text : tmp.printable_text
            }
    	}
    }
    /**
     * @brief gets a printed representation of this element, including its structure where applicable.
     * @return string.
     */
    pub fn getPrintableText(self) -> string {
        return self.printable_text
    }
}
/**
 * @brief DO class: A cycle clause.
 */
schema CycleClauseDO {
    @primary oid_: int,
    default_value_oid_: int,
    mark_oid_: int,
    value_oid_: int
}
impl CycleClauseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *CycleClauseDO {
    	for (tmp in db.cycle_clause) {
            yield CycleClauseDO {
                oid_ : tmp.oid_,
                default_value_oid_ : tmp.default_value_oid_,
                mark_oid_ : tmp.mark_oid_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the default value oid of this element.
     * @return int
     */
    pub fn getDefaultValueOid(self) -> int {
        return self.default_value_oid_
    }
    /**
     * @brief gets the mark oid of this element.
     * @return int
     */
    pub fn getMarkOid(self) -> int {
        return self.mark_oid_
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A db2 create table statement.
 */
schema Db2CreateTableStatementDO {
    @primary oid_: int,
    database_oid_: int,
    index_in_oid_: int,
    is_data_capture_changes_: int,
    is_data_capture_none_: int,
    validproc_oid_: int
}
impl Db2CreateTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *Db2CreateTableStatementDO {
    	for (tmp in db.db2_create_table_statement) {
            yield Db2CreateTableStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_,
                index_in_oid_ : tmp.index_in_oid_,
                is_data_capture_changes_ : tmp.is_data_capture_changes_,
                is_data_capture_none_ : tmp.is_data_capture_none_,
                validproc_oid_ : tmp.validproc_oid_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
    /**
     * @brief gets the index in oid of this element.
     * @return int
     */
    pub fn getIndexInOid(self) -> int {
        return self.index_in_oid_
    }
    /**
     * @brief gets the is data capture changes of this element.
     * @return int
     */
    pub fn getIsDataCaptureChanges(self) -> int {
        return self.is_data_capture_changes_
    }
    /**
     * @brief gets the is data capture none of this element.
     * @return int
     */
    pub fn getIsDataCaptureNone(self) -> int {
        return self.is_data_capture_none_
    }
    /**
     * @brief gets the validproc oid of this element.
     * @return int
     */
    pub fn getValidprocOid(self) -> int {
        return self.validproc_oid_
    }
}
/**
 * @brief DO class: A db2 select query block.
 */
schema Db2SelectQueryBlockDO {
    @primary oid_: int,
    is_for_read_only_: int,
    isolation_: string,
    optimize_for_oid_: int
}
impl Db2SelectQueryBlockDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *Db2SelectQueryBlockDO {
    	for (tmp in db.db2_select_query_block) {
            yield Db2SelectQueryBlockDO {
                oid_ : tmp.oid_,
                is_for_read_only_ : tmp.is_for_read_only_,
                isolation_ : tmp.isolation_,
                optimize_for_oid_ : tmp.optimize_for_oid_
            }
    	}
    }
    /**
     * @brief gets the is for read only of this element.
     * @return int
     */
    pub fn getIsForReadOnly(self) -> int {
        return self.is_for_read_only_
    }
    /**
     * @brief gets the isolation of this element.
     * @return string
     */
    pub fn getIsolation(self) -> string {
        return self.isolation_
    }
    /**
     * @brief gets the optimize for oid of this element.
     * @return int
     */
    pub fn getOptimizeForOid(self) -> int {
        return self.optimize_for_oid_
    }
}
/**
 * @brief DO class: A db2 statement impl.
 */
schema Db2StatementImplDO {
    @primary oid_: int
}
impl Db2StatementImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *Db2StatementImplDO {
    	for (tmp in db.db2_statement_impl) {
            yield Db2StatementImplDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A db2 values statement.
 */
schema Db2ValuesStatementDO {
    @primary oid_: int,
    expr_oid_: int
}
impl Db2ValuesStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *Db2ValuesStatementDO {
    	for (tmp in db.db2_values_statement) {
            yield Db2ValuesStatementDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
}
/**
 * @brief DO class: A drds baseline statement.
 */
schema DrdsBaselineStatementDO {
    @primary oid_: int,
    baseline_ids_: string,
    operation_: string,
    select_oid_: int
}
impl DrdsBaselineStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *DrdsBaselineStatementDO {
    	for (tmp in db.drds_baseline_statement) {
            yield DrdsBaselineStatementDO {
                oid_ : tmp.oid_,
                baseline_ids_ : tmp.baseline_ids_,
                operation_ : tmp.operation_,
                select_oid_ : tmp.select_oid_
            }
    	}
    }
    /**
     * @brief gets the baseline ids of this element.
     * @return string
     */
    pub fn getBaselineIds(self) -> string {
        return self.baseline_ids_
    }
    /**
     * @brief gets the operation of this element.
     * @return string
     */
    pub fn getOperation(self) -> string {
        return self.operation_
    }
    /**
     * @brief gets the select oid of this element.
     * @return int
     */
    pub fn getSelectOid(self) -> int {
        return self.select_oid_
    }
}
/**
 * @brief DO class: A drds cancel ddl job.
 */
schema DrdsCancelDdlJobDO {
    @primary oid_: int,
    job_ids_: string
}
impl DrdsCancelDdlJobDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *DrdsCancelDdlJobDO {
    	for (tmp in db.drds_cancel_ddl_job) {
            yield DrdsCancelDdlJobDO {
                oid_ : tmp.oid_,
                job_ids_ : tmp.job_ids_
            }
    	}
    }
    /**
     * @brief gets the job ids of this element.
     * @return string
     */
    pub fn getJobIds(self) -> string {
        return self.job_ids_
    }
}
/**
 * @brief DO class: A drds change ddl job.
 */
schema DrdsChangeDdlJobDO {
    @primary oid_: int,
    group_and_table_name_list_: string,
    is_add_: int,
    is_skip_: int,
    job_id_: string
}
impl DrdsChangeDdlJobDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *DrdsChangeDdlJobDO {
    	for (tmp in db.drds_change_ddl_job) {
            yield DrdsChangeDdlJobDO {
                oid_ : tmp.oid_,
                group_and_table_name_list_ : tmp.group_and_table_name_list_,
                is_add_ : tmp.is_add_,
                is_skip_ : tmp.is_skip_,
                job_id_ : tmp.job_id_
            }
    	}
    }
    /**
     * @brief gets the group and table name list of this element.
     * @return string
     */
    pub fn getGroupAndTableNameList(self) -> string {
        return self.group_and_table_name_list_
    }
    /**
     * @brief gets the is add of this element.
     * @return int
     */
    pub fn getIsAdd(self) -> int {
        return self.is_add_
    }
    /**
     * @brief gets the is skip of this element.
     * @return int
     */
    pub fn getIsSkip(self) -> int {
        return self.is_skip_
    }
    /**
     * @brief gets the job id of this element.
     * @return string
     */
    pub fn getJobId(self) -> string {
        return self.job_id_
    }
}
/**
 * @brief DO class: A drds clear ddl job cache.
 */
schema DrdsClearDdlJobCacheDO {
    @primary oid_: int,
    is_all_jobs_: int,
    job_ids_: string
}
impl DrdsClearDdlJobCacheDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *DrdsClearDdlJobCacheDO {
    	for (tmp in db.drds_clear_ddl_job_cache) {
            yield DrdsClearDdlJobCacheDO {
                oid_ : tmp.oid_,
                is_all_jobs_ : tmp.is_all_jobs_,
                job_ids_ : tmp.job_ids_
            }
    	}
    }
    /**
     * @brief gets the is all jobs of this element.
     * @return int
     */
    pub fn getIsAllJobs(self) -> int {
        return self.is_all_jobs_
    }
    /**
     * @brief gets the job ids of this element.
     * @return string
     */
    pub fn getJobIds(self) -> string {
        return self.job_ids_
    }
}
/**
 * @brief DO class: A drds inspect ddl job cache.
 */
schema DrdsInspectDdlJobCacheDO {
    @primary oid_: int
}
impl DrdsInspectDdlJobCacheDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *DrdsInspectDdlJobCacheDO {
    	for (tmp in db.drds_inspect_ddl_job_cache) {
            yield DrdsInspectDdlJobCacheDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A drds recover ddl job.
 */
schema DrdsRecoverDdlJobDO {
    @primary oid_: int,
    is_all_jobs_: int,
    job_ids_: string
}
impl DrdsRecoverDdlJobDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *DrdsRecoverDdlJobDO {
    	for (tmp in db.drds_recover_ddl_job) {
            yield DrdsRecoverDdlJobDO {
                oid_ : tmp.oid_,
                is_all_jobs_ : tmp.is_all_jobs_,
                job_ids_ : tmp.job_ids_
            }
    	}
    }
    /**
     * @brief gets the is all jobs of this element.
     * @return int
     */
    pub fn getIsAllJobs(self) -> int {
        return self.is_all_jobs_
    }
    /**
     * @brief gets the job ids of this element.
     * @return string
     */
    pub fn getJobIds(self) -> string {
        return self.job_ids_
    }
}
/**
 * @brief DO class: A drds remove ddl job.
 */
schema DrdsRemoveDdlJobDO {
    @primary oid_: int,
    is_all_completed_: int,
    is_all_pending_: int,
    job_ids_: string
}
impl DrdsRemoveDdlJobDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *DrdsRemoveDdlJobDO {
    	for (tmp in db.drds_remove_ddl_job) {
            yield DrdsRemoveDdlJobDO {
                oid_ : tmp.oid_,
                is_all_completed_ : tmp.is_all_completed_,
                is_all_pending_ : tmp.is_all_pending_,
                job_ids_ : tmp.job_ids_
            }
    	}
    }
    /**
     * @brief gets the is all completed of this element.
     * @return int
     */
    pub fn getIsAllCompleted(self) -> int {
        return self.is_all_completed_
    }
    /**
     * @brief gets the is all pending of this element.
     * @return int
     */
    pub fn getIsAllPending(self) -> int {
        return self.is_all_pending_
    }
    /**
     * @brief gets the job ids of this element.
     * @return string
     */
    pub fn getJobIds(self) -> string {
        return self.job_ids_
    }
}
/**
 * @brief DO class: A drds rollback ddl job.
 */
schema DrdsRollbackDdlJobDO {
    @primary oid_: int,
    job_ids_: string
}
impl DrdsRollbackDdlJobDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *DrdsRollbackDdlJobDO {
    	for (tmp in db.drds_rollback_ddl_job) {
            yield DrdsRollbackDdlJobDO {
                oid_ : tmp.oid_,
                job_ids_ : tmp.job_ids_
            }
    	}
    }
    /**
     * @brief gets the job ids of this element.
     * @return string
     */
    pub fn getJobIds(self) -> string {
        return self.job_ids_
    }
}
/**
 * @brief DO class: A drds show ddl jobs.
 */
schema DrdsShowDdlJobsDO {
    @primary oid_: int,
    is_full_: int,
    job_ids_: string
}
impl DrdsShowDdlJobsDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *DrdsShowDdlJobsDO {
    	for (tmp in db.drds_show_ddl_jobs) {
            yield DrdsShowDdlJobsDO {
                oid_ : tmp.oid_,
                is_full_ : tmp.is_full_,
                job_ids_ : tmp.job_ids_
            }
    	}
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the job ids of this element.
     * @return string
     */
    pub fn getJobIds(self) -> string {
        return self.job_ids_
    }
}
/**
 * @brief DO class: A drds show global index.
 */
schema DrdsShowGlobalIndexDO {
    @primary oid_: int,
    table_name_oid_: int
}
impl DrdsShowGlobalIndexDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *DrdsShowGlobalIndexDO {
    	for (tmp in db.drds_show_global_index) {
            yield DrdsShowGlobalIndexDO {
                oid_ : tmp.oid_,
                table_name_oid_ : tmp.table_name_oid_
            }
    	}
    }
    /**
     * @brief gets the table name oid of this element.
     * @return int
     */
    pub fn getTableNameOid(self) -> int {
        return self.table_name_oid_
    }
}
/**
 * @brief DO class: A drds show metadata lock.
 */
schema DrdsShowMetadataLockDO {
    @primary oid_: int,
    schema_name_oid_: int
}
impl DrdsShowMetadataLockDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *DrdsShowMetadataLockDO {
    	for (tmp in db.drds_show_metadata_lock) {
            yield DrdsShowMetadataLockDO {
                oid_ : tmp.oid_,
                schema_name_oid_ : tmp.schema_name_oid_
            }
    	}
    }
    /**
     * @brief gets the schema name oid of this element.
     * @return int
     */
    pub fn getSchemaNameOid(self) -> int {
        return self.schema_name_oid_
    }
}
/**
 * @brief DO class: A file.
 */
schema FileDO {
    @primary oid_: int,
    relative_path_: string,
    extension_: string,
    name_: string,
    corpus_oid_: int
}
impl FileDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *FileDO {
    	for (tmp in db.file) {
            yield FileDO {
                oid_ : tmp.oid_,
                relative_path_ : tmp.relative_path_,
                extension_ : tmp.extension_,
                name_ : tmp.name_,
                corpus_oid_ : tmp.corpus_oid_
            }
    	}
    }
    /**
     * @brief gets the relative path of this element.
     * @return string
     */
    pub fn getRelativePath(self) -> string {
        return self.relative_path_
    }
    /**
     * @brief gets the extension of this element.
     * @return string
     */
    pub fn getExtension(self) -> string {
        return self.extension_
    }
    /**
     * @brief gets the name of this element.
     * @return string
     */
    pub fn getName(self) -> string {
        return self.name_
    }
    /**
     * @brief gets the corpus oid of this element.
     * @return int
     */
    pub fn getCorpusOid(self) -> int {
        return self.corpus_oid_
    }
}
/**
 * @brief DO class: A hive create function statement.
 */
schema HiveCreateFunctionStatementDO {
    @primary oid_: int,
    class_name_oid_: int,
    code_: string,
    is_declare_: int,
    location_oid_: int,
    resource_type_: string,
    symbol_oid_: int
}
impl HiveCreateFunctionStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *HiveCreateFunctionStatementDO {
    	for (tmp in db.hive_create_function_statement) {
            yield HiveCreateFunctionStatementDO {
                oid_ : tmp.oid_,
                class_name_oid_ : tmp.class_name_oid_,
                code_ : tmp.code_,
                is_declare_ : tmp.is_declare_,
                location_oid_ : tmp.location_oid_,
                resource_type_ : tmp.resource_type_,
                symbol_oid_ : tmp.symbol_oid_
            }
    	}
    }
    /**
     * @brief gets the class name oid of this element.
     * @return int
     */
    pub fn getClassNameOid(self) -> int {
        return self.class_name_oid_
    }
    /**
     * @brief gets the code of this element.
     * @return string
     */
    pub fn getCode(self) -> string {
        return self.code_
    }
    /**
     * @brief gets the is declare of this element.
     * @return int
     */
    pub fn getIsDeclare(self) -> int {
        return self.is_declare_
    }
    /**
     * @brief gets the location oid of this element.
     * @return int
     */
    pub fn getLocationOid(self) -> int {
        return self.location_oid_
    }
    /**
     * @brief gets the resource type of this element.
     * @return string
     */
    pub fn getResourceType(self) -> string {
        return self.resource_type_
    }
    /**
     * @brief gets the symbol oid of this element.
     * @return int
     */
    pub fn getSymbolOid(self) -> int {
        return self.symbol_oid_
    }
}
/**
 * @brief DO class: A hive create table statement.
 */
schema HiveCreateTableStatementDO {
    @primary oid_: int,
    into_buckets_oid_: int,
    is_like_query_: int,
    meta_life_cycle_oid_: int,
    serde_properties_: string,
    using_oid_: int
}
impl HiveCreateTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *HiveCreateTableStatementDO {
    	for (tmp in db.hive_create_table_statement) {
            yield HiveCreateTableStatementDO {
                oid_ : tmp.oid_,
                into_buckets_oid_ : tmp.into_buckets_oid_,
                is_like_query_ : tmp.is_like_query_,
                meta_life_cycle_oid_ : tmp.meta_life_cycle_oid_,
                serde_properties_ : tmp.serde_properties_,
                using_oid_ : tmp.using_oid_
            }
    	}
    }
    /**
     * @brief gets the into buckets oid of this element.
     * @return int
     */
    pub fn getIntoBucketsOid(self) -> int {
        return self.into_buckets_oid_
    }
    /**
     * @brief gets the is like query of this element.
     * @return int
     */
    pub fn getIsLikeQuery(self) -> int {
        return self.is_like_query_
    }
    /**
     * @brief gets the meta life cycle oid of this element.
     * @return int
     */
    pub fn getMetaLifeCycleOid(self) -> int {
        return self.meta_life_cycle_oid_
    }
    /**
     * @brief gets the serde properties of this element.
     * @return string
     */
    pub fn getSerdeProperties(self) -> string {
        return self.serde_properties_
    }
    /**
     * @brief gets the using oid of this element.
     * @return int
     */
    pub fn getUsingOid(self) -> int {
        return self.using_oid_
    }
}
/**
 * @brief DO class: A hive input output format.
 */
schema HiveInputOutputFormatDO {
    @primary oid_: int,
    input_oid_: int,
    output_oid_: int
}
impl HiveInputOutputFormatDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *HiveInputOutputFormatDO {
    	for (tmp in db.hive_input_output_format) {
            yield HiveInputOutputFormatDO {
                oid_ : tmp.oid_,
                input_oid_ : tmp.input_oid_,
                output_oid_ : tmp.output_oid_
            }
    	}
    }
    /**
     * @brief gets the input oid of this element.
     * @return int
     */
    pub fn getInputOid(self) -> int {
        return self.input_oid_
    }
    /**
     * @brief gets the output oid of this element.
     * @return int
     */
    pub fn getOutputOid(self) -> int {
        return self.output_oid_
    }
}
/**
 * @brief DO class: A hive insert.
 */
schema HiveInsertDO {
    @primary oid_: int,
    query_oid_: int,
    table_source_oid_: int,
    values_list_: string
}
impl HiveInsertDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *HiveInsertDO {
    	for (tmp in db.hive_insert) {
            yield HiveInsertDO {
                oid_ : tmp.oid_,
                query_oid_ : tmp.query_oid_,
                table_source_oid_ : tmp.table_source_oid_,
                values_list_ : tmp.values_list_
            }
    	}
    }
    /**
     * @brief gets the query oid of this element.
     * @return int
     */
    pub fn getQueryOid(self) -> int {
        return self.query_oid_
    }
    /**
     * @brief gets the table source oid of this element.
     * @return int
     */
    pub fn getTableSourceOid(self) -> int {
        return self.table_source_oid_
    }
    /**
     * @brief gets the values list of this element.
     * @return string
     */
    pub fn getValuesList(self) -> string {
        return self.values_list_
    }
}
/**
 * @brief DO class: A hive insert statement.
 */
schema HiveInsertStatementDO {
    @primary oid_: int,
    is_if_not_exists_: int
}
impl HiveInsertStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *HiveInsertStatementDO {
    	for (tmp in db.hive_insert_statement) {
            yield HiveInsertStatementDO {
                oid_ : tmp.oid_,
                is_if_not_exists_ : tmp.is_if_not_exists_
            }
    	}
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
}
/**
 * @brief DO class: A hive load data statement.
 */
schema HiveLoadDataStatementDO {
    @primary oid_: int,
    format_oid_: int,
    inpath_oid_: int,
    into_oid_: int,
    is_local_: int,
    is_overwrite_: int,
    row_format_oid_: int,
    serde_properties_: string,
    stored_as_oid_: int,
    stored_by_oid_: int,
    using_oid_: int
}
impl HiveLoadDataStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *HiveLoadDataStatementDO {
    	for (tmp in db.hive_load_data_statement) {
            yield HiveLoadDataStatementDO {
                oid_ : tmp.oid_,
                format_oid_ : tmp.format_oid_,
                inpath_oid_ : tmp.inpath_oid_,
                into_oid_ : tmp.into_oid_,
                is_local_ : tmp.is_local_,
                is_overwrite_ : tmp.is_overwrite_,
                row_format_oid_ : tmp.row_format_oid_,
                serde_properties_ : tmp.serde_properties_,
                stored_as_oid_ : tmp.stored_as_oid_,
                stored_by_oid_ : tmp.stored_by_oid_,
                using_oid_ : tmp.using_oid_
            }
    	}
    }
    /**
     * @brief gets the format oid of this element.
     * @return int
     */
    pub fn getFormatOid(self) -> int {
        return self.format_oid_
    }
    /**
     * @brief gets the inpath oid of this element.
     * @return int
     */
    pub fn getInpathOid(self) -> int {
        return self.inpath_oid_
    }
    /**
     * @brief gets the into oid of this element.
     * @return int
     */
    pub fn getIntoOid(self) -> int {
        return self.into_oid_
    }
    /**
     * @brief gets the is local of this element.
     * @return int
     */
    pub fn getIsLocal(self) -> int {
        return self.is_local_
    }
    /**
     * @brief gets the is overwrite of this element.
     * @return int
     */
    pub fn getIsOverwrite(self) -> int {
        return self.is_overwrite_
    }
    /**
     * @brief gets the row format oid of this element.
     * @return int
     */
    pub fn getRowFormatOid(self) -> int {
        return self.row_format_oid_
    }
    /**
     * @brief gets the serde properties of this element.
     * @return string
     */
    pub fn getSerdeProperties(self) -> string {
        return self.serde_properties_
    }
    /**
     * @brief gets the stored as oid of this element.
     * @return int
     */
    pub fn getStoredAsOid(self) -> int {
        return self.stored_as_oid_
    }
    /**
     * @brief gets the stored by oid of this element.
     * @return int
     */
    pub fn getStoredByOid(self) -> int {
        return self.stored_by_oid_
    }
    /**
     * @brief gets the using oid of this element.
     * @return int
     */
    pub fn getUsingOid(self) -> int {
        return self.using_oid_
    }
}
/**
 * @brief DO class: A hive msck repair statement.
 */
schema HiveMsckRepairStatementDO {
    @primary oid_: int,
    database_oid_: int,
    is_add_partitions_: int,
    table_oid_: int
}
impl HiveMsckRepairStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *HiveMsckRepairStatementDO {
    	for (tmp in db.hive_msck_repair_statement) {
            yield HiveMsckRepairStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_,
                is_add_partitions_ : tmp.is_add_partitions_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
    /**
     * @brief gets the is add partitions of this element.
     * @return int
     */
    pub fn getIsAddPartitions(self) -> int {
        return self.is_add_partitions_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: A hive multi insert statement.
 */
schema HiveMultiInsertStatementDO {
    @primary oid_: int,
    from_oid_: int,
    with_oid_: int
}
impl HiveMultiInsertStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *HiveMultiInsertStatementDO {
    	for (tmp in db.hive_multi_insert_statement) {
            yield HiveMultiInsertStatementDO {
                oid_ : tmp.oid_,
                from_oid_ : tmp.from_oid_,
                with_oid_ : tmp.with_oid_
            }
    	}
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the with oid of this element.
     * @return int
     */
    pub fn getWithOid(self) -> int {
        return self.with_oid_
    }
}
/**
 * @brief DO class: code location
 */
schema LocationDO {
    @primary oid_: int,
    file_oid_: int,
    start_line_number_: int,
    start_column_number_: int
}
impl LocationDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *LocationDO {
    	for (tmp in db.location) {
            yield LocationDO {
                oid_ : tmp.oid_,
                file_oid_ : tmp.file_oid_,
                start_line_number_ : tmp.start_line_number_,
                start_column_number_ : tmp.start_column_number_
            }
    	}
    }
    /**
     * @brief gets the file oid of this element.
     * @return int
     */
    pub fn getFileOid(self) -> int {
        return self.file_oid_
    }
    /**
     * @brief gets the start line number of this element.
     * @return int
     */
    pub fn getStartLineNumber(self) -> int {
        return self.start_line_number_
    }
    /**
     * @brief gets the start column number of this element.
     * @return int
     */
    pub fn getStartColumnNumber(self) -> int {
        return self.start_column_number_
    }
}
/**
 * @brief DO class: A model clause.
 */
schema ModelClauseDO {
    @primary oid_: int,
    cell_reference_options_: string,
    main_model_: string,
    reference_model_clauses_: string,
    return_rows_clause_: string
}
impl ModelClauseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *ModelClauseDO {
    	for (tmp in db.model_clause) {
            yield ModelClauseDO {
                oid_ : tmp.oid_,
                cell_reference_options_ : tmp.cell_reference_options_,
                main_model_ : tmp.main_model_,
                reference_model_clauses_ : tmp.reference_model_clauses_,
                return_rows_clause_ : tmp.return_rows_clause_
            }
    	}
    }
    /**
     * @brief gets the cell reference options of this element.
     * @return string
     */
    pub fn getCellReferenceOptions(self) -> string {
        return self.cell_reference_options_
    }
    /**
     * @brief gets the main model of this element.
     * @return string
     */
    pub fn getMainModel(self) -> string {
        return self.main_model_
    }
    /**
     * @brief gets the reference model clauses of this element.
     * @return string
     */
    pub fn getReferenceModelClauses(self) -> string {
        return self.reference_model_clauses_
    }
    /**
     * @brief gets the return rows clause of this element.
     * @return string
     */
    pub fn getReturnRowsClause(self) -> string {
        return self.return_rows_clause_
    }
}
/**
 * @brief DO class: A my sql alter database kill job.
 */
schema MySqlAlterDatabaseKillJobDO {
    @primary oid_: int,
    job_id_oid_: int,
    job_type_oid_: int
}
impl MySqlAlterDatabaseKillJobDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterDatabaseKillJobDO {
    	for (tmp in db.my_sql_alter_database_kill_job) {
            yield MySqlAlterDatabaseKillJobDO {
                oid_ : tmp.oid_,
                job_id_oid_ : tmp.job_id_oid_,
                job_type_oid_ : tmp.job_type_oid_
            }
    	}
    }
    /**
     * @brief gets the job id oid of this element.
     * @return int
     */
    pub fn getJobIdOid(self) -> int {
        return self.job_id_oid_
    }
    /**
     * @brief gets the job type oid of this element.
     * @return int
     */
    pub fn getJobTypeOid(self) -> int {
        return self.job_type_oid_
    }
}
/**
 * @brief DO class: A my sql alter database set option.
 */
schema MySqlAlterDatabaseSetOptionDO {
    @primary oid_: int,
    on_oid_: int
}
impl MySqlAlterDatabaseSetOptionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterDatabaseSetOptionDO {
    	for (tmp in db.my_sql_alter_database_set_option) {
            yield MySqlAlterDatabaseSetOptionDO {
                oid_ : tmp.oid_,
                on_oid_ : tmp.on_oid_
            }
    	}
    }
    /**
     * @brief gets the on oid of this element.
     * @return int
     */
    pub fn getOnOid(self) -> int {
        return self.on_oid_
    }
}
/**
 * @brief DO class: A my sql alter event statement.
 */
schema MySqlAlterEventStatementDO {
    @primary oid_: int,
    comment_oid_: int,
    definer_oid_: int,
    enable_: int,
    event_body_oid_: int,
    is_disable_on_slave_: int,
    is_on_completion_preserve_: int,
    name_oid_: int,
    rename_to_oid_: int,
    schedule_oid_: int
}
impl MySqlAlterEventStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterEventStatementDO {
    	for (tmp in db.my_sql_alter_event_statement) {
            yield MySqlAlterEventStatementDO {
                oid_ : tmp.oid_,
                comment_oid_ : tmp.comment_oid_,
                definer_oid_ : tmp.definer_oid_,
                enable_ : tmp.enable_,
                event_body_oid_ : tmp.event_body_oid_,
                is_disable_on_slave_ : tmp.is_disable_on_slave_,
                is_on_completion_preserve_ : tmp.is_on_completion_preserve_,
                name_oid_ : tmp.name_oid_,
                rename_to_oid_ : tmp.rename_to_oid_,
                schedule_oid_ : tmp.schedule_oid_
            }
    	}
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the definer oid of this element.
     * @return int
     */
    pub fn getDefinerOid(self) -> int {
        return self.definer_oid_
    }
    /**
     * @brief gets the enable of this element.
     * @return int
     */
    pub fn getEnable(self) -> int {
        return self.enable_
    }
    /**
     * @brief gets the event body oid of this element.
     * @return int
     */
    pub fn getEventBodyOid(self) -> int {
        return self.event_body_oid_
    }
    /**
     * @brief gets the is disable on slave of this element.
     * @return int
     */
    pub fn getIsDisableOnSlave(self) -> int {
        return self.is_disable_on_slave_
    }
    /**
     * @brief gets the is on completion preserve of this element.
     * @return int
     */
    pub fn getIsOnCompletionPreserve(self) -> int {
        return self.is_on_completion_preserve_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the rename to oid of this element.
     * @return int
     */
    pub fn getRenameToOid(self) -> int {
        return self.rename_to_oid_
    }
    /**
     * @brief gets the schedule oid of this element.
     * @return int
     */
    pub fn getScheduleOid(self) -> int {
        return self.schedule_oid_
    }
}
/**
 * @brief DO class: A my sql alter log file group statement.
 */
schema MySqlAlterLogFileGroupStatementDO {
    @primary oid_: int,
    add_undo_file_oid_: int,
    engine_oid_: int,
    initial_size_oid_: int,
    is_wait_: int,
    name_oid_: int
}
impl MySqlAlterLogFileGroupStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterLogFileGroupStatementDO {
    	for (tmp in db.my_sql_alter_log_file_group_statement) {
            yield MySqlAlterLogFileGroupStatementDO {
                oid_ : tmp.oid_,
                add_undo_file_oid_ : tmp.add_undo_file_oid_,
                engine_oid_ : tmp.engine_oid_,
                initial_size_oid_ : tmp.initial_size_oid_,
                is_wait_ : tmp.is_wait_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the add undo file oid of this element.
     * @return int
     */
    pub fn getAddUndoFileOid(self) -> int {
        return self.add_undo_file_oid_
    }
    /**
     * @brief gets the engine oid of this element.
     * @return int
     */
    pub fn getEngineOid(self) -> int {
        return self.engine_oid_
    }
    /**
     * @brief gets the initial size oid of this element.
     * @return int
     */
    pub fn getInitialSizeOid(self) -> int {
        return self.initial_size_oid_
    }
    /**
     * @brief gets the is wait of this element.
     * @return int
     */
    pub fn getIsWait(self) -> int {
        return self.is_wait_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A my sql alter server statement.
 */
schema MySqlAlterServerStatementDO {
    @primary oid_: int,
    name_oid_: int,
    user_oid_: int
}
impl MySqlAlterServerStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterServerStatementDO {
    	for (tmp in db.my_sql_alter_server_statement) {
            yield MySqlAlterServerStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_,
                user_oid_ : tmp.user_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the user oid of this element.
     * @return int
     */
    pub fn getUserOid(self) -> int {
        return self.user_oid_
    }
}
/**
 * @brief DO class: A my sql alter table alter column.
 */
schema MySqlAlterTableAlterColumnDO {
    @primary oid_: int,
    column_oid_: int,
    default_expr_oid_: int,
    is_drop_default_: int
}
impl MySqlAlterTableAlterColumnDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterTableAlterColumnDO {
    	for (tmp in db.my_sql_alter_table_alter_column) {
            yield MySqlAlterTableAlterColumnDO {
                oid_ : tmp.oid_,
                column_oid_ : tmp.column_oid_,
                default_expr_oid_ : tmp.default_expr_oid_,
                is_drop_default_ : tmp.is_drop_default_
            }
    	}
    }
    /**
     * @brief gets the column oid of this element.
     * @return int
     */
    pub fn getColumnOid(self) -> int {
        return self.column_oid_
    }
    /**
     * @brief gets the default expr oid of this element.
     * @return int
     */
    pub fn getDefaultExprOid(self) -> int {
        return self.default_expr_oid_
    }
    /**
     * @brief gets the is drop default of this element.
     * @return int
     */
    pub fn getIsDropDefault(self) -> int {
        return self.is_drop_default_
    }
}
/**
 * @brief DO class: A my sql alter table alter full text index.
 */
schema MySqlAlterTableAlterFullTextIndexDO {
    @primary oid_: int,
    analyzer_name_oid_: int,
    analyzer_type_: string,
    index_name_oid_: int
}
impl MySqlAlterTableAlterFullTextIndexDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterTableAlterFullTextIndexDO {
    	for (tmp in db.my_sql_alter_table_alter_full_text_index) {
            yield MySqlAlterTableAlterFullTextIndexDO {
                oid_ : tmp.oid_,
                analyzer_name_oid_ : tmp.analyzer_name_oid_,
                analyzer_type_ : tmp.analyzer_type_,
                index_name_oid_ : tmp.index_name_oid_
            }
    	}
    }
    /**
     * @brief gets the analyzer name oid of this element.
     * @return int
     */
    pub fn getAnalyzerNameOid(self) -> int {
        return self.analyzer_name_oid_
    }
    /**
     * @brief gets the analyzer type of this element.
     * @return string
     */
    pub fn getAnalyzerType(self) -> string {
        return self.analyzer_type_
    }
    /**
     * @brief gets the index name oid of this element.
     * @return int
     */
    pub fn getIndexNameOid(self) -> int {
        return self.index_name_oid_
    }
}
/**
 * @brief DO class: A my sql alter table change column.
 */
schema MySqlAlterTableChangeColumnDO {
    @primary oid_: int,
    after_column_oid_: int,
    column_name_oid_: int,
    first_column_oid_: int,
    is_first_: int,
    new_column_definition_oid_: int
}
impl MySqlAlterTableChangeColumnDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterTableChangeColumnDO {
    	for (tmp in db.my_sql_alter_table_change_column) {
            yield MySqlAlterTableChangeColumnDO {
                oid_ : tmp.oid_,
                after_column_oid_ : tmp.after_column_oid_,
                column_name_oid_ : tmp.column_name_oid_,
                first_column_oid_ : tmp.first_column_oid_,
                is_first_ : tmp.is_first_,
                new_column_definition_oid_ : tmp.new_column_definition_oid_
            }
    	}
    }
    /**
     * @brief gets the after column oid of this element.
     * @return int
     */
    pub fn getAfterColumnOid(self) -> int {
        return self.after_column_oid_
    }
    /**
     * @brief gets the column name oid of this element.
     * @return int
     */
    pub fn getColumnNameOid(self) -> int {
        return self.column_name_oid_
    }
    /**
     * @brief gets the first column oid of this element.
     * @return int
     */
    pub fn getFirstColumnOid(self) -> int {
        return self.first_column_oid_
    }
    /**
     * @brief gets the is first of this element.
     * @return int
     */
    pub fn getIsFirst(self) -> int {
        return self.is_first_
    }
    /**
     * @brief gets the new column definition oid of this element.
     * @return int
     */
    pub fn getNewColumnDefinitionOid(self) -> int {
        return self.new_column_definition_oid_
    }
}
/**
 * @brief DO class: A my sql alter table discard tablespace.
 */
schema MySqlAlterTableDiscardTablespaceDO {
    @primary oid_: int
}
impl MySqlAlterTableDiscardTablespaceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterTableDiscardTablespaceDO {
    	for (tmp in db.my_sql_alter_table_discard_tablespace) {
            yield MySqlAlterTableDiscardTablespaceDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql alter table force.
 */
schema MySqlAlterTableForceDO {
    @primary oid_: int
}
impl MySqlAlterTableForceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterTableForceDO {
    	for (tmp in db.my_sql_alter_table_force) {
            yield MySqlAlterTableForceDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql alter table import tablespace.
 */
schema MySqlAlterTableImportTablespaceDO {
    @primary oid_: int
}
impl MySqlAlterTableImportTablespaceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterTableImportTablespaceDO {
    	for (tmp in db.my_sql_alter_table_import_tablespace) {
            yield MySqlAlterTableImportTablespaceDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql alter table lock.
 */
schema MySqlAlterTableLockDO {
    @primary oid_: int,
    lock_type_oid_: int
}
impl MySqlAlterTableLockDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterTableLockDO {
    	for (tmp in db.my_sql_alter_table_lock) {
            yield MySqlAlterTableLockDO {
                oid_ : tmp.oid_,
                lock_type_oid_ : tmp.lock_type_oid_
            }
    	}
    }
    /**
     * @brief gets the lock type oid of this element.
     * @return int
     */
    pub fn getLockTypeOid(self) -> int {
        return self.lock_type_oid_
    }
}
/**
 * @brief DO class: A my sql alter table modify column.
 */
schema MySqlAlterTableModifyColumnDO {
    @primary oid_: int,
    after_column_oid_: int,
    first_column_oid_: int,
    is_first_: int,
    new_column_definition_oid_: int
}
impl MySqlAlterTableModifyColumnDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterTableModifyColumnDO {
    	for (tmp in db.my_sql_alter_table_modify_column) {
            yield MySqlAlterTableModifyColumnDO {
                oid_ : tmp.oid_,
                after_column_oid_ : tmp.after_column_oid_,
                first_column_oid_ : tmp.first_column_oid_,
                is_first_ : tmp.is_first_,
                new_column_definition_oid_ : tmp.new_column_definition_oid_
            }
    	}
    }
    /**
     * @brief gets the after column oid of this element.
     * @return int
     */
    pub fn getAfterColumnOid(self) -> int {
        return self.after_column_oid_
    }
    /**
     * @brief gets the first column oid of this element.
     * @return int
     */
    pub fn getFirstColumnOid(self) -> int {
        return self.first_column_oid_
    }
    /**
     * @brief gets the is first of this element.
     * @return int
     */
    pub fn getIsFirst(self) -> int {
        return self.is_first_
    }
    /**
     * @brief gets the new column definition oid of this element.
     * @return int
     */
    pub fn getNewColumnDefinitionOid(self) -> int {
        return self.new_column_definition_oid_
    }
}
/**
 * @brief DO class: A my sql alter table option.
 */
schema MySqlAlterTableOptionDO {
    @primary oid_: int,
    name_: string,
    value_: string
}
impl MySqlAlterTableOptionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterTableOptionDO {
    	for (tmp in db.my_sql_alter_table_option) {
            yield MySqlAlterTableOptionDO {
                oid_ : tmp.oid_,
                name_ : tmp.name_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the name of this element.
     * @return string
     */
    pub fn getName(self) -> string {
        return self.name_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A my sql alter table order by.
 */
schema MySqlAlterTableOrderByDO {
    @primary oid_: int
}
impl MySqlAlterTableOrderByDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterTableOrderByDO {
    	for (tmp in db.my_sql_alter_table_order_by) {
            yield MySqlAlterTableOrderByDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql alter table validation.
 */
schema MySqlAlterTableValidationDO {
    @primary oid_: int,
    is_with_validation_: int
}
impl MySqlAlterTableValidationDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterTableValidationDO {
    	for (tmp in db.my_sql_alter_table_validation) {
            yield MySqlAlterTableValidationDO {
                oid_ : tmp.oid_,
                is_with_validation_ : tmp.is_with_validation_
            }
    	}
    }
    /**
     * @brief gets the is with validation of this element.
     * @return int
     */
    pub fn getIsWithValidation(self) -> int {
        return self.is_with_validation_
    }
}
/**
 * @brief DO class: A my sql alter tablespace statement.
 */
schema MySqlAlterTablespaceStatementDO {
    @primary oid_: int,
    add_data_file_oid_: int,
    drop_data_file_oid_: int,
    engine_oid_: int,
    initial_size_oid_: int,
    is_wait_: int,
    name_oid_: int
}
impl MySqlAlterTablespaceStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterTablespaceStatementDO {
    	for (tmp in db.my_sql_alter_tablespace_statement) {
            yield MySqlAlterTablespaceStatementDO {
                oid_ : tmp.oid_,
                add_data_file_oid_ : tmp.add_data_file_oid_,
                drop_data_file_oid_ : tmp.drop_data_file_oid_,
                engine_oid_ : tmp.engine_oid_,
                initial_size_oid_ : tmp.initial_size_oid_,
                is_wait_ : tmp.is_wait_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the add data file oid of this element.
     * @return int
     */
    pub fn getAddDataFileOid(self) -> int {
        return self.add_data_file_oid_
    }
    /**
     * @brief gets the drop data file oid of this element.
     * @return int
     */
    pub fn getDropDataFileOid(self) -> int {
        return self.drop_data_file_oid_
    }
    /**
     * @brief gets the engine oid of this element.
     * @return int
     */
    pub fn getEngineOid(self) -> int {
        return self.engine_oid_
    }
    /**
     * @brief gets the initial size oid of this element.
     * @return int
     */
    pub fn getInitialSizeOid(self) -> int {
        return self.initial_size_oid_
    }
    /**
     * @brief gets the is wait of this element.
     * @return int
     */
    pub fn getIsWait(self) -> int {
        return self.is_wait_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A my sql alter user statement.
 */
schema MySqlAlterUserStatementDO {
    @primary oid_: int,
    alter_users_: string,
    is_if_exists_: int,
    password_option_: string
}
impl MySqlAlterUserStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAlterUserStatementDO {
    	for (tmp in db.my_sql_alter_user_statement) {
            yield MySqlAlterUserStatementDO {
                oid_ : tmp.oid_,
                alter_users_ : tmp.alter_users_,
                is_if_exists_ : tmp.is_if_exists_,
                password_option_ : tmp.password_option_
            }
    	}
    }
    /**
     * @brief gets the alter users of this element.
     * @return string
     */
    pub fn getAlterUsers(self) -> string {
        return self.alter_users_
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the password option of this element.
     * @return string
     */
    pub fn getPasswordOption(self) -> string {
        return self.password_option_
    }
}
/**
 * @brief DO class: A my sql analyze statement.
 */
schema MySqlAnalyzeStatementDO {
    @primary oid_: int,
    is_local_: int,
    is_no_write_to_binlog_: int
}
impl MySqlAnalyzeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlAnalyzeStatementDO {
    	for (tmp in db.my_sql_analyze_statement) {
            yield MySqlAnalyzeStatementDO {
                oid_ : tmp.oid_,
                is_local_ : tmp.is_local_,
                is_no_write_to_binlog_ : tmp.is_no_write_to_binlog_
            }
    	}
    }
    /**
     * @brief gets the is local of this element.
     * @return int
     */
    pub fn getIsLocal(self) -> int {
        return self.is_local_
    }
    /**
     * @brief gets the is no write to binlog of this element.
     * @return int
     */
    pub fn getIsNoWriteToBinlog(self) -> int {
        return self.is_no_write_to_binlog_
    }
}
/**
 * @brief DO class: A my sql binlog statement.
 */
schema MySqlBinlogStatementDO {
    @primary oid_: int,
    expr_oid_: int
}
impl MySqlBinlogStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlBinlogStatementDO {
    	for (tmp in db.my_sql_binlog_statement) {
            yield MySqlBinlogStatementDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
}
/**
 * @brief DO class: A my sql case statement.
 */
schema MySqlCaseStatementDO {
    @primary oid_: int,
    condition_oid_: int,
    else_item_: string,
    when_list_: string
}
impl MySqlCaseStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlCaseStatementDO {
    	for (tmp in db.my_sql_case_statement) {
            yield MySqlCaseStatementDO {
                oid_ : tmp.oid_,
                condition_oid_ : tmp.condition_oid_,
                else_item_ : tmp.else_item_,
                when_list_ : tmp.when_list_
            }
    	}
    }
    /**
     * @brief gets the condition oid of this element.
     * @return int
     */
    pub fn getConditionOid(self) -> int {
        return self.condition_oid_
    }
    /**
     * @brief gets the else item of this element.
     * @return string
     */
    pub fn getElseItem(self) -> string {
        return self.else_item_
    }
    /**
     * @brief gets the when list of this element.
     * @return string
     */
    pub fn getWhenList(self) -> string {
        return self.when_list_
    }
}
/**
 * @brief DO class: A my sql char expr.
 */
schema MySqlCharExprDO {
    @primary oid_: int,
    charset_: string,
    collate_: string,
    type_: string
}
impl MySqlCharExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlCharExprDO {
    	for (tmp in db.my_sql_char_expr) {
            yield MySqlCharExprDO {
                oid_ : tmp.oid_,
                charset_ : tmp.charset_,
                collate_ : tmp.collate_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the charset of this element.
     * @return string
     */
    pub fn getCharset(self) -> string {
        return self.charset_
    }
    /**
     * @brief gets the collate of this element.
     * @return string
     */
    pub fn getCollate(self) -> string {
        return self.collate_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A my sql check table statement.
 */
schema MySqlCheckTableStatementDO {
    @primary oid_: int
}
impl MySqlCheckTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlCheckTableStatementDO {
    	for (tmp in db.my_sql_check_table_statement) {
            yield MySqlCheckTableStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql checksum table statement.
 */
schema MySqlChecksumTableStatementDO {
    @primary oid_: int,
    is_extended_: int,
    is_quick_: int
}
impl MySqlChecksumTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlChecksumTableStatementDO {
    	for (tmp in db.my_sql_checksum_table_statement) {
            yield MySqlChecksumTableStatementDO {
                oid_ : tmp.oid_,
                is_extended_ : tmp.is_extended_,
                is_quick_ : tmp.is_quick_
            }
    	}
    }
    /**
     * @brief gets the is extended of this element.
     * @return int
     */
    pub fn getIsExtended(self) -> int {
        return self.is_extended_
    }
    /**
     * @brief gets the is quick of this element.
     * @return int
     */
    pub fn getIsQuick(self) -> int {
        return self.is_quick_
    }
}
/**
 * @brief DO class: A my sql clear plan cache statement.
 */
schema MySqlClearPlanCacheStatementDO {
    @primary oid_: int
}
impl MySqlClearPlanCacheStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlClearPlanCacheStatementDO {
    	for (tmp in db.my_sql_clear_plan_cache_statement) {
            yield MySqlClearPlanCacheStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql create add log file group statement.
 */
schema MySqlCreateAddLogFileGroupStatementDO {
    @primary oid_: int,
    add_undo_file_oid_: int,
    comment_oid_: int,
    engine_oid_: int,
    initial_size_oid_: int,
    is_wait_: int,
    name_oid_: int,
    node_group_oid_: int,
    redo_buffer_size_oid_: int,
    undo_buffer_size_oid_: int
}
impl MySqlCreateAddLogFileGroupStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlCreateAddLogFileGroupStatementDO {
    	for (tmp in db.my_sql_create_add_log_file_group_statement) {
            yield MySqlCreateAddLogFileGroupStatementDO {
                oid_ : tmp.oid_,
                add_undo_file_oid_ : tmp.add_undo_file_oid_,
                comment_oid_ : tmp.comment_oid_,
                engine_oid_ : tmp.engine_oid_,
                initial_size_oid_ : tmp.initial_size_oid_,
                is_wait_ : tmp.is_wait_,
                name_oid_ : tmp.name_oid_,
                node_group_oid_ : tmp.node_group_oid_,
                redo_buffer_size_oid_ : tmp.redo_buffer_size_oid_,
                undo_buffer_size_oid_ : tmp.undo_buffer_size_oid_
            }
    	}
    }
    /**
     * @brief gets the add undo file oid of this element.
     * @return int
     */
    pub fn getAddUndoFileOid(self) -> int {
        return self.add_undo_file_oid_
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the engine oid of this element.
     * @return int
     */
    pub fn getEngineOid(self) -> int {
        return self.engine_oid_
    }
    /**
     * @brief gets the initial size oid of this element.
     * @return int
     */
    pub fn getInitialSizeOid(self) -> int {
        return self.initial_size_oid_
    }
    /**
     * @brief gets the is wait of this element.
     * @return int
     */
    pub fn getIsWait(self) -> int {
        return self.is_wait_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the node group oid of this element.
     * @return int
     */
    pub fn getNodeGroupOid(self) -> int {
        return self.node_group_oid_
    }
    /**
     * @brief gets the redo buffer size oid of this element.
     * @return int
     */
    pub fn getRedoBufferSizeOid(self) -> int {
        return self.redo_buffer_size_oid_
    }
    /**
     * @brief gets the undo buffer size oid of this element.
     * @return int
     */
    pub fn getUndoBufferSizeOid(self) -> int {
        return self.undo_buffer_size_oid_
    }
}
/**
 * @brief DO class: A my sql create event statement.
 */
schema MySqlCreateEventStatementDO {
    @primary oid_: int,
    comment_oid_: int,
    definer_oid_: int,
    enable_: int,
    event_body_oid_: int,
    is_disable_on_slave_: int,
    is_if_not_exists_: int,
    is_on_completion_preserve_: int,
    name_oid_: int,
    rename_to_oid_: int,
    schedule_oid_: int
}
impl MySqlCreateEventStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlCreateEventStatementDO {
    	for (tmp in db.my_sql_create_event_statement) {
            yield MySqlCreateEventStatementDO {
                oid_ : tmp.oid_,
                comment_oid_ : tmp.comment_oid_,
                definer_oid_ : tmp.definer_oid_,
                enable_ : tmp.enable_,
                event_body_oid_ : tmp.event_body_oid_,
                is_disable_on_slave_ : tmp.is_disable_on_slave_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                is_on_completion_preserve_ : tmp.is_on_completion_preserve_,
                name_oid_ : tmp.name_oid_,
                rename_to_oid_ : tmp.rename_to_oid_,
                schedule_oid_ : tmp.schedule_oid_
            }
    	}
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the definer oid of this element.
     * @return int
     */
    pub fn getDefinerOid(self) -> int {
        return self.definer_oid_
    }
    /**
     * @brief gets the enable of this element.
     * @return int
     */
    pub fn getEnable(self) -> int {
        return self.enable_
    }
    /**
     * @brief gets the event body oid of this element.
     * @return int
     */
    pub fn getEventBodyOid(self) -> int {
        return self.event_body_oid_
    }
    /**
     * @brief gets the is disable on slave of this element.
     * @return int
     */
    pub fn getIsDisableOnSlave(self) -> int {
        return self.is_disable_on_slave_
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the is on completion preserve of this element.
     * @return int
     */
    pub fn getIsOnCompletionPreserve(self) -> int {
        return self.is_on_completion_preserve_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the rename to oid of this element.
     * @return int
     */
    pub fn getRenameToOid(self) -> int {
        return self.rename_to_oid_
    }
    /**
     * @brief gets the schedule oid of this element.
     * @return int
     */
    pub fn getScheduleOid(self) -> int {
        return self.schedule_oid_
    }
}
/**
 * @brief DO class: A my sql create external catalog statement.
 */
schema MySqlCreateExternalCatalogStatementDO {
    @primary oid_: int,
    comment_oid_: int,
    is_if_not_exists_: int,
    name_oid_: int,
    properties_: string
}
impl MySqlCreateExternalCatalogStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlCreateExternalCatalogStatementDO {
    	for (tmp in db.my_sql_create_external_catalog_statement) {
            yield MySqlCreateExternalCatalogStatementDO {
                oid_ : tmp.oid_,
                comment_oid_ : tmp.comment_oid_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                name_oid_ : tmp.name_oid_,
                properties_ : tmp.properties_
            }
    	}
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the properties of this element.
     * @return string
     */
    pub fn getProperties(self) -> string {
        return self.properties_
    }
}
/**
 * @brief DO class: A my sql create server statement.
 */
schema MySqlCreateServerStatementDO {
    @primary oid_: int,
    database_oid_: int,
    foreign_data_wrapper_oid_: int,
    host_oid_: int,
    name_oid_: int,
    owner_oid_: int,
    password_oid_: int,
    port_oid_: int,
    socket_oid_: int,
    user_oid_: int
}
impl MySqlCreateServerStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlCreateServerStatementDO {
    	for (tmp in db.my_sql_create_server_statement) {
            yield MySqlCreateServerStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_,
                foreign_data_wrapper_oid_ : tmp.foreign_data_wrapper_oid_,
                host_oid_ : tmp.host_oid_,
                name_oid_ : tmp.name_oid_,
                owner_oid_ : tmp.owner_oid_,
                password_oid_ : tmp.password_oid_,
                port_oid_ : tmp.port_oid_,
                socket_oid_ : tmp.socket_oid_,
                user_oid_ : tmp.user_oid_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
    /**
     * @brief gets the foreign data wrapper oid of this element.
     * @return int
     */
    pub fn getForeignDataWrapperOid(self) -> int {
        return self.foreign_data_wrapper_oid_
    }
    /**
     * @brief gets the host oid of this element.
     * @return int
     */
    pub fn getHostOid(self) -> int {
        return self.host_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the owner oid of this element.
     * @return int
     */
    pub fn getOwnerOid(self) -> int {
        return self.owner_oid_
    }
    /**
     * @brief gets the password oid of this element.
     * @return int
     */
    pub fn getPasswordOid(self) -> int {
        return self.password_oid_
    }
    /**
     * @brief gets the port oid of this element.
     * @return int
     */
    pub fn getPortOid(self) -> int {
        return self.port_oid_
    }
    /**
     * @brief gets the socket oid of this element.
     * @return int
     */
    pub fn getSocketOid(self) -> int {
        return self.socket_oid_
    }
    /**
     * @brief gets the user oid of this element.
     * @return int
     */
    pub fn getUserOid(self) -> int {
        return self.user_oid_
    }
}
/**
 * @brief DO class: A my sql create table space statement.
 */
schema MySqlCreateTableSpaceStatementDO {
    @primary oid_: int,
    add_data_file_oid_: int,
    auto_extent_size_oid_: int,
    comment_oid_: int,
    engine_oid_: int,
    extent_size_oid_: int,
    file_block_size_oid_: int,
    initial_size_oid_: int,
    is_wait_: int,
    log_file_group_oid_: int,
    max_size_oid_: int,
    name_oid_: int,
    node_group_oid_: int
}
impl MySqlCreateTableSpaceStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlCreateTableSpaceStatementDO {
    	for (tmp in db.my_sql_create_table_space_statement) {
            yield MySqlCreateTableSpaceStatementDO {
                oid_ : tmp.oid_,
                add_data_file_oid_ : tmp.add_data_file_oid_,
                auto_extent_size_oid_ : tmp.auto_extent_size_oid_,
                comment_oid_ : tmp.comment_oid_,
                engine_oid_ : tmp.engine_oid_,
                extent_size_oid_ : tmp.extent_size_oid_,
                file_block_size_oid_ : tmp.file_block_size_oid_,
                initial_size_oid_ : tmp.initial_size_oid_,
                is_wait_ : tmp.is_wait_,
                log_file_group_oid_ : tmp.log_file_group_oid_,
                max_size_oid_ : tmp.max_size_oid_,
                name_oid_ : tmp.name_oid_,
                node_group_oid_ : tmp.node_group_oid_
            }
    	}
    }
    /**
     * @brief gets the add data file oid of this element.
     * @return int
     */
    pub fn getAddDataFileOid(self) -> int {
        return self.add_data_file_oid_
    }
    /**
     * @brief gets the auto extent size oid of this element.
     * @return int
     */
    pub fn getAutoExtentSizeOid(self) -> int {
        return self.auto_extent_size_oid_
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the engine oid of this element.
     * @return int
     */
    pub fn getEngineOid(self) -> int {
        return self.engine_oid_
    }
    /**
     * @brief gets the extent size oid of this element.
     * @return int
     */
    pub fn getExtentSizeOid(self) -> int {
        return self.extent_size_oid_
    }
    /**
     * @brief gets the file block size oid of this element.
     * @return int
     */
    pub fn getFileBlockSizeOid(self) -> int {
        return self.file_block_size_oid_
    }
    /**
     * @brief gets the initial size oid of this element.
     * @return int
     */
    pub fn getInitialSizeOid(self) -> int {
        return self.initial_size_oid_
    }
    /**
     * @brief gets the is wait of this element.
     * @return int
     */
    pub fn getIsWait(self) -> int {
        return self.is_wait_
    }
    /**
     * @brief gets the log file group oid of this element.
     * @return int
     */
    pub fn getLogFileGroupOid(self) -> int {
        return self.log_file_group_oid_
    }
    /**
     * @brief gets the max size oid of this element.
     * @return int
     */
    pub fn getMaxSizeOid(self) -> int {
        return self.max_size_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the node group oid of this element.
     * @return int
     */
    pub fn getNodeGroupOid(self) -> int {
        return self.node_group_oid_
    }
}
/**
 * @brief DO class: A my sql create table statement.
 */
schema MySqlCreateTableStatementDO {
    @primary oid_: int,
    archive_by_oid_: int,
    db_partition_by_oid_: int,
    db_partitions_oid_: int,
    dbpartitions_oid_: int,
    distribute_by_type_oid_: int,
    engine_oid_: int,
    ext_partition_oid_: int,
    is_broad_cast_: int,
    stored_by_oid_: int,
    table_group_oid_: int,
    table_partition_by_oid_: int,
    table_partitions_oid_: int,
    tbpartitions_oid_: int,
    with_: string,
    with_data_: int
}
impl MySqlCreateTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlCreateTableStatementDO {
    	for (tmp in db.my_sql_create_table_statement) {
            yield MySqlCreateTableStatementDO {
                oid_ : tmp.oid_,
                archive_by_oid_ : tmp.archive_by_oid_,
                db_partition_by_oid_ : tmp.db_partition_by_oid_,
                db_partitions_oid_ : tmp.db_partitions_oid_,
                dbpartitions_oid_ : tmp.dbpartitions_oid_,
                distribute_by_type_oid_ : tmp.distribute_by_type_oid_,
                engine_oid_ : tmp.engine_oid_,
                ext_partition_oid_ : tmp.ext_partition_oid_,
                is_broad_cast_ : tmp.is_broad_cast_,
                stored_by_oid_ : tmp.stored_by_oid_,
                table_group_oid_ : tmp.table_group_oid_,
                table_partition_by_oid_ : tmp.table_partition_by_oid_,
                table_partitions_oid_ : tmp.table_partitions_oid_,
                tbpartitions_oid_ : tmp.tbpartitions_oid_,
                with_ : tmp.with_,
                with_data_ : tmp.with_data_
            }
    	}
    }
    /**
     * @brief gets the archive by oid of this element.
     * @return int
     */
    pub fn getArchiveByOid(self) -> int {
        return self.archive_by_oid_
    }
    /**
     * @brief gets the db partition by oid of this element.
     * @return int
     */
    pub fn getDbPartitionByOid(self) -> int {
        return self.db_partition_by_oid_
    }
    /**
     * @brief gets the db partitions oid of this element.
     * @return int
     */
    pub fn getDbPartitionsOid(self) -> int {
        return self.db_partitions_oid_
    }
    /**
     * @brief gets the dbpartitions oid of this element.
     * @return int
     */
    pub fn getDbpartitionsOid(self) -> int {
        return self.dbpartitions_oid_
    }
    /**
     * @brief gets the distribute by type oid of this element.
     * @return int
     */
    pub fn getDistributeByTypeOid(self) -> int {
        return self.distribute_by_type_oid_
    }
    /**
     * @brief gets the engine oid of this element.
     * @return int
     */
    pub fn getEngineOid(self) -> int {
        return self.engine_oid_
    }
    /**
     * @brief gets the ext partition oid of this element.
     * @return int
     */
    pub fn getExtPartitionOid(self) -> int {
        return self.ext_partition_oid_
    }
    /**
     * @brief gets the is broad cast of this element.
     * @return int
     */
    pub fn getIsBroadCast(self) -> int {
        return self.is_broad_cast_
    }
    /**
     * @brief gets the stored by oid of this element.
     * @return int
     */
    pub fn getStoredByOid(self) -> int {
        return self.stored_by_oid_
    }
    /**
     * @brief gets the table group oid of this element.
     * @return int
     */
    pub fn getTableGroupOid(self) -> int {
        return self.table_group_oid_
    }
    /**
     * @brief gets the table partition by oid of this element.
     * @return int
     */
    pub fn getTablePartitionByOid(self) -> int {
        return self.table_partition_by_oid_
    }
    /**
     * @brief gets the table partitions oid of this element.
     * @return int
     */
    pub fn getTablePartitionsOid(self) -> int {
        return self.table_partitions_oid_
    }
    /**
     * @brief gets the tbpartitions oid of this element.
     * @return int
     */
    pub fn getTbpartitionsOid(self) -> int {
        return self.tbpartitions_oid_
    }
    /**
     * @brief gets the with of this element.
     * @return string
     */
    pub fn getWith(self) -> string {
        return self.with_
    }
    /**
     * @brief gets the with data of this element.
     * @return int
     */
    pub fn getWithData(self) -> int {
        return self.with_data_
    }
}
/**
 * @brief DO class: A my sql create user statement.
 */
schema MySqlCreateUserStatementDO {
    @primary oid_: int,
    is_if_not_exists_: int,
    users_: string
}
impl MySqlCreateUserStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlCreateUserStatementDO {
    	for (tmp in db.my_sql_create_user_statement) {
            yield MySqlCreateUserStatementDO {
                oid_ : tmp.oid_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                users_ : tmp.users_
            }
    	}
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the users of this element.
     * @return string
     */
    pub fn getUsers(self) -> string {
        return self.users_
    }
}
/**
 * @brief DO class: A my sql cursor declare statement.
 */
schema MySqlCursorDeclareStatementDO {
    @primary oid_: int,
    cursor_name_oid_: int,
    select_oid_: int
}
impl MySqlCursorDeclareStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlCursorDeclareStatementDO {
    	for (tmp in db.my_sql_cursor_declare_statement) {
            yield MySqlCursorDeclareStatementDO {
                oid_ : tmp.oid_,
                cursor_name_oid_ : tmp.cursor_name_oid_,
                select_oid_ : tmp.select_oid_
            }
    	}
    }
    /**
     * @brief gets the cursor name oid of this element.
     * @return int
     */
    pub fn getCursorNameOid(self) -> int {
        return self.cursor_name_oid_
    }
    /**
     * @brief gets the select oid of this element.
     * @return int
     */
    pub fn getSelectOid(self) -> int {
        return self.select_oid_
    }
}
/**
 * @brief DO class: A my sql declare condition statement.
 */
schema MySqlDeclareConditionStatementDO {
    @primary oid_: int,
    condition_name_: string,
    condition_value_: string
}
impl MySqlDeclareConditionStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlDeclareConditionStatementDO {
    	for (tmp in db.my_sql_declare_condition_statement) {
            yield MySqlDeclareConditionStatementDO {
                oid_ : tmp.oid_,
                condition_name_ : tmp.condition_name_,
                condition_value_ : tmp.condition_value_
            }
    	}
    }
    /**
     * @brief gets the condition name of this element.
     * @return string
     */
    pub fn getConditionName(self) -> string {
        return self.condition_name_
    }
    /**
     * @brief gets the condition value of this element.
     * @return string
     */
    pub fn getConditionValue(self) -> string {
        return self.condition_value_
    }
}
/**
 * @brief DO class: A my sql declare handler statement.
 */
schema MySqlDeclareHandlerStatementDO {
    @primary oid_: int,
    condition_values_: string,
    handle_type_: string,
    sp_statement_oid_: int
}
impl MySqlDeclareHandlerStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlDeclareHandlerStatementDO {
    	for (tmp in db.my_sql_declare_handler_statement) {
            yield MySqlDeclareHandlerStatementDO {
                oid_ : tmp.oid_,
                condition_values_ : tmp.condition_values_,
                handle_type_ : tmp.handle_type_,
                sp_statement_oid_ : tmp.sp_statement_oid_
            }
    	}
    }
    /**
     * @brief gets the condition values of this element.
     * @return string
     */
    pub fn getConditionValues(self) -> string {
        return self.condition_values_
    }
    /**
     * @brief gets the handle type of this element.
     * @return string
     */
    pub fn getHandleType(self) -> string {
        return self.handle_type_
    }
    /**
     * @brief gets the sp statement oid of this element.
     * @return int
     */
    pub fn getSpStatementOid(self) -> int {
        return self.sp_statement_oid_
    }
}
/**
 * @brief DO class: A my sql declare statement.
 */
schema MySqlDeclareStatementDO {
    @primary oid_: int
}
impl MySqlDeclareStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlDeclareStatementDO {
    	for (tmp in db.my_sql_declare_statement) {
            yield MySqlDeclareStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql delete statement.
 */
schema MySqlDeleteStatementDO {
    @primary oid_: int,
    force_partition_oid_: int,
    hints_size_: int,
    is_force_all_partitions_: int,
    is_fulltext_dictionary_: int,
    is_ignore_: int,
    is_low_priority_: int,
    is_quick_: int,
    limit_oid_: int,
    order_by_oid_: int
}
impl MySqlDeleteStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlDeleteStatementDO {
    	for (tmp in db.my_sql_delete_statement) {
            yield MySqlDeleteStatementDO {
                oid_ : tmp.oid_,
                force_partition_oid_ : tmp.force_partition_oid_,
                hints_size_ : tmp.hints_size_,
                is_force_all_partitions_ : tmp.is_force_all_partitions_,
                is_fulltext_dictionary_ : tmp.is_fulltext_dictionary_,
                is_ignore_ : tmp.is_ignore_,
                is_low_priority_ : tmp.is_low_priority_,
                is_quick_ : tmp.is_quick_,
                limit_oid_ : tmp.limit_oid_,
                order_by_oid_ : tmp.order_by_oid_
            }
    	}
    }
    /**
     * @brief gets the force partition oid of this element.
     * @return int
     */
    pub fn getForcePartitionOid(self) -> int {
        return self.force_partition_oid_
    }
    /**
     * @brief gets the hints size of this element.
     * @return int
     */
    pub fn getHintsSize(self) -> int {
        return self.hints_size_
    }
    /**
     * @brief gets the is force all partitions of this element.
     * @return int
     */
    pub fn getIsForceAllPartitions(self) -> int {
        return self.is_force_all_partitions_
    }
    /**
     * @brief gets the is fulltext dictionary of this element.
     * @return int
     */
    pub fn getIsFulltextDictionary(self) -> int {
        return self.is_fulltext_dictionary_
    }
    /**
     * @brief gets the is ignore of this element.
     * @return int
     */
    pub fn getIsIgnore(self) -> int {
        return self.is_ignore_
    }
    /**
     * @brief gets the is low priority of this element.
     * @return int
     */
    pub fn getIsLowPriority(self) -> int {
        return self.is_low_priority_
    }
    /**
     * @brief gets the is quick of this element.
     * @return int
     */
    pub fn getIsQuick(self) -> int {
        return self.is_quick_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
}
/**
 * @brief DO class: A my sql disabled plan cache statement.
 */
schema MySqlDisabledPlanCacheStatementDO {
    @primary oid_: int
}
impl MySqlDisabledPlanCacheStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlDisabledPlanCacheStatementDO {
    	for (tmp in db.my_sql_disabled_plan_cache_statement) {
            yield MySqlDisabledPlanCacheStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql event schedule.
 */
schema MySqlEventScheduleDO {
    @primary oid_: int,
    at_oid_: int,
    ends_oid_: int,
    every_oid_: int,
    starts_oid_: int
}
impl MySqlEventScheduleDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlEventScheduleDO {
    	for (tmp in db.my_sql_event_schedule) {
            yield MySqlEventScheduleDO {
                oid_ : tmp.oid_,
                at_oid_ : tmp.at_oid_,
                ends_oid_ : tmp.ends_oid_,
                every_oid_ : tmp.every_oid_,
                starts_oid_ : tmp.starts_oid_
            }
    	}
    }
    /**
     * @brief gets the at oid of this element.
     * @return int
     */
    pub fn getAtOid(self) -> int {
        return self.at_oid_
    }
    /**
     * @brief gets the ends oid of this element.
     * @return int
     */
    pub fn getEndsOid(self) -> int {
        return self.ends_oid_
    }
    /**
     * @brief gets the every oid of this element.
     * @return int
     */
    pub fn getEveryOid(self) -> int {
        return self.every_oid_
    }
    /**
     * @brief gets the starts oid of this element.
     * @return int
     */
    pub fn getStartsOid(self) -> int {
        return self.starts_oid_
    }
}
/**
 * @brief DO class: A my sql execute for ads statement.
 */
schema MySqlExecuteForAdsStatementDO {
    @primary oid_: int,
    action_oid_: int,
    role_oid_: int,
    status_oid_: int,
    target_id_oid_: int
}
impl MySqlExecuteForAdsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlExecuteForAdsStatementDO {
    	for (tmp in db.my_sql_execute_for_ads_statement) {
            yield MySqlExecuteForAdsStatementDO {
                oid_ : tmp.oid_,
                action_oid_ : tmp.action_oid_,
                role_oid_ : tmp.role_oid_,
                status_oid_ : tmp.status_oid_,
                target_id_oid_ : tmp.target_id_oid_
            }
    	}
    }
    /**
     * @brief gets the action oid of this element.
     * @return int
     */
    pub fn getActionOid(self) -> int {
        return self.action_oid_
    }
    /**
     * @brief gets the role oid of this element.
     * @return int
     */
    pub fn getRoleOid(self) -> int {
        return self.role_oid_
    }
    /**
     * @brief gets the status oid of this element.
     * @return int
     */
    pub fn getStatusOid(self) -> int {
        return self.status_oid_
    }
    /**
     * @brief gets the target id oid of this element.
     * @return int
     */
    pub fn getTargetIdOid(self) -> int {
        return self.target_id_oid_
    }
}
/**
 * @brief DO class: A my sql execute statement.
 */
schema MySqlExecuteStatementDO {
    @primary oid_: int,
    statement_name_oid_: int
}
impl MySqlExecuteStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlExecuteStatementDO {
    	for (tmp in db.my_sql_execute_statement) {
            yield MySqlExecuteStatementDO {
                oid_ : tmp.oid_,
                statement_name_oid_ : tmp.statement_name_oid_
            }
    	}
    }
    /**
     * @brief gets the statement name oid of this element.
     * @return int
     */
    pub fn getStatementNameOid(self) -> int {
        return self.statement_name_oid_
    }
}
/**
 * @brief DO class: A my sql explain plan cache statement.
 */
schema MySqlExplainPlanCacheStatementDO {
    @primary oid_: int
}
impl MySqlExplainPlanCacheStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlExplainPlanCacheStatementDO {
    	for (tmp in db.my_sql_explain_plan_cache_statement) {
            yield MySqlExplainPlanCacheStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql explain statement.
 */
schema MySqlExplainStatementDO {
    @primary oid_: int,
    column_name_oid_: int,
    connection_id_oid_: int,
    is_describe_: int,
    is_distribute_info_: int,
    table_name_oid_: int,
    wild_oid_: int
}
impl MySqlExplainStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlExplainStatementDO {
    	for (tmp in db.my_sql_explain_statement) {
            yield MySqlExplainStatementDO {
                oid_ : tmp.oid_,
                column_name_oid_ : tmp.column_name_oid_,
                connection_id_oid_ : tmp.connection_id_oid_,
                is_describe_ : tmp.is_describe_,
                is_distribute_info_ : tmp.is_distribute_info_,
                table_name_oid_ : tmp.table_name_oid_,
                wild_oid_ : tmp.wild_oid_
            }
    	}
    }
    /**
     * @brief gets the column name oid of this element.
     * @return int
     */
    pub fn getColumnNameOid(self) -> int {
        return self.column_name_oid_
    }
    /**
     * @brief gets the connection id oid of this element.
     * @return int
     */
    pub fn getConnectionIdOid(self) -> int {
        return self.connection_id_oid_
    }
    /**
     * @brief gets the is describe of this element.
     * @return int
     */
    pub fn getIsDescribe(self) -> int {
        return self.is_describe_
    }
    /**
     * @brief gets the is distribute info of this element.
     * @return int
     */
    pub fn getIsDistributeInfo(self) -> int {
        return self.is_distribute_info_
    }
    /**
     * @brief gets the table name oid of this element.
     * @return int
     */
    pub fn getTableNameOid(self) -> int {
        return self.table_name_oid_
    }
    /**
     * @brief gets the wild oid of this element.
     * @return int
     */
    pub fn getWildOid(self) -> int {
        return self.wild_oid_
    }
}
/**
 * @brief DO class: A my sql expr impl.
 */
schema MySqlExprImplDO {
    @primary oid_: int,
    hint_oid_: int
}
impl MySqlExprImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlExprImplDO {
    	for (tmp in db.my_sql_expr_impl) {
            yield MySqlExprImplDO {
                oid_ : tmp.oid_,
                hint_oid_ : tmp.hint_oid_
            }
    	}
    }
    /**
     * @brief gets the hint oid of this element.
     * @return int
     */
    pub fn getHintOid(self) -> int {
        return self.hint_oid_
    }
}
/**
 * @brief DO class: A my sql ext partition.
 */
schema MySqlExtPartitionDO {
    @primary oid_: int,
    items_: string
}
impl MySqlExtPartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlExtPartitionDO {
    	for (tmp in db.my_sql_ext_partition) {
            yield MySqlExtPartitionDO {
                oid_ : tmp.oid_,
                items_ : tmp.items_
            }
    	}
    }
    /**
     * @brief gets the items of this element.
     * @return string
     */
    pub fn getItems(self) -> string {
        return self.items_
    }
}
/**
 * @brief DO class: A my sql flashback statement.
 */
schema MySqlFlashbackStatementDO {
    @primary oid_: int,
    name_oid_: int,
    rename_to_oid_: int
}
impl MySqlFlashbackStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlFlashbackStatementDO {
    	for (tmp in db.my_sql_flashback_statement) {
            yield MySqlFlashbackStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_,
                rename_to_oid_ : tmp.rename_to_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the rename to oid of this element.
     * @return int
     */
    pub fn getRenameToOid(self) -> int {
        return self.rename_to_oid_
    }
}
/**
 * @brief DO class: A my sql flush statement.
 */
schema MySqlFlushStatementDO {
    @primary oid_: int,
    is_binary_logs_: int,
    is_des_key_file_: int,
    is_engine_logs_: int,
    is_error_logs_: int,
    is_for_export_: int,
    is_general_logs_: int,
    is_hots_: int,
    is_local_: int,
    is_logs_: int,
    is_master_: int,
    is_no_write_to_binlog_: int,
    is_optimizer_costs_: int,
    is_privileges_: int,
    is_query_cache_: int,
    is_relay_logs_: int,
    is_slow_logs_: int,
    is_status_: int,
    is_table_option_: int,
    is_user_resources_: int,
    is_with_read_lock_: int,
    relay_logs_for_channel_oid_: int,
    version_oid_: int
}
impl MySqlFlushStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlFlushStatementDO {
    	for (tmp in db.my_sql_flush_statement) {
            yield MySqlFlushStatementDO {
                oid_ : tmp.oid_,
                is_binary_logs_ : tmp.is_binary_logs_,
                is_des_key_file_ : tmp.is_des_key_file_,
                is_engine_logs_ : tmp.is_engine_logs_,
                is_error_logs_ : tmp.is_error_logs_,
                is_for_export_ : tmp.is_for_export_,
                is_general_logs_ : tmp.is_general_logs_,
                is_hots_ : tmp.is_hots_,
                is_local_ : tmp.is_local_,
                is_logs_ : tmp.is_logs_,
                is_master_ : tmp.is_master_,
                is_no_write_to_binlog_ : tmp.is_no_write_to_binlog_,
                is_optimizer_costs_ : tmp.is_optimizer_costs_,
                is_privileges_ : tmp.is_privileges_,
                is_query_cache_ : tmp.is_query_cache_,
                is_relay_logs_ : tmp.is_relay_logs_,
                is_slow_logs_ : tmp.is_slow_logs_,
                is_status_ : tmp.is_status_,
                is_table_option_ : tmp.is_table_option_,
                is_user_resources_ : tmp.is_user_resources_,
                is_with_read_lock_ : tmp.is_with_read_lock_,
                relay_logs_for_channel_oid_ : tmp.relay_logs_for_channel_oid_,
                version_oid_ : tmp.version_oid_
            }
    	}
    }
    /**
     * @brief gets the is binary logs of this element.
     * @return int
     */
    pub fn getIsBinaryLogs(self) -> int {
        return self.is_binary_logs_
    }
    /**
     * @brief gets the is des key file of this element.
     * @return int
     */
    pub fn getIsDesKeyFile(self) -> int {
        return self.is_des_key_file_
    }
    /**
     * @brief gets the is engine logs of this element.
     * @return int
     */
    pub fn getIsEngineLogs(self) -> int {
        return self.is_engine_logs_
    }
    /**
     * @brief gets the is error logs of this element.
     * @return int
     */
    pub fn getIsErrorLogs(self) -> int {
        return self.is_error_logs_
    }
    /**
     * @brief gets the is for export of this element.
     * @return int
     */
    pub fn getIsForExport(self) -> int {
        return self.is_for_export_
    }
    /**
     * @brief gets the is general logs of this element.
     * @return int
     */
    pub fn getIsGeneralLogs(self) -> int {
        return self.is_general_logs_
    }
    /**
     * @brief gets the is hots of this element.
     * @return int
     */
    pub fn getIsHots(self) -> int {
        return self.is_hots_
    }
    /**
     * @brief gets the is local of this element.
     * @return int
     */
    pub fn getIsLocal(self) -> int {
        return self.is_local_
    }
    /**
     * @brief gets the is logs of this element.
     * @return int
     */
    pub fn getIsLogs(self) -> int {
        return self.is_logs_
    }
    /**
     * @brief gets the is master of this element.
     * @return int
     */
    pub fn getIsMaster(self) -> int {
        return self.is_master_
    }
    /**
     * @brief gets the is no write to binlog of this element.
     * @return int
     */
    pub fn getIsNoWriteToBinlog(self) -> int {
        return self.is_no_write_to_binlog_
    }
    /**
     * @brief gets the is optimizer costs of this element.
     * @return int
     */
    pub fn getIsOptimizerCosts(self) -> int {
        return self.is_optimizer_costs_
    }
    /**
     * @brief gets the is privileges of this element.
     * @return int
     */
    pub fn getIsPrivileges(self) -> int {
        return self.is_privileges_
    }
    /**
     * @brief gets the is query cache of this element.
     * @return int
     */
    pub fn getIsQueryCache(self) -> int {
        return self.is_query_cache_
    }
    /**
     * @brief gets the is relay logs of this element.
     * @return int
     */
    pub fn getIsRelayLogs(self) -> int {
        return self.is_relay_logs_
    }
    /**
     * @brief gets the is slow logs of this element.
     * @return int
     */
    pub fn getIsSlowLogs(self) -> int {
        return self.is_slow_logs_
    }
    /**
     * @brief gets the is status of this element.
     * @return int
     */
    pub fn getIsStatus(self) -> int {
        return self.is_status_
    }
    /**
     * @brief gets the is table option of this element.
     * @return int
     */
    pub fn getIsTableOption(self) -> int {
        return self.is_table_option_
    }
    /**
     * @brief gets the is user resources of this element.
     * @return int
     */
    pub fn getIsUserResources(self) -> int {
        return self.is_user_resources_
    }
    /**
     * @brief gets the is with read lock of this element.
     * @return int
     */
    pub fn getIsWithReadLock(self) -> int {
        return self.is_with_read_lock_
    }
    /**
     * @brief gets the relay logs for channel oid of this element.
     * @return int
     */
    pub fn getRelayLogsForChannelOid(self) -> int {
        return self.relay_logs_for_channel_oid_
    }
    /**
     * @brief gets the version oid of this element.
     * @return int
     */
    pub fn getVersionOid(self) -> int {
        return self.version_oid_
    }
}
/**
 * @brief DO class: A my sql force index hint.
 */
schema MySqlForceIndexHintDO {
    @primary oid_: int
}
impl MySqlForceIndexHintDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlForceIndexHintDO {
    	for (tmp in db.my_sql_force_index_hint) {
            yield MySqlForceIndexHintDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql help statement.
 */
schema MySqlHelpStatementDO {
    @primary oid_: int,
    content_oid_: int
}
impl MySqlHelpStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlHelpStatementDO {
    	for (tmp in db.my_sql_help_statement) {
            yield MySqlHelpStatementDO {
                oid_ : tmp.oid_,
                content_oid_ : tmp.content_oid_
            }
    	}
    }
    /**
     * @brief gets the content oid of this element.
     * @return int
     */
    pub fn getContentOid(self) -> int {
        return self.content_oid_
    }
}
/**
 * @brief DO class: A my sql hint statement.
 */
schema MySqlHintStatementDO {
    @primary oid_: int,
    hint_version_: int
}
impl MySqlHintStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlHintStatementDO {
    	for (tmp in db.my_sql_hint_statement) {
            yield MySqlHintStatementDO {
                oid_ : tmp.oid_,
                hint_version_ : tmp.hint_version_
            }
    	}
    }
    /**
     * @brief gets the hint version of this element.
     * @return int
     */
    pub fn getHintVersion(self) -> int {
        return self.hint_version_
    }
}
/**
 * @brief DO class: A my sql ignore index hint.
 */
schema MySqlIgnoreIndexHintDO {
    @primary oid_: int
}
impl MySqlIgnoreIndexHintDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlIgnoreIndexHintDO {
    	for (tmp in db.my_sql_ignore_index_hint) {
            yield MySqlIgnoreIndexHintDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql index hint impl.
 */
schema MySqlIndexHintImplDO {
    @primary oid_: int,
    option_: string
}
impl MySqlIndexHintImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlIndexHintImplDO {
    	for (tmp in db.my_sql_index_hint_impl) {
            yield MySqlIndexHintImplDO {
                oid_ : tmp.oid_,
                option_ : tmp.option_
            }
    	}
    }
    /**
     * @brief gets the option of this element.
     * @return string
     */
    pub fn getOption(self) -> string {
        return self.option_
    }
}
/**
 * @brief DO class: A my sql insert statement.
 */
schema MySqlInsertStatementDO {
    @primary oid_: int,
    hints_size_: int,
    is_delayed_: int,
    is_fulltext_dictionary_: int,
    is_high_priority_: int,
    is_if_not_exists_: int,
    is_ignore_: int,
    is_low_priority_: int,
    is_overwrite_: int,
    is_rollback_on_fail_: int
}
impl MySqlInsertStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlInsertStatementDO {
    	for (tmp in db.my_sql_insert_statement) {
            yield MySqlInsertStatementDO {
                oid_ : tmp.oid_,
                hints_size_ : tmp.hints_size_,
                is_delayed_ : tmp.is_delayed_,
                is_fulltext_dictionary_ : tmp.is_fulltext_dictionary_,
                is_high_priority_ : tmp.is_high_priority_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                is_ignore_ : tmp.is_ignore_,
                is_low_priority_ : tmp.is_low_priority_,
                is_overwrite_ : tmp.is_overwrite_,
                is_rollback_on_fail_ : tmp.is_rollback_on_fail_
            }
    	}
    }
    /**
     * @brief gets the hints size of this element.
     * @return int
     */
    pub fn getHintsSize(self) -> int {
        return self.hints_size_
    }
    /**
     * @brief gets the is delayed of this element.
     * @return int
     */
    pub fn getIsDelayed(self) -> int {
        return self.is_delayed_
    }
    /**
     * @brief gets the is fulltext dictionary of this element.
     * @return int
     */
    pub fn getIsFulltextDictionary(self) -> int {
        return self.is_fulltext_dictionary_
    }
    /**
     * @brief gets the is high priority of this element.
     * @return int
     */
    pub fn getIsHighPriority(self) -> int {
        return self.is_high_priority_
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the is ignore of this element.
     * @return int
     */
    pub fn getIsIgnore(self) -> int {
        return self.is_ignore_
    }
    /**
     * @brief gets the is low priority of this element.
     * @return int
     */
    pub fn getIsLowPriority(self) -> int {
        return self.is_low_priority_
    }
    /**
     * @brief gets the is overwrite of this element.
     * @return int
     */
    pub fn getIsOverwrite(self) -> int {
        return self.is_overwrite_
    }
    /**
     * @brief gets the is rollback on fail of this element.
     * @return int
     */
    pub fn getIsRollbackOnFail(self) -> int {
        return self.is_rollback_on_fail_
    }
}
/**
 * @brief DO class: A my sql iterate statement.
 */
schema MySqlIterateStatementDO {
    @primary oid_: int,
    label_name_: string
}
impl MySqlIterateStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlIterateStatementDO {
    	for (tmp in db.my_sql_iterate_statement) {
            yield MySqlIterateStatementDO {
                oid_ : tmp.oid_,
                label_name_ : tmp.label_name_
            }
    	}
    }
    /**
     * @brief gets the label name of this element.
     * @return string
     */
    pub fn getLabelName(self) -> string {
        return self.label_name_
    }
}
/**
 * @brief DO class: A my sql json table expr.
 */
schema MySqlJsonTableExprDO {
    @primary oid_: int,
    columns_: string,
    expr_oid_: int,
    path_oid_: int
}
impl MySqlJsonTableExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlJsonTableExprDO {
    	for (tmp in db.my_sql_json_table_expr) {
            yield MySqlJsonTableExprDO {
                oid_ : tmp.oid_,
                columns_ : tmp.columns_,
                expr_oid_ : tmp.expr_oid_,
                path_oid_ : tmp.path_oid_
            }
    	}
    }
    /**
     * @brief gets the columns of this element.
     * @return string
     */
    pub fn getColumns(self) -> string {
        return self.columns_
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the path oid of this element.
     * @return int
     */
    pub fn getPathOid(self) -> int {
        return self.path_oid_
    }
}
/**
 * @brief DO class: A my sql key.
 */
schema MySqlKeyDO {
    @primary oid_: int,
    index_type_: string,
    is_has_constraint_: int,
    key_block_size_oid_: int
}
impl MySqlKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlKeyDO {
    	for (tmp in db.my_sql_key) {
            yield MySqlKeyDO {
                oid_ : tmp.oid_,
                index_type_ : tmp.index_type_,
                is_has_constraint_ : tmp.is_has_constraint_,
                key_block_size_oid_ : tmp.key_block_size_oid_
            }
    	}
    }
    /**
     * @brief gets the index type of this element.
     * @return string
     */
    pub fn getIndexType(self) -> string {
        return self.index_type_
    }
    /**
     * @brief gets the is has constraint of this element.
     * @return int
     */
    pub fn getIsHasConstraint(self) -> int {
        return self.is_has_constraint_
    }
    /**
     * @brief gets the key block size oid of this element.
     * @return int
     */
    pub fn getKeyBlockSizeOid(self) -> int {
        return self.key_block_size_oid_
    }
}
/**
 * @brief DO class: A my sql kill statement.
 */
schema MySqlKillStatementDO {
    @primary oid_: int,
    thread_id_oid_: int,
    type_: string
}
impl MySqlKillStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlKillStatementDO {
    	for (tmp in db.my_sql_kill_statement) {
            yield MySqlKillStatementDO {
                oid_ : tmp.oid_,
                thread_id_oid_ : tmp.thread_id_oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the thread id oid of this element.
     * @return int
     */
    pub fn getThreadIdOid(self) -> int {
        return self.thread_id_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A my sql leave statement.
 */
schema MySqlLeaveStatementDO {
    @primary oid_: int,
    label_name_: string
}
impl MySqlLeaveStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlLeaveStatementDO {
    	for (tmp in db.my_sql_leave_statement) {
            yield MySqlLeaveStatementDO {
                oid_ : tmp.oid_,
                label_name_ : tmp.label_name_
            }
    	}
    }
    /**
     * @brief gets the label name of this element.
     * @return string
     */
    pub fn getLabelName(self) -> string {
        return self.label_name_
    }
}
/**
 * @brief DO class: A my sql load data in file statement.
 */
schema MySqlLoadDataInFileStatementDO {
    @primary oid_: int,
    charset_: string,
    columns_enclosed_by_oid_: int,
    columns_escaped_oid_: int,
    columns_terminated_by_oid_: int,
    file_name_oid_: int,
    ignore_lines_number_oid_: int,
    is_columns_enclosed_optionally_: int,
    is_concurrent_: int,
    is_ignore_: int,
    is_local_: int,
    is_low_priority_: int,
    is_replicate_: int,
    lines_starting_by_oid_: int,
    lines_terminated_by_oid_: int,
    table_name_oid_: int
}
impl MySqlLoadDataInFileStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlLoadDataInFileStatementDO {
    	for (tmp in db.my_sql_load_data_in_file_statement) {
            yield MySqlLoadDataInFileStatementDO {
                oid_ : tmp.oid_,
                charset_ : tmp.charset_,
                columns_enclosed_by_oid_ : tmp.columns_enclosed_by_oid_,
                columns_escaped_oid_ : tmp.columns_escaped_oid_,
                columns_terminated_by_oid_ : tmp.columns_terminated_by_oid_,
                file_name_oid_ : tmp.file_name_oid_,
                ignore_lines_number_oid_ : tmp.ignore_lines_number_oid_,
                is_columns_enclosed_optionally_ : tmp.is_columns_enclosed_optionally_,
                is_concurrent_ : tmp.is_concurrent_,
                is_ignore_ : tmp.is_ignore_,
                is_local_ : tmp.is_local_,
                is_low_priority_ : tmp.is_low_priority_,
                is_replicate_ : tmp.is_replicate_,
                lines_starting_by_oid_ : tmp.lines_starting_by_oid_,
                lines_terminated_by_oid_ : tmp.lines_terminated_by_oid_,
                table_name_oid_ : tmp.table_name_oid_
            }
    	}
    }
    /**
     * @brief gets the charset of this element.
     * @return string
     */
    pub fn getCharset(self) -> string {
        return self.charset_
    }
    /**
     * @brief gets the columns enclosed by oid of this element.
     * @return int
     */
    pub fn getColumnsEnclosedByOid(self) -> int {
        return self.columns_enclosed_by_oid_
    }
    /**
     * @brief gets the columns escaped oid of this element.
     * @return int
     */
    pub fn getColumnsEscapedOid(self) -> int {
        return self.columns_escaped_oid_
    }
    /**
     * @brief gets the columns terminated by oid of this element.
     * @return int
     */
    pub fn getColumnsTerminatedByOid(self) -> int {
        return self.columns_terminated_by_oid_
    }
    /**
     * @brief gets the file name oid of this element.
     * @return int
     */
    pub fn getFileNameOid(self) -> int {
        return self.file_name_oid_
    }
    /**
     * @brief gets the ignore lines number oid of this element.
     * @return int
     */
    pub fn getIgnoreLinesNumberOid(self) -> int {
        return self.ignore_lines_number_oid_
    }
    /**
     * @brief gets the is columns enclosed optionally of this element.
     * @return int
     */
    pub fn getIsColumnsEnclosedOptionally(self) -> int {
        return self.is_columns_enclosed_optionally_
    }
    /**
     * @brief gets the is concurrent of this element.
     * @return int
     */
    pub fn getIsConcurrent(self) -> int {
        return self.is_concurrent_
    }
    /**
     * @brief gets the is ignore of this element.
     * @return int
     */
    pub fn getIsIgnore(self) -> int {
        return self.is_ignore_
    }
    /**
     * @brief gets the is local of this element.
     * @return int
     */
    pub fn getIsLocal(self) -> int {
        return self.is_local_
    }
    /**
     * @brief gets the is low priority of this element.
     * @return int
     */
    pub fn getIsLowPriority(self) -> int {
        return self.is_low_priority_
    }
    /**
     * @brief gets the is replicate of this element.
     * @return int
     */
    pub fn getIsReplicate(self) -> int {
        return self.is_replicate_
    }
    /**
     * @brief gets the lines starting by oid of this element.
     * @return int
     */
    pub fn getLinesStartingByOid(self) -> int {
        return self.lines_starting_by_oid_
    }
    /**
     * @brief gets the lines terminated by oid of this element.
     * @return int
     */
    pub fn getLinesTerminatedByOid(self) -> int {
        return self.lines_terminated_by_oid_
    }
    /**
     * @brief gets the table name oid of this element.
     * @return int
     */
    pub fn getTableNameOid(self) -> int {
        return self.table_name_oid_
    }
}
/**
 * @brief DO class: A my sql load xml statement.
 */
schema MySqlLoadXmlStatementDO {
    @primary oid_: int,
    charset_: string,
    file_name_oid_: int,
    ignore_lines_number_oid_: int,
    is_concurrent_: int,
    is_ignore_: int,
    is_local_: int,
    is_low_priority_: int,
    is_replicate_: int,
    rows_identified_by_oid_: int,
    table_name_oid_: int
}
impl MySqlLoadXmlStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlLoadXmlStatementDO {
    	for (tmp in db.my_sql_load_xml_statement) {
            yield MySqlLoadXmlStatementDO {
                oid_ : tmp.oid_,
                charset_ : tmp.charset_,
                file_name_oid_ : tmp.file_name_oid_,
                ignore_lines_number_oid_ : tmp.ignore_lines_number_oid_,
                is_concurrent_ : tmp.is_concurrent_,
                is_ignore_ : tmp.is_ignore_,
                is_local_ : tmp.is_local_,
                is_low_priority_ : tmp.is_low_priority_,
                is_replicate_ : tmp.is_replicate_,
                rows_identified_by_oid_ : tmp.rows_identified_by_oid_,
                table_name_oid_ : tmp.table_name_oid_
            }
    	}
    }
    /**
     * @brief gets the charset of this element.
     * @return string
     */
    pub fn getCharset(self) -> string {
        return self.charset_
    }
    /**
     * @brief gets the file name oid of this element.
     * @return int
     */
    pub fn getFileNameOid(self) -> int {
        return self.file_name_oid_
    }
    /**
     * @brief gets the ignore lines number oid of this element.
     * @return int
     */
    pub fn getIgnoreLinesNumberOid(self) -> int {
        return self.ignore_lines_number_oid_
    }
    /**
     * @brief gets the is concurrent of this element.
     * @return int
     */
    pub fn getIsConcurrent(self) -> int {
        return self.is_concurrent_
    }
    /**
     * @brief gets the is ignore of this element.
     * @return int
     */
    pub fn getIsIgnore(self) -> int {
        return self.is_ignore_
    }
    /**
     * @brief gets the is local of this element.
     * @return int
     */
    pub fn getIsLocal(self) -> int {
        return self.is_local_
    }
    /**
     * @brief gets the is low priority of this element.
     * @return int
     */
    pub fn getIsLowPriority(self) -> int {
        return self.is_low_priority_
    }
    /**
     * @brief gets the is replicate of this element.
     * @return int
     */
    pub fn getIsReplicate(self) -> int {
        return self.is_replicate_
    }
    /**
     * @brief gets the rows identified by oid of this element.
     * @return int
     */
    pub fn getRowsIdentifiedByOid(self) -> int {
        return self.rows_identified_by_oid_
    }
    /**
     * @brief gets the table name oid of this element.
     * @return int
     */
    pub fn getTableNameOid(self) -> int {
        return self.table_name_oid_
    }
}
/**
 * @brief DO class: A my sql lock table statement.
 */
schema MySqlLockTableStatementDO {
    @primary oid_: int,
    items_: string
}
impl MySqlLockTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlLockTableStatementDO {
    	for (tmp in db.my_sql_lock_table_statement) {
            yield MySqlLockTableStatementDO {
                oid_ : tmp.oid_,
                items_ : tmp.items_
            }
    	}
    }
    /**
     * @brief gets the items of this element.
     * @return string
     */
    pub fn getItems(self) -> string {
        return self.items_
    }
}
/**
 * @brief DO class: A my sql manage instance group statement.
 */
schema MySqlManageInstanceGroupStatementDO {
    @primary oid_: int,
    group_names_to_string_: string,
    operation_oid_: int,
    replication_oid_: int
}
impl MySqlManageInstanceGroupStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlManageInstanceGroupStatementDO {
    	for (tmp in db.my_sql_manage_instance_group_statement) {
            yield MySqlManageInstanceGroupStatementDO {
                oid_ : tmp.oid_,
                group_names_to_string_ : tmp.group_names_to_string_,
                operation_oid_ : tmp.operation_oid_,
                replication_oid_ : tmp.replication_oid_
            }
    	}
    }
    /**
     * @brief gets the group names to string of this element.
     * @return string
     */
    pub fn getGroupNamesToString(self) -> string {
        return self.group_names_to_string_
    }
    /**
     * @brief gets the operation oid of this element.
     * @return int
     */
    pub fn getOperationOid(self) -> int {
        return self.operation_oid_
    }
    /**
     * @brief gets the replication oid of this element.
     * @return int
     */
    pub fn getReplicationOid(self) -> int {
        return self.replication_oid_
    }
}
/**
 * @brief DO class: A my sql migrate statement.
 */
schema MySqlMigrateStatementDO {
    @primary oid_: int,
    from_ins_id_oid_: int,
    from_ins_ip_oid_: int,
    from_ins_port_oid_: int,
    from_ins_status_oid_: int,
    migrate_type_oid_: int,
    schema_oid_: int,
    shard_names_oid_: int,
    to_ins_id_oid_: int,
    to_ins_ip_oid_: int,
    to_ins_port_oid_: int,
    to_ins_status_oid_: int
}
impl MySqlMigrateStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlMigrateStatementDO {
    	for (tmp in db.my_sql_migrate_statement) {
            yield MySqlMigrateStatementDO {
                oid_ : tmp.oid_,
                from_ins_id_oid_ : tmp.from_ins_id_oid_,
                from_ins_ip_oid_ : tmp.from_ins_ip_oid_,
                from_ins_port_oid_ : tmp.from_ins_port_oid_,
                from_ins_status_oid_ : tmp.from_ins_status_oid_,
                migrate_type_oid_ : tmp.migrate_type_oid_,
                schema_oid_ : tmp.schema_oid_,
                shard_names_oid_ : tmp.shard_names_oid_,
                to_ins_id_oid_ : tmp.to_ins_id_oid_,
                to_ins_ip_oid_ : tmp.to_ins_ip_oid_,
                to_ins_port_oid_ : tmp.to_ins_port_oid_,
                to_ins_status_oid_ : tmp.to_ins_status_oid_
            }
    	}
    }
    /**
     * @brief gets the from ins id oid of this element.
     * @return int
     */
    pub fn getFromInsIdOid(self) -> int {
        return self.from_ins_id_oid_
    }
    /**
     * @brief gets the from ins ip oid of this element.
     * @return int
     */
    pub fn getFromInsIpOid(self) -> int {
        return self.from_ins_ip_oid_
    }
    /**
     * @brief gets the from ins port oid of this element.
     * @return int
     */
    pub fn getFromInsPortOid(self) -> int {
        return self.from_ins_port_oid_
    }
    /**
     * @brief gets the from ins status oid of this element.
     * @return int
     */
    pub fn getFromInsStatusOid(self) -> int {
        return self.from_ins_status_oid_
    }
    /**
     * @brief gets the migrate type oid of this element.
     * @return int
     */
    pub fn getMigrateTypeOid(self) -> int {
        return self.migrate_type_oid_
    }
    /**
     * @brief gets the schema oid of this element.
     * @return int
     */
    pub fn getSchemaOid(self) -> int {
        return self.schema_oid_
    }
    /**
     * @brief gets the shard names oid of this element.
     * @return int
     */
    pub fn getShardNamesOid(self) -> int {
        return self.shard_names_oid_
    }
    /**
     * @brief gets the to ins id oid of this element.
     * @return int
     */
    pub fn getToInsIdOid(self) -> int {
        return self.to_ins_id_oid_
    }
    /**
     * @brief gets the to ins ip oid of this element.
     * @return int
     */
    pub fn getToInsIpOid(self) -> int {
        return self.to_ins_ip_oid_
    }
    /**
     * @brief gets the to ins port oid of this element.
     * @return int
     */
    pub fn getToInsPortOid(self) -> int {
        return self.to_ins_port_oid_
    }
    /**
     * @brief gets the to ins status oid of this element.
     * @return int
     */
    pub fn getToInsStatusOid(self) -> int {
        return self.to_ins_status_oid_
    }
}
/**
 * @brief DO class: A my sql object impl.
 */
schema MySqlObjectImplDO {
    @primary oid_: int
}
impl MySqlObjectImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlObjectImplDO {
    	for (tmp in db.my_sql_object_impl) {
            yield MySqlObjectImplDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql optimize statement.
 */
schema MySqlOptimizeStatementDO {
    @primary oid_: int,
    is_local_: int,
    is_no_write_to_binlog_: int
}
impl MySqlOptimizeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlOptimizeStatementDO {
    	for (tmp in db.my_sql_optimize_statement) {
            yield MySqlOptimizeStatementDO {
                oid_ : tmp.oid_,
                is_local_ : tmp.is_local_,
                is_no_write_to_binlog_ : tmp.is_no_write_to_binlog_
            }
    	}
    }
    /**
     * @brief gets the is local of this element.
     * @return int
     */
    pub fn getIsLocal(self) -> int {
        return self.is_local_
    }
    /**
     * @brief gets the is no write to binlog of this element.
     * @return int
     */
    pub fn getIsNoWriteToBinlog(self) -> int {
        return self.is_no_write_to_binlog_
    }
}
/**
 * @brief DO class: A my sql ordering expr.
 */
schema MySqlOrderingExprDO {
    @primary oid_: int,
    expr_oid_: int,
    type_: string
}
impl MySqlOrderingExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlOrderingExprDO {
    	for (tmp in db.my_sql_ordering_expr) {
            yield MySqlOrderingExprDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A my sql out file expr.
 */
schema MySqlOutFileExprDO {
    @primary oid_: int,
    charset_: string,
    columns_enclosed_by_oid_: int,
    columns_escaped_oid_: int,
    columns_terminated_by_oid_: int,
    file_oid_: int,
    ignore_lines_number_oid_: int,
    is_columns_enclosed_optionally_: int,
    lines_starting_by_oid_: int,
    lines_terminated_by_oid_: int
}
impl MySqlOutFileExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlOutFileExprDO {
    	for (tmp in db.my_sql_out_file_expr) {
            yield MySqlOutFileExprDO {
                oid_ : tmp.oid_,
                charset_ : tmp.charset_,
                columns_enclosed_by_oid_ : tmp.columns_enclosed_by_oid_,
                columns_escaped_oid_ : tmp.columns_escaped_oid_,
                columns_terminated_by_oid_ : tmp.columns_terminated_by_oid_,
                file_oid_ : tmp.file_oid_,
                ignore_lines_number_oid_ : tmp.ignore_lines_number_oid_,
                is_columns_enclosed_optionally_ : tmp.is_columns_enclosed_optionally_,
                lines_starting_by_oid_ : tmp.lines_starting_by_oid_,
                lines_terminated_by_oid_ : tmp.lines_terminated_by_oid_
            }
    	}
    }
    /**
     * @brief gets the charset of this element.
     * @return string
     */
    pub fn getCharset(self) -> string {
        return self.charset_
    }
    /**
     * @brief gets the columns enclosed by oid of this element.
     * @return int
     */
    pub fn getColumnsEnclosedByOid(self) -> int {
        return self.columns_enclosed_by_oid_
    }
    /**
     * @brief gets the columns escaped oid of this element.
     * @return int
     */
    pub fn getColumnsEscapedOid(self) -> int {
        return self.columns_escaped_oid_
    }
    /**
     * @brief gets the columns terminated by oid of this element.
     * @return int
     */
    pub fn getColumnsTerminatedByOid(self) -> int {
        return self.columns_terminated_by_oid_
    }
    /**
     * @brief gets the file oid of this element.
     * @return int
     */
    pub fn getFileOid(self) -> int {
        return self.file_oid_
    }
    /**
     * @brief gets the ignore lines number oid of this element.
     * @return int
     */
    pub fn getIgnoreLinesNumberOid(self) -> int {
        return self.ignore_lines_number_oid_
    }
    /**
     * @brief gets the is columns enclosed optionally of this element.
     * @return int
     */
    pub fn getIsColumnsEnclosedOptionally(self) -> int {
        return self.is_columns_enclosed_optionally_
    }
    /**
     * @brief gets the lines starting by oid of this element.
     * @return int
     */
    pub fn getLinesStartingByOid(self) -> int {
        return self.lines_starting_by_oid_
    }
    /**
     * @brief gets the lines terminated by oid of this element.
     * @return int
     */
    pub fn getLinesTerminatedByOid(self) -> int {
        return self.lines_terminated_by_oid_
    }
}
/**
 * @brief DO class: A my sql partition by key.
 */
schema MySqlPartitionByKeyDO {
    @primary oid_: int,
    algorithm_: int
}
impl MySqlPartitionByKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlPartitionByKeyDO {
    	for (tmp in db.my_sql_partition_by_key) {
            yield MySqlPartitionByKeyDO {
                oid_ : tmp.oid_,
                algorithm_ : tmp.algorithm_
            }
    	}
    }
    /**
     * @brief gets the algorithm of this element.
     * @return int
     */
    pub fn getAlgorithm(self) -> int {
        return self.algorithm_
    }
}
/**
 * @brief DO class: A my sql prepare statement.
 */
schema MySqlPrepareStatementDO {
    @primary oid_: int,
    from_oid_: int,
    name_oid_: int
}
impl MySqlPrepareStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlPrepareStatementDO {
    	for (tmp in db.my_sql_prepare_statement) {
            yield MySqlPrepareStatementDO {
                oid_ : tmp.oid_,
                from_oid_ : tmp.from_oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A my sql primary key.
 */
schema MySqlPrimaryKeyDO {
    @primary oid_: int
}
impl MySqlPrimaryKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlPrimaryKeyDO {
    	for (tmp in db.my_sql_primary_key) {
            yield MySqlPrimaryKeyDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql raft leader transfer statement.
 */
schema MySqlRaftLeaderTransferStatementDO {
    @primary oid_: int,
    from_oid_: int,
    shard_oid_: int,
    timeout_oid_: int,
    to_oid_: int
}
impl MySqlRaftLeaderTransferStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlRaftLeaderTransferStatementDO {
    	for (tmp in db.my_sql_raft_leader_transfer_statement) {
            yield MySqlRaftLeaderTransferStatementDO {
                oid_ : tmp.oid_,
                from_oid_ : tmp.from_oid_,
                shard_oid_ : tmp.shard_oid_,
                timeout_oid_ : tmp.timeout_oid_,
                to_oid_ : tmp.to_oid_
            }
    	}
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the shard oid of this element.
     * @return int
     */
    pub fn getShardOid(self) -> int {
        return self.shard_oid_
    }
    /**
     * @brief gets the timeout oid of this element.
     * @return int
     */
    pub fn getTimeoutOid(self) -> int {
        return self.timeout_oid_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
}
/**
 * @brief DO class: A my sql raft member change statement.
 */
schema MySqlRaftMemberChangeStatementDO {
    @primary oid_: int,
    host_oid_: int,
    is_force_: int,
    is_no_leader_: int,
    shard_oid_: int,
    status_oid_: int
}
impl MySqlRaftMemberChangeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlRaftMemberChangeStatementDO {
    	for (tmp in db.my_sql_raft_member_change_statement) {
            yield MySqlRaftMemberChangeStatementDO {
                oid_ : tmp.oid_,
                host_oid_ : tmp.host_oid_,
                is_force_ : tmp.is_force_,
                is_no_leader_ : tmp.is_no_leader_,
                shard_oid_ : tmp.shard_oid_,
                status_oid_ : tmp.status_oid_
            }
    	}
    }
    /**
     * @brief gets the host oid of this element.
     * @return int
     */
    pub fn getHostOid(self) -> int {
        return self.host_oid_
    }
    /**
     * @brief gets the is force of this element.
     * @return int
     */
    pub fn getIsForce(self) -> int {
        return self.is_force_
    }
    /**
     * @brief gets the is no leader of this element.
     * @return int
     */
    pub fn getIsNoLeader(self) -> int {
        return self.is_no_leader_
    }
    /**
     * @brief gets the shard oid of this element.
     * @return int
     */
    pub fn getShardOid(self) -> int {
        return self.shard_oid_
    }
    /**
     * @brief gets the status oid of this element.
     * @return int
     */
    pub fn getStatusOid(self) -> int {
        return self.status_oid_
    }
}
/**
 * @brief DO class: A my sql rename sequence statement.
 */
schema MySqlRenameSequenceStatementDO {
    @primary oid_: int,
    name_oid_: int,
    to_oid_: int
}
impl MySqlRenameSequenceStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlRenameSequenceStatementDO {
    	for (tmp in db.my_sql_rename_sequence_statement) {
            yield MySqlRenameSequenceStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_,
                to_oid_ : tmp.to_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
}
/**
 * @brief DO class: A my sql rename table statement.
 */
schema MySqlRenameTableStatementDO {
    @primary oid_: int,
    items_: string
}
impl MySqlRenameTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlRenameTableStatementDO {
    	for (tmp in db.my_sql_rename_table_statement) {
            yield MySqlRenameTableStatementDO {
                oid_ : tmp.oid_,
                items_ : tmp.items_
            }
    	}
    }
    /**
     * @brief gets the items of this element.
     * @return string
     */
    pub fn getItems(self) -> string {
        return self.items_
    }
}
/**
 * @brief DO class: A my sql repeat statement.
 */
schema MySqlRepeatStatementDO {
    @primary oid_: int,
    condition_oid_: int,
    label_name_: string
}
impl MySqlRepeatStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlRepeatStatementDO {
    	for (tmp in db.my_sql_repeat_statement) {
            yield MySqlRepeatStatementDO {
                oid_ : tmp.oid_,
                condition_oid_ : tmp.condition_oid_,
                label_name_ : tmp.label_name_
            }
    	}
    }
    /**
     * @brief gets the condition oid of this element.
     * @return int
     */
    pub fn getConditionOid(self) -> int {
        return self.condition_oid_
    }
    /**
     * @brief gets the label name of this element.
     * @return string
     */
    pub fn getLabelName(self) -> string {
        return self.label_name_
    }
}
/**
 * @brief DO class: A my sql reset statement.
 */
schema MySqlResetStatementDO {
    @primary oid_: int,
    options_: string
}
impl MySqlResetStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlResetStatementDO {
    	for (tmp in db.my_sql_reset_statement) {
            yield MySqlResetStatementDO {
                oid_ : tmp.oid_,
                options_ : tmp.options_
            }
    	}
    }
    /**
     * @brief gets the options of this element.
     * @return string
     */
    pub fn getOptions(self) -> string {
        return self.options_
    }
}
/**
 * @brief DO class: A my sql select into statement.
 */
schema MySqlSelectIntoStatementDO {
    @primary oid_: int,
    select_oid_: int
}
impl MySqlSelectIntoStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlSelectIntoStatementDO {
    	for (tmp in db.my_sql_select_into_statement) {
            yield MySqlSelectIntoStatementDO {
                oid_ : tmp.oid_,
                select_oid_ : tmp.select_oid_
            }
    	}
    }
    /**
     * @brief gets the select oid of this element.
     * @return int
     */
    pub fn getSelectOid(self) -> int {
        return self.select_oid_
    }
}
/**
 * @brief DO class: A my sql select query block.
 */
schema MySqlSelectQueryBlockDO {
    @primary oid_: int,
    cache_: int,
    force_partition_oid_: int,
    hints_size_: int,
    is_big_result_: int,
    is_buffer_result_: int,
    is_calc_found_rows_: int,
    is_hign_priority_: int,
    is_lock_in_share_mode_: int,
    is_small_result_: int,
    is_straight_join_: int,
    procedure_name_oid_: int
}
impl MySqlSelectQueryBlockDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlSelectQueryBlockDO {
    	for (tmp in db.my_sql_select_query_block) {
            yield MySqlSelectQueryBlockDO {
                oid_ : tmp.oid_,
                cache_ : tmp.cache_,
                force_partition_oid_ : tmp.force_partition_oid_,
                hints_size_ : tmp.hints_size_,
                is_big_result_ : tmp.is_big_result_,
                is_buffer_result_ : tmp.is_buffer_result_,
                is_calc_found_rows_ : tmp.is_calc_found_rows_,
                is_hign_priority_ : tmp.is_hign_priority_,
                is_lock_in_share_mode_ : tmp.is_lock_in_share_mode_,
                is_small_result_ : tmp.is_small_result_,
                is_straight_join_ : tmp.is_straight_join_,
                procedure_name_oid_ : tmp.procedure_name_oid_
            }
    	}
    }
    /**
     * @brief gets the cache of this element.
     * @return int
     */
    pub fn getCache(self) -> int {
        return self.cache_
    }
    /**
     * @brief gets the force partition oid of this element.
     * @return int
     */
    pub fn getForcePartitionOid(self) -> int {
        return self.force_partition_oid_
    }
    /**
     * @brief gets the hints size of this element.
     * @return int
     */
    pub fn getHintsSize(self) -> int {
        return self.hints_size_
    }
    /**
     * @brief gets the is big result of this element.
     * @return int
     */
    pub fn getIsBigResult(self) -> int {
        return self.is_big_result_
    }
    /**
     * @brief gets the is buffer result of this element.
     * @return int
     */
    pub fn getIsBufferResult(self) -> int {
        return self.is_buffer_result_
    }
    /**
     * @brief gets the is calc found rows of this element.
     * @return int
     */
    pub fn getIsCalcFoundRows(self) -> int {
        return self.is_calc_found_rows_
    }
    /**
     * @brief gets the is hign priority of this element.
     * @return int
     */
    pub fn getIsHignPriority(self) -> int {
        return self.is_hign_priority_
    }
    /**
     * @brief gets the is lock in share mode of this element.
     * @return int
     */
    pub fn getIsLockInShareMode(self) -> int {
        return self.is_lock_in_share_mode_
    }
    /**
     * @brief gets the is small result of this element.
     * @return int
     */
    pub fn getIsSmallResult(self) -> int {
        return self.is_small_result_
    }
    /**
     * @brief gets the is straight join of this element.
     * @return int
     */
    pub fn getIsStraightJoin(self) -> int {
        return self.is_straight_join_
    }
    /**
     * @brief gets the procedure name oid of this element.
     * @return int
     */
    pub fn getProcedureNameOid(self) -> int {
        return self.procedure_name_oid_
    }
}
/**
 * @brief DO class: A my sql set transaction statement.
 */
schema MySqlSetTransactionStatementDO {
    @primary oid_: int,
    access_model_: string,
    global_: int,
    is_local_: int,
    isolation_level_: string,
    policy_oid_: int,
    session_: int
}
impl MySqlSetTransactionStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlSetTransactionStatementDO {
    	for (tmp in db.my_sql_set_transaction_statement) {
            yield MySqlSetTransactionStatementDO {
                oid_ : tmp.oid_,
                access_model_ : tmp.access_model_,
                global_ : tmp.global_,
                is_local_ : tmp.is_local_,
                isolation_level_ : tmp.isolation_level_,
                policy_oid_ : tmp.policy_oid_,
                session_ : tmp.session_
            }
    	}
    }
    /**
     * @brief gets the access model of this element.
     * @return string
     */
    pub fn getAccessModel(self) -> string {
        return self.access_model_
    }
    /**
     * @brief gets the global of this element.
     * @return int
     */
    pub fn getGlobal(self) -> int {
        return self.global_
    }
    /**
     * @brief gets the is local of this element.
     * @return int
     */
    pub fn getIsLocal(self) -> int {
        return self.is_local_
    }
    /**
     * @brief gets the isolation level of this element.
     * @return string
     */
    pub fn getIsolationLevel(self) -> string {
        return self.isolation_level_
    }
    /**
     * @brief gets the policy oid of this element.
     * @return int
     */
    pub fn getPolicyOid(self) -> int {
        return self.policy_oid_
    }
    /**
     * @brief gets the session of this element.
     * @return int
     */
    pub fn getSession(self) -> int {
        return self.session_
    }
}
/**
 * @brief DO class: A my sql show authors statement.
 */
schema MySqlShowAuthorsStatementDO {
    @primary oid_: int
}
impl MySqlShowAuthorsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowAuthorsStatementDO {
    	for (tmp in db.my_sql_show_authors_statement) {
            yield MySqlShowAuthorsStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql show bin log events statement.
 */
schema MySqlShowBinLogEventsStatementDO {
    @primary oid_: int,
    from_oid_: int,
    in_oid_: int,
    limit_oid_: int
}
impl MySqlShowBinLogEventsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowBinLogEventsStatementDO {
    	for (tmp in db.my_sql_show_bin_log_events_statement) {
            yield MySqlShowBinLogEventsStatementDO {
                oid_ : tmp.oid_,
                from_oid_ : tmp.from_oid_,
                in_oid_ : tmp.in_oid_,
                limit_oid_ : tmp.limit_oid_
            }
    	}
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the in oid of this element.
     * @return int
     */
    pub fn getInOid(self) -> int {
        return self.in_oid_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
}
/**
 * @brief DO class: A my sql show binary logs statement.
 */
schema MySqlShowBinaryLogsStatementDO {
    @primary oid_: int
}
impl MySqlShowBinaryLogsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowBinaryLogsStatementDO {
    	for (tmp in db.my_sql_show_binary_logs_statement) {
            yield MySqlShowBinaryLogsStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql show broadcasts statement.
 */
schema MySqlShowBroadcastsStatementDO {
    @primary oid_: int,
    limit_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl MySqlShowBroadcastsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowBroadcastsStatementDO {
    	for (tmp in db.my_sql_show_broadcasts_statement) {
            yield MySqlShowBroadcastsStatementDO {
                oid_ : tmp.oid_,
                limit_oid_ : tmp.limit_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show character set statement.
 */
schema MySqlShowCharacterSetStatementDO {
    @primary oid_: int,
    pattern_oid_: int,
    where_oid_: int
}
impl MySqlShowCharacterSetStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowCharacterSetStatementDO {
    	for (tmp in db.my_sql_show_character_set_statement) {
            yield MySqlShowCharacterSetStatementDO {
                oid_ : tmp.oid_,
                pattern_oid_ : tmp.pattern_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the pattern oid of this element.
     * @return int
     */
    pub fn getPatternOid(self) -> int {
        return self.pattern_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show cluster name statement.
 */
schema MySqlShowClusterNameStatementDO {
    @primary oid_: int
}
impl MySqlShowClusterNameStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowClusterNameStatementDO {
    	for (tmp in db.my_sql_show_cluster_name_statement) {
            yield MySqlShowClusterNameStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql show collation statement.
 */
schema MySqlShowCollationStatementDO {
    @primary oid_: int,
    pattern_oid_: int,
    where_oid_: int
}
impl MySqlShowCollationStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowCollationStatementDO {
    	for (tmp in db.my_sql_show_collation_statement) {
            yield MySqlShowCollationStatementDO {
                oid_ : tmp.oid_,
                pattern_oid_ : tmp.pattern_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the pattern oid of this element.
     * @return int
     */
    pub fn getPatternOid(self) -> int {
        return self.pattern_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show config statement.
 */
schema MySqlShowConfigStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl MySqlShowConfigStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowConfigStatementDO {
    	for (tmp in db.my_sql_show_config_statement) {
            yield MySqlShowConfigStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A my sql show contributors statement.
 */
schema MySqlShowContributorsStatementDO {
    @primary oid_: int
}
impl MySqlShowContributorsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowContributorsStatementDO {
    	for (tmp in db.my_sql_show_contributors_statement) {
            yield MySqlShowContributorsStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql show create database statement.
 */
schema MySqlShowCreateDatabaseStatementDO {
    @primary oid_: int,
    database_oid_: int,
    is_if_not_exists_: int
}
impl MySqlShowCreateDatabaseStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowCreateDatabaseStatementDO {
    	for (tmp in db.my_sql_show_create_database_statement) {
            yield MySqlShowCreateDatabaseStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_,
                is_if_not_exists_ : tmp.is_if_not_exists_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
}
/**
 * @brief DO class: A my sql show create event statement.
 */
schema MySqlShowCreateEventStatementDO {
    @primary oid_: int,
    event_name_oid_: int
}
impl MySqlShowCreateEventStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowCreateEventStatementDO {
    	for (tmp in db.my_sql_show_create_event_statement) {
            yield MySqlShowCreateEventStatementDO {
                oid_ : tmp.oid_,
                event_name_oid_ : tmp.event_name_oid_
            }
    	}
    }
    /**
     * @brief gets the event name oid of this element.
     * @return int
     */
    pub fn getEventNameOid(self) -> int {
        return self.event_name_oid_
    }
}
/**
 * @brief DO class: A my sql show create function statement.
 */
schema MySqlShowCreateFunctionStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl MySqlShowCreateFunctionStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowCreateFunctionStatementDO {
    	for (tmp in db.my_sql_show_create_function_statement) {
            yield MySqlShowCreateFunctionStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A my sql show create procedure statement.
 */
schema MySqlShowCreateProcedureStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl MySqlShowCreateProcedureStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowCreateProcedureStatementDO {
    	for (tmp in db.my_sql_show_create_procedure_statement) {
            yield MySqlShowCreateProcedureStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A my sql show create trigger statement.
 */
schema MySqlShowCreateTriggerStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl MySqlShowCreateTriggerStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowCreateTriggerStatementDO {
    	for (tmp in db.my_sql_show_create_trigger_statement) {
            yield MySqlShowCreateTriggerStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A my sql show database status statement.
 */
schema MySqlShowDatabaseStatusStatementDO {
    @primary oid_: int,
    is_full_: int,
    limit_oid_: int,
    name_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl MySqlShowDatabaseStatusStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowDatabaseStatusStatementDO {
    	for (tmp in db.my_sql_show_database_status_statement) {
            yield MySqlShowDatabaseStatusStatementDO {
                oid_ : tmp.oid_,
                is_full_ : tmp.is_full_,
                limit_oid_ : tmp.limit_oid_,
                name_oid_ : tmp.name_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show datasources statement.
 */
schema MySqlShowDatasourcesStatementDO {
    @primary oid_: int,
    limit_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl MySqlShowDatasourcesStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowDatasourcesStatementDO {
    	for (tmp in db.my_sql_show_datasources_statement) {
            yield MySqlShowDatasourcesStatementDO {
                oid_ : tmp.oid_,
                limit_oid_ : tmp.limit_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show ddl status statement.
 */
schema MySqlShowDdlStatusStatementDO {
    @primary oid_: int,
    limit_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl MySqlShowDdlStatusStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowDdlStatusStatementDO {
    	for (tmp in db.my_sql_show_ddl_status_statement) {
            yield MySqlShowDdlStatusStatementDO {
                oid_ : tmp.oid_,
                limit_oid_ : tmp.limit_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show ds statement.
 */
schema MySqlShowDsStatementDO {
    @primary oid_: int,
    limit_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl MySqlShowDsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowDsStatementDO {
    	for (tmp in db.my_sql_show_ds_statement) {
            yield MySqlShowDsStatementDO {
                oid_ : tmp.oid_,
                limit_oid_ : tmp.limit_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show engine statement.
 */
schema MySqlShowEngineStatementDO {
    @primary oid_: int,
    name_oid_: int,
    option_: string
}
impl MySqlShowEngineStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowEngineStatementDO {
    	for (tmp in db.my_sql_show_engine_statement) {
            yield MySqlShowEngineStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_,
                option_ : tmp.option_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the option of this element.
     * @return string
     */
    pub fn getOption(self) -> string {
        return self.option_
    }
}
/**
 * @brief DO class: A my sql show engines statement.
 */
schema MySqlShowEnginesStatementDO {
    @primary oid_: int,
    is_storage_: int
}
impl MySqlShowEnginesStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowEnginesStatementDO {
    	for (tmp in db.my_sql_show_engines_statement) {
            yield MySqlShowEnginesStatementDO {
                oid_ : tmp.oid_,
                is_storage_ : tmp.is_storage_
            }
    	}
    }
    /**
     * @brief gets the is storage of this element.
     * @return int
     */
    pub fn getIsStorage(self) -> int {
        return self.is_storage_
    }
}
/**
 * @brief DO class: A my sql show errors statement.
 */
schema MySqlShowErrorsStatementDO {
    @primary oid_: int,
    is_count_: int,
    limit_oid_: int
}
impl MySqlShowErrorsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowErrorsStatementDO {
    	for (tmp in db.my_sql_show_errors_statement) {
            yield MySqlShowErrorsStatementDO {
                oid_ : tmp.oid_,
                is_count_ : tmp.is_count_,
                limit_oid_ : tmp.limit_oid_
            }
    	}
    }
    /**
     * @brief gets the is count of this element.
     * @return int
     */
    pub fn getIsCount(self) -> int {
        return self.is_count_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
}
/**
 * @brief DO class: A my sql show events statement.
 */
schema MySqlShowEventsStatementDO {
    @primary oid_: int,
    like_oid_: int,
    schema_oid_: int,
    where_oid_: int
}
impl MySqlShowEventsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowEventsStatementDO {
    	for (tmp in db.my_sql_show_events_statement) {
            yield MySqlShowEventsStatementDO {
                oid_ : tmp.oid_,
                like_oid_ : tmp.like_oid_,
                schema_oid_ : tmp.schema_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the schema oid of this element.
     * @return int
     */
    pub fn getSchemaOid(self) -> int {
        return self.schema_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show function code statement.
 */
schema MySqlShowFunctionCodeStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl MySqlShowFunctionCodeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowFunctionCodeStatementDO {
    	for (tmp in db.my_sql_show_function_code_statement) {
            yield MySqlShowFunctionCodeStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A my sql show function status statement.
 */
schema MySqlShowFunctionStatusStatementDO {
    @primary oid_: int,
    like_oid_: int,
    where_oid_: int
}
impl MySqlShowFunctionStatusStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowFunctionStatusStatementDO {
    	for (tmp in db.my_sql_show_function_status_statement) {
            yield MySqlShowFunctionStatusStatementDO {
                oid_ : tmp.oid_,
                like_oid_ : tmp.like_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show grants statement.
 */
schema MySqlShowGrantsStatementDO {
    @primary oid_: int
}
impl MySqlShowGrantsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowGrantsStatementDO {
    	for (tmp in db.my_sql_show_grants_statement) {
            yield MySqlShowGrantsStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql show help statement.
 */
schema MySqlShowHelpStatementDO {
    @primary oid_: int,
    limit_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl MySqlShowHelpStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowHelpStatementDO {
    	for (tmp in db.my_sql_show_help_statement) {
            yield MySqlShowHelpStatementDO {
                oid_ : tmp.oid_,
                limit_oid_ : tmp.limit_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show hms meta statement.
 */
schema MySqlShowHmsMetaStatementDO {
    @primary oid_: int,
    name_oid_: int,
    schema_: string,
    table_name_: string
}
impl MySqlShowHmsMetaStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowHmsMetaStatementDO {
    	for (tmp in db.my_sql_show_hms_meta_statement) {
            yield MySqlShowHmsMetaStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_,
                schema_ : tmp.schema_,
                table_name_ : tmp.table_name_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the schema of this element.
     * @return string
     */
    pub fn getSchema(self) -> string {
        return self.schema_
    }
    /**
     * @brief gets the table name of this element.
     * @return string
     */
    pub fn getTableName(self) -> string {
        return self.table_name_
    }
}
/**
 * @brief DO class: A my sql show job status statement.
 */
schema MySqlShowJobStatusStatementDO {
    @primary oid_: int,
    is_sync_: int,
    where_oid_: int
}
impl MySqlShowJobStatusStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowJobStatusStatementDO {
    	for (tmp in db.my_sql_show_job_status_statement) {
            yield MySqlShowJobStatusStatementDO {
                oid_ : tmp.oid_,
                is_sync_ : tmp.is_sync_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the is sync of this element.
     * @return int
     */
    pub fn getIsSync(self) -> int {
        return self.is_sync_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show master logs statement.
 */
schema MySqlShowMasterLogsStatementDO {
    @primary oid_: int
}
impl MySqlShowMasterLogsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowMasterLogsStatementDO {
    	for (tmp in db.my_sql_show_master_logs_statement) {
            yield MySqlShowMasterLogsStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql show master status statement.
 */
schema MySqlShowMasterStatusStatementDO {
    @primary oid_: int
}
impl MySqlShowMasterStatusStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowMasterStatusStatementDO {
    	for (tmp in db.my_sql_show_master_status_statement) {
            yield MySqlShowMasterStatusStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql show migrate task status statement.
 */
schema MySqlShowMigrateTaskStatusStatementDO {
    @primary oid_: int,
    where_oid_: int
}
impl MySqlShowMigrateTaskStatusStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowMigrateTaskStatusStatementDO {
    	for (tmp in db.my_sql_show_migrate_task_status_statement) {
            yield MySqlShowMigrateTaskStatusStatementDO {
                oid_ : tmp.oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show node statement.
 */
schema MySqlShowNodeStatementDO {
    @primary oid_: int,
    limit_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl MySqlShowNodeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowNodeStatementDO {
    	for (tmp in db.my_sql_show_node_statement) {
            yield MySqlShowNodeStatementDO {
                oid_ : tmp.oid_,
                limit_oid_ : tmp.limit_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show open tables statement.
 */
schema MySqlShowOpenTablesStatementDO {
    @primary oid_: int,
    database_oid_: int,
    like_oid_: int,
    where_oid_: int
}
impl MySqlShowOpenTablesStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowOpenTablesStatementDO {
    	for (tmp in db.my_sql_show_open_tables_statement) {
            yield MySqlShowOpenTablesStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_,
                like_oid_ : tmp.like_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show partitions statement.
 */
schema MySqlShowPartitionsStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl MySqlShowPartitionsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowPartitionsStatementDO {
    	for (tmp in db.my_sql_show_partitions_statement) {
            yield MySqlShowPartitionsStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A my sql show physical processlist statement.
 */
schema MySqlShowPhysicalProcesslistStatementDO {
    @primary oid_: int,
    is_full_: int
}
impl MySqlShowPhysicalProcesslistStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowPhysicalProcesslistStatementDO {
    	for (tmp in db.my_sql_show_physical_processlist_statement) {
            yield MySqlShowPhysicalProcesslistStatementDO {
                oid_ : tmp.oid_,
                is_full_ : tmp.is_full_
            }
    	}
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
}
/**
 * @brief DO class: A my sql show plan cache statement.
 */
schema MySqlShowPlanCacheStatementDO {
    @primary oid_: int,
    select_oid_: int
}
impl MySqlShowPlanCacheStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowPlanCacheStatementDO {
    	for (tmp in db.my_sql_show_plan_cache_statement) {
            yield MySqlShowPlanCacheStatementDO {
                oid_ : tmp.oid_,
                select_oid_ : tmp.select_oid_
            }
    	}
    }
    /**
     * @brief gets the select oid of this element.
     * @return int
     */
    pub fn getSelectOid(self) -> int {
        return self.select_oid_
    }
}
/**
 * @brief DO class: A my sql show plan cache status statement.
 */
schema MySqlShowPlanCacheStatusStatementDO {
    @primary oid_: int
}
impl MySqlShowPlanCacheStatusStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowPlanCacheStatusStatementDO {
    	for (tmp in db.my_sql_show_plan_cache_status_statement) {
            yield MySqlShowPlanCacheStatusStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql show plugins statement.
 */
schema MySqlShowPluginsStatementDO {
    @primary oid_: int
}
impl MySqlShowPluginsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowPluginsStatementDO {
    	for (tmp in db.my_sql_show_plugins_statement) {
            yield MySqlShowPluginsStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql show privileges statement.
 */
schema MySqlShowPrivilegesStatementDO {
    @primary oid_: int
}
impl MySqlShowPrivilegesStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowPrivilegesStatementDO {
    	for (tmp in db.my_sql_show_privileges_statement) {
            yield MySqlShowPrivilegesStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql show procedure code statement.
 */
schema MySqlShowProcedureCodeStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl MySqlShowProcedureCodeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowProcedureCodeStatementDO {
    	for (tmp in db.my_sql_show_procedure_code_statement) {
            yield MySqlShowProcedureCodeStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A my sql show procedure status statement.
 */
schema MySqlShowProcedureStatusStatementDO {
    @primary oid_: int,
    like_oid_: int,
    where_oid_: int
}
impl MySqlShowProcedureStatusStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowProcedureStatusStatementDO {
    	for (tmp in db.my_sql_show_procedure_status_statement) {
            yield MySqlShowProcedureStatusStatementDO {
                oid_ : tmp.oid_,
                like_oid_ : tmp.like_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show process list statement.
 */
schema MySqlShowProcessListStatementDO {
    @primary oid_: int
}
impl MySqlShowProcessListStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowProcessListStatementDO {
    	for (tmp in db.my_sql_show_process_list_statement) {
            yield MySqlShowProcessListStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql show profile statement.
 */
schema MySqlShowProfileStatementDO {
    @primary oid_: int,
    for_query_oid_: int,
    limit_oid_: int,
    types_: string
}
impl MySqlShowProfileStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowProfileStatementDO {
    	for (tmp in db.my_sql_show_profile_statement) {
            yield MySqlShowProfileStatementDO {
                oid_ : tmp.oid_,
                for_query_oid_ : tmp.for_query_oid_,
                limit_oid_ : tmp.limit_oid_,
                types_ : tmp.types_
            }
    	}
    }
    /**
     * @brief gets the for query oid of this element.
     * @return int
     */
    pub fn getForQueryOid(self) -> int {
        return self.for_query_oid_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the types of this element.
     * @return string
     */
    pub fn getTypes(self) -> string {
        return self.types_
    }
}
/**
 * @brief DO class: A my sql show profiles statement.
 */
schema MySqlShowProfilesStatementDO {
    @primary oid_: int
}
impl MySqlShowProfilesStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowProfilesStatementDO {
    	for (tmp in db.my_sql_show_profiles_statement) {
            yield MySqlShowProfilesStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql show relay log events statement.
 */
schema MySqlShowRelayLogEventsStatementDO {
    @primary oid_: int,
    from_oid_: int,
    limit_oid_: int,
    log_name_oid_: int
}
impl MySqlShowRelayLogEventsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowRelayLogEventsStatementDO {
    	for (tmp in db.my_sql_show_relay_log_events_statement) {
            yield MySqlShowRelayLogEventsStatementDO {
                oid_ : tmp.oid_,
                from_oid_ : tmp.from_oid_,
                limit_oid_ : tmp.limit_oid_,
                log_name_oid_ : tmp.log_name_oid_
            }
    	}
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the log name oid of this element.
     * @return int
     */
    pub fn getLogNameOid(self) -> int {
        return self.log_name_oid_
    }
}
/**
 * @brief DO class: A my sql show rule statement.
 */
schema MySqlShowRuleStatementDO {
    @primary oid_: int,
    is_full_: int,
    is_version_: int,
    limit_oid_: int,
    name_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl MySqlShowRuleStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowRuleStatementDO {
    	for (tmp in db.my_sql_show_rule_statement) {
            yield MySqlShowRuleStatementDO {
                oid_ : tmp.oid_,
                is_full_ : tmp.is_full_,
                is_version_ : tmp.is_version_,
                limit_oid_ : tmp.limit_oid_,
                name_oid_ : tmp.name_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the is version of this element.
     * @return int
     */
    pub fn getIsVersion(self) -> int {
        return self.is_version_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show rule status statement.
 */
schema MySqlShowRuleStatusStatementDO {
    @primary oid_: int,
    is_full_: int,
    is_lite_: int,
    is_version_: int,
    limit_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl MySqlShowRuleStatusStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowRuleStatusStatementDO {
    	for (tmp in db.my_sql_show_rule_status_statement) {
            yield MySqlShowRuleStatusStatementDO {
                oid_ : tmp.oid_,
                is_full_ : tmp.is_full_,
                is_lite_ : tmp.is_lite_,
                is_version_ : tmp.is_version_,
                limit_oid_ : tmp.limit_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the is lite of this element.
     * @return int
     */
    pub fn getIsLite(self) -> int {
        return self.is_lite_
    }
    /**
     * @brief gets the is version of this element.
     * @return int
     */
    pub fn getIsVersion(self) -> int {
        return self.is_version_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show sequences statement.
 */
schema MySqlShowSequencesStatementDO {
    @primary oid_: int,
    limit_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl MySqlShowSequencesStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowSequencesStatementDO {
    	for (tmp in db.my_sql_show_sequences_statement) {
            yield MySqlShowSequencesStatementDO {
                oid_ : tmp.oid_,
                limit_oid_ : tmp.limit_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show slave hosts statement.
 */
schema MySqlShowSlaveHostsStatementDO {
    @primary oid_: int
}
impl MySqlShowSlaveHostsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowSlaveHostsStatementDO {
    	for (tmp in db.my_sql_show_slave_hosts_statement) {
            yield MySqlShowSlaveHostsStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql show slave status statement.
 */
schema MySqlShowSlaveStatusStatementDO {
    @primary oid_: int
}
impl MySqlShowSlaveStatusStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowSlaveStatusStatementDO {
    	for (tmp in db.my_sql_show_slave_status_statement) {
            yield MySqlShowSlaveStatusStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql show slow statement.
 */
schema MySqlShowSlowStatementDO {
    @primary oid_: int,
    is_full_: int,
    is_physical_: int,
    limit_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl MySqlShowSlowStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowSlowStatementDO {
    	for (tmp in db.my_sql_show_slow_statement) {
            yield MySqlShowSlowStatementDO {
                oid_ : tmp.oid_,
                is_full_ : tmp.is_full_,
                is_physical_ : tmp.is_physical_,
                limit_oid_ : tmp.limit_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the is physical of this element.
     * @return int
     */
    pub fn getIsPhysical(self) -> int {
        return self.is_physical_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show status statement.
 */
schema MySqlShowStatusStatementDO {
    @primary oid_: int,
    is_global_: int,
    is_session_: int,
    like_oid_: int,
    where_oid_: int
}
impl MySqlShowStatusStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowStatusStatementDO {
    	for (tmp in db.my_sql_show_status_statement) {
            yield MySqlShowStatusStatementDO {
                oid_ : tmp.oid_,
                is_global_ : tmp.is_global_,
                is_session_ : tmp.is_session_,
                like_oid_ : tmp.like_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the is global of this element.
     * @return int
     */
    pub fn getIsGlobal(self) -> int {
        return self.is_global_
    }
    /**
     * @brief gets the is session of this element.
     * @return int
     */
    pub fn getIsSession(self) -> int {
        return self.is_session_
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show table status statement.
 */
schema MySqlShowTableStatusStatementDO {
    @primary oid_: int,
    database_oid_: int,
    like_oid_: int,
    table_group_oid_: int,
    where_oid_: int
}
impl MySqlShowTableStatusStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowTableStatusStatementDO {
    	for (tmp in db.my_sql_show_table_status_statement) {
            yield MySqlShowTableStatusStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_,
                like_oid_ : tmp.like_oid_,
                table_group_oid_ : tmp.table_group_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the table group oid of this element.
     * @return int
     */
    pub fn getTableGroupOid(self) -> int {
        return self.table_group_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show topology statement.
 */
schema MySqlShowTopologyStatementDO {
    @primary oid_: int,
    is_full_: int,
    limit_oid_: int,
    name_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl MySqlShowTopologyStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowTopologyStatementDO {
    	for (tmp in db.my_sql_show_topology_statement) {
            yield MySqlShowTopologyStatementDO {
                oid_ : tmp.oid_,
                is_full_ : tmp.is_full_,
                limit_oid_ : tmp.limit_oid_,
                name_oid_ : tmp.name_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show trace statement.
 */
schema MySqlShowTraceStatementDO {
    @primary oid_: int,
    limit_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl MySqlShowTraceStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowTraceStatementDO {
    	for (tmp in db.my_sql_show_trace_statement) {
            yield MySqlShowTraceStatementDO {
                oid_ : tmp.oid_,
                limit_oid_ : tmp.limit_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show triggers statement.
 */
schema MySqlShowTriggersStatementDO {
    @primary oid_: int,
    database_oid_: int,
    like_oid_: int,
    where_oid_: int
}
impl MySqlShowTriggersStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowTriggersStatementDO {
    	for (tmp in db.my_sql_show_triggers_statement) {
            yield MySqlShowTriggersStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_,
                like_oid_ : tmp.like_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A my sql show warnings statement.
 */
schema MySqlShowWarningsStatementDO {
    @primary oid_: int,
    is_count_: int,
    limit_oid_: int
}
impl MySqlShowWarningsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlShowWarningsStatementDO {
    	for (tmp in db.my_sql_show_warnings_statement) {
            yield MySqlShowWarningsStatementDO {
                oid_ : tmp.oid_,
                is_count_ : tmp.is_count_,
                limit_oid_ : tmp.limit_oid_
            }
    	}
    }
    /**
     * @brief gets the is count of this element.
     * @return int
     */
    pub fn getIsCount(self) -> int {
        return self.is_count_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
}
/**
 * @brief DO class: A my sql statement impl.
 */
schema MySqlStatementImplDO {
    @primary oid_: int
}
impl MySqlStatementImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlStatementImplDO {
    	for (tmp in db.my_sql_statement_impl) {
            yield MySqlStatementImplDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql sub partition by key.
 */
schema MySqlSubPartitionByKeyDO {
    @primary oid_: int,
    algorithm_: int
}
impl MySqlSubPartitionByKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlSubPartitionByKeyDO {
    	for (tmp in db.my_sql_sub_partition_by_key) {
            yield MySqlSubPartitionByKeyDO {
                oid_ : tmp.oid_,
                algorithm_ : tmp.algorithm_
            }
    	}
    }
    /**
     * @brief gets the algorithm of this element.
     * @return int
     */
    pub fn getAlgorithm(self) -> int {
        return self.algorithm_
    }
}
/**
 * @brief DO class: A my sql sub partition by list.
 */
schema MySqlSubPartitionByListDO {
    @primary oid_: int
}
impl MySqlSubPartitionByListDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlSubPartitionByListDO {
    	for (tmp in db.my_sql_sub_partition_by_list) {
            yield MySqlSubPartitionByListDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql sub partition by value.
 */
schema MySqlSubPartitionByValueDO {
    @primary oid_: int
}
impl MySqlSubPartitionByValueDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlSubPartitionByValueDO {
    	for (tmp in db.my_sql_sub_partition_by_value) {
            yield MySqlSubPartitionByValueDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql table index.
 */
schema MySqlTableIndexDO {
    @primary oid_: int,
    algorithm_: string,
    analyzer_name_oid_: int,
    comment_oid_: int,
    db_partition_by_oid_: int,
    distance_measure_: string,
    index_analyzer_name_oid_: int,
    index_definition_oid_: int,
    index_type_: string,
    is_global_: int,
    is_local_: int,
    name_oid_: int,
    query_analyzer_name_oid_: int,
    table_partition_by_oid_: int,
    table_partitions_oid_: int,
    with_dic_name_oid_: int
}
impl MySqlTableIndexDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlTableIndexDO {
    	for (tmp in db.my_sql_table_index) {
            yield MySqlTableIndexDO {
                oid_ : tmp.oid_,
                algorithm_ : tmp.algorithm_,
                analyzer_name_oid_ : tmp.analyzer_name_oid_,
                comment_oid_ : tmp.comment_oid_,
                db_partition_by_oid_ : tmp.db_partition_by_oid_,
                distance_measure_ : tmp.distance_measure_,
                index_analyzer_name_oid_ : tmp.index_analyzer_name_oid_,
                index_definition_oid_ : tmp.index_definition_oid_,
                index_type_ : tmp.index_type_,
                is_global_ : tmp.is_global_,
                is_local_ : tmp.is_local_,
                name_oid_ : tmp.name_oid_,
                query_analyzer_name_oid_ : tmp.query_analyzer_name_oid_,
                table_partition_by_oid_ : tmp.table_partition_by_oid_,
                table_partitions_oid_ : tmp.table_partitions_oid_,
                with_dic_name_oid_ : tmp.with_dic_name_oid_
            }
    	}
    }
    /**
     * @brief gets the algorithm of this element.
     * @return string
     */
    pub fn getAlgorithm(self) -> string {
        return self.algorithm_
    }
    /**
     * @brief gets the analyzer name oid of this element.
     * @return int
     */
    pub fn getAnalyzerNameOid(self) -> int {
        return self.analyzer_name_oid_
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the db partition by oid of this element.
     * @return int
     */
    pub fn getDbPartitionByOid(self) -> int {
        return self.db_partition_by_oid_
    }
    /**
     * @brief gets the distance measure of this element.
     * @return string
     */
    pub fn getDistanceMeasure(self) -> string {
        return self.distance_measure_
    }
    /**
     * @brief gets the index analyzer name oid of this element.
     * @return int
     */
    pub fn getIndexAnalyzerNameOid(self) -> int {
        return self.index_analyzer_name_oid_
    }
    /**
     * @brief gets the index definition oid of this element.
     * @return int
     */
    pub fn getIndexDefinitionOid(self) -> int {
        return self.index_definition_oid_
    }
    /**
     * @brief gets the index type of this element.
     * @return string
     */
    pub fn getIndexType(self) -> string {
        return self.index_type_
    }
    /**
     * @brief gets the is global of this element.
     * @return int
     */
    pub fn getIsGlobal(self) -> int {
        return self.is_global_
    }
    /**
     * @brief gets the is local of this element.
     * @return int
     */
    pub fn getIsLocal(self) -> int {
        return self.is_local_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the query analyzer name oid of this element.
     * @return int
     */
    pub fn getQueryAnalyzerNameOid(self) -> int {
        return self.query_analyzer_name_oid_
    }
    /**
     * @brief gets the table partition by oid of this element.
     * @return int
     */
    pub fn getTablePartitionByOid(self) -> int {
        return self.table_partition_by_oid_
    }
    /**
     * @brief gets the table partitions oid of this element.
     * @return int
     */
    pub fn getTablePartitionsOid(self) -> int {
        return self.table_partitions_oid_
    }
    /**
     * @brief gets the with dic name oid of this element.
     * @return int
     */
    pub fn getWithDicNameOid(self) -> int {
        return self.with_dic_name_oid_
    }
}
/**
 * @brief DO class: A my sql unique.
 */
schema MySqlUniqueDO {
    @primary oid_: int,
    db_partition_by_oid_: int,
    is_global_: int,
    is_local_: int,
    table_partition_by_oid_: int,
    table_partitions_oid_: int
}
impl MySqlUniqueDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlUniqueDO {
    	for (tmp in db.my_sql_unique) {
            yield MySqlUniqueDO {
                oid_ : tmp.oid_,
                db_partition_by_oid_ : tmp.db_partition_by_oid_,
                is_global_ : tmp.is_global_,
                is_local_ : tmp.is_local_,
                table_partition_by_oid_ : tmp.table_partition_by_oid_,
                table_partitions_oid_ : tmp.table_partitions_oid_
            }
    	}
    }
    /**
     * @brief gets the db partition by oid of this element.
     * @return int
     */
    pub fn getDbPartitionByOid(self) -> int {
        return self.db_partition_by_oid_
    }
    /**
     * @brief gets the is global of this element.
     * @return int
     */
    pub fn getIsGlobal(self) -> int {
        return self.is_global_
    }
    /**
     * @brief gets the is local of this element.
     * @return int
     */
    pub fn getIsLocal(self) -> int {
        return self.is_local_
    }
    /**
     * @brief gets the table partition by oid of this element.
     * @return int
     */
    pub fn getTablePartitionByOid(self) -> int {
        return self.table_partition_by_oid_
    }
    /**
     * @brief gets the table partitions oid of this element.
     * @return int
     */
    pub fn getTablePartitionsOid(self) -> int {
        return self.table_partitions_oid_
    }
}
/**
 * @brief DO class: A my sql unlock tables statement.
 */
schema MySqlUnlockTablesStatementDO {
    @primary oid_: int
}
impl MySqlUnlockTablesStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlUnlockTablesStatementDO {
    	for (tmp in db.my_sql_unlock_tables_statement) {
            yield MySqlUnlockTablesStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql update plan cache statement.
 */
schema MySqlUpdatePlanCacheStatementDO {
    @primary oid_: int,
    form_select_oid_: int,
    to_select_oid_: int
}
impl MySqlUpdatePlanCacheStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlUpdatePlanCacheStatementDO {
    	for (tmp in db.my_sql_update_plan_cache_statement) {
            yield MySqlUpdatePlanCacheStatementDO {
                oid_ : tmp.oid_,
                form_select_oid_ : tmp.form_select_oid_,
                to_select_oid_ : tmp.to_select_oid_
            }
    	}
    }
    /**
     * @brief gets the form select oid of this element.
     * @return int
     */
    pub fn getFormSelectOid(self) -> int {
        return self.form_select_oid_
    }
    /**
     * @brief gets the to select oid of this element.
     * @return int
     */
    pub fn getToSelectOid(self) -> int {
        return self.to_select_oid_
    }
}
/**
 * @brief DO class: A my sql update statement.
 */
schema MySqlUpdateStatementDO {
    @primary oid_: int,
    force_partition_oid_: int,
    hints_size_: int,
    is_commit_on_success_: int,
    is_force_all_partitions_: int,
    is_ignore_: int,
    is_low_priority_: int,
    is_query_on_pk_: int,
    is_roll_back_on_fail_: int,
    limit_oid_: int,
    target_affect_row_oid_: int
}
impl MySqlUpdateStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlUpdateStatementDO {
    	for (tmp in db.my_sql_update_statement) {
            yield MySqlUpdateStatementDO {
                oid_ : tmp.oid_,
                force_partition_oid_ : tmp.force_partition_oid_,
                hints_size_ : tmp.hints_size_,
                is_commit_on_success_ : tmp.is_commit_on_success_,
                is_force_all_partitions_ : tmp.is_force_all_partitions_,
                is_ignore_ : tmp.is_ignore_,
                is_low_priority_ : tmp.is_low_priority_,
                is_query_on_pk_ : tmp.is_query_on_pk_,
                is_roll_back_on_fail_ : tmp.is_roll_back_on_fail_,
                limit_oid_ : tmp.limit_oid_,
                target_affect_row_oid_ : tmp.target_affect_row_oid_
            }
    	}
    }
    /**
     * @brief gets the force partition oid of this element.
     * @return int
     */
    pub fn getForcePartitionOid(self) -> int {
        return self.force_partition_oid_
    }
    /**
     * @brief gets the hints size of this element.
     * @return int
     */
    pub fn getHintsSize(self) -> int {
        return self.hints_size_
    }
    /**
     * @brief gets the is commit on success of this element.
     * @return int
     */
    pub fn getIsCommitOnSuccess(self) -> int {
        return self.is_commit_on_success_
    }
    /**
     * @brief gets the is force all partitions of this element.
     * @return int
     */
    pub fn getIsForceAllPartitions(self) -> int {
        return self.is_force_all_partitions_
    }
    /**
     * @brief gets the is ignore of this element.
     * @return int
     */
    pub fn getIsIgnore(self) -> int {
        return self.is_ignore_
    }
    /**
     * @brief gets the is low priority of this element.
     * @return int
     */
    pub fn getIsLowPriority(self) -> int {
        return self.is_low_priority_
    }
    /**
     * @brief gets the is query on pk of this element.
     * @return int
     */
    pub fn getIsQueryOnPk(self) -> int {
        return self.is_query_on_pk_
    }
    /**
     * @brief gets the is roll back on fail of this element.
     * @return int
     */
    pub fn getIsRollBackOnFail(self) -> int {
        return self.is_roll_back_on_fail_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the target affect row oid of this element.
     * @return int
     */
    pub fn getTargetAffectRowOid(self) -> int {
        return self.target_affect_row_oid_
    }
}
/**
 * @brief DO class: A my sql update table source.
 */
schema MySqlUpdateTableSourceDO {
    @primary oid_: int,
    update_oid_: int
}
impl MySqlUpdateTableSourceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlUpdateTableSourceDO {
    	for (tmp in db.my_sql_update_table_source) {
            yield MySqlUpdateTableSourceDO {
                oid_ : tmp.oid_,
                update_oid_ : tmp.update_oid_
            }
    	}
    }
    /**
     * @brief gets the update oid of this element.
     * @return int
     */
    pub fn getUpdateOid(self) -> int {
        return self.update_oid_
    }
}
/**
 * @brief DO class: A my sql use index hint.
 */
schema MySqlUseIndexHintDO {
    @primary oid_: int
}
impl MySqlUseIndexHintDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlUseIndexHintDO {
    	for (tmp in db.my_sql_use_index_hint) {
            yield MySqlUseIndexHintDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A my sql user name.
 */
schema MySqlUserNameDO {
    @primary oid_: int,
    host_: string,
    identified_by_: string,
    normalize_user_name_: string,
    resolved_column_oid_: int,
    simple_name_: string,
    user_name_: string
}
impl MySqlUserNameDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MySqlUserNameDO {
    	for (tmp in db.my_sql_user_name) {
            yield MySqlUserNameDO {
                oid_ : tmp.oid_,
                host_ : tmp.host_,
                identified_by_ : tmp.identified_by_,
                normalize_user_name_ : tmp.normalize_user_name_,
                resolved_column_oid_ : tmp.resolved_column_oid_,
                simple_name_ : tmp.simple_name_,
                user_name_ : tmp.user_name_
            }
    	}
    }
    /**
     * @brief gets the host of this element.
     * @return string
     */
    pub fn getHost(self) -> string {
        return self.host_
    }
    /**
     * @brief gets the identified by of this element.
     * @return string
     */
    pub fn getIdentifiedBy(self) -> string {
        return self.identified_by_
    }
    /**
     * @brief gets the normalize user name of this element.
     * @return string
     */
    pub fn getNormalizeUserName(self) -> string {
        return self.normalize_user_name_
    }
    /**
     * @brief gets the resolved column oid of this element.
     * @return int
     */
    pub fn getResolvedColumnOid(self) -> int {
        return self.resolved_column_oid_
    }
    /**
     * @brief gets the simple name of this element.
     * @return string
     */
    pub fn getSimpleName(self) -> string {
        return self.simple_name_
    }
    /**
     * @brief gets the user name of this element.
     * @return string
     */
    pub fn getUserName(self) -> string {
        return self.user_name_
    }
}
/**
 * @brief DO class: A mysql alter full text statement.
 */
schema MysqlAlterFullTextStatementDO {
    @primary oid_: int,
    item_oid_: int,
    name_oid_: int,
    type_: string
}
impl MysqlAlterFullTextStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlAlterFullTextStatementDO {
    	for (tmp in db.mysql_alter_full_text_statement) {
            yield MysqlAlterFullTextStatementDO {
                oid_ : tmp.oid_,
                item_oid_ : tmp.item_oid_,
                name_oid_ : tmp.name_oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the item oid of this element.
     * @return int
     */
    pub fn getItemOid(self) -> int {
        return self.item_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A mysql alter table alter check.
 */
schema MysqlAlterTableAlterCheckDO {
    @primary oid_: int,
    enforced_: int,
    name_oid_: int
}
impl MysqlAlterTableAlterCheckDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlAlterTableAlterCheckDO {
    	for (tmp in db.mysql_alter_table_alter_check) {
            yield MysqlAlterTableAlterCheckDO {
                oid_ : tmp.oid_,
                enforced_ : tmp.enforced_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the enforced of this element.
     * @return int
     */
    pub fn getEnforced(self) -> int {
        return self.enforced_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A mysql create full text analyzer statement.
 */
schema MysqlCreateFullTextAnalyzerStatementDO {
    @primary oid_: int,
    charfilters_: string,
    name_oid_: int,
    tokenizer_: string,
    tokenizers_: string
}
impl MysqlCreateFullTextAnalyzerStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlCreateFullTextAnalyzerStatementDO {
    	for (tmp in db.mysql_create_full_text_analyzer_statement) {
            yield MysqlCreateFullTextAnalyzerStatementDO {
                oid_ : tmp.oid_,
                charfilters_ : tmp.charfilters_,
                name_oid_ : tmp.name_oid_,
                tokenizer_ : tmp.tokenizer_,
                tokenizers_ : tmp.tokenizers_
            }
    	}
    }
    /**
     * @brief gets the charfilters of this element.
     * @return string
     */
    pub fn getCharfilters(self) -> string {
        return self.charfilters_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the tokenizer of this element.
     * @return string
     */
    pub fn getTokenizer(self) -> string {
        return self.tokenizer_
    }
    /**
     * @brief gets the tokenizers of this element.
     * @return string
     */
    pub fn getTokenizers(self) -> string {
        return self.tokenizers_
    }
}
/**
 * @brief DO class: A mysql create full text char filter statement.
 */
schema MysqlCreateFullTextCharFilterStatementDO {
    @primary oid_: int,
    name_oid_: int,
    type_name_oid_: int
}
impl MysqlCreateFullTextCharFilterStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlCreateFullTextCharFilterStatementDO {
    	for (tmp in db.mysql_create_full_text_char_filter_statement) {
            yield MysqlCreateFullTextCharFilterStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_,
                type_name_oid_ : tmp.type_name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the type name oid of this element.
     * @return int
     */
    pub fn getTypeNameOid(self) -> int {
        return self.type_name_oid_
    }
}
/**
 * @brief DO class: A mysql create full text dictionary statement.
 */
schema MysqlCreateFullTextDictionaryStatementDO {
    @primary oid_: int,
    column_oid_: int,
    comment_: string,
    name_oid_: int
}
impl MysqlCreateFullTextDictionaryStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlCreateFullTextDictionaryStatementDO {
    	for (tmp in db.mysql_create_full_text_dictionary_statement) {
            yield MysqlCreateFullTextDictionaryStatementDO {
                oid_ : tmp.oid_,
                column_oid_ : tmp.column_oid_,
                comment_ : tmp.comment_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the column oid of this element.
     * @return int
     */
    pub fn getColumnOid(self) -> int {
        return self.column_oid_
    }
    /**
     * @brief gets the comment of this element.
     * @return string
     */
    pub fn getComment(self) -> string {
        return self.comment_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A mysql create full text token filter statement.
 */
schema MysqlCreateFullTextTokenFilterStatementDO {
    @primary oid_: int,
    name_oid_: int,
    type_name_oid_: int
}
impl MysqlCreateFullTextTokenFilterStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlCreateFullTextTokenFilterStatementDO {
    	for (tmp in db.mysql_create_full_text_token_filter_statement) {
            yield MysqlCreateFullTextTokenFilterStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_,
                type_name_oid_ : tmp.type_name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the type name oid of this element.
     * @return int
     */
    pub fn getTypeNameOid(self) -> int {
        return self.type_name_oid_
    }
}
/**
 * @brief DO class: A mysql create full text tokenizer statement.
 */
schema MysqlCreateFullTextTokenizerStatementDO {
    @primary oid_: int,
    name_oid_: int,
    type_name_oid_: int,
    user_defined_dict_oid_: int
}
impl MysqlCreateFullTextTokenizerStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlCreateFullTextTokenizerStatementDO {
    	for (tmp in db.mysql_create_full_text_tokenizer_statement) {
            yield MysqlCreateFullTextTokenizerStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_,
                type_name_oid_ : tmp.type_name_oid_,
                user_defined_dict_oid_ : tmp.user_defined_dict_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the type name oid of this element.
     * @return int
     */
    pub fn getTypeNameOid(self) -> int {
        return self.type_name_oid_
    }
    /**
     * @brief gets the user defined dict oid of this element.
     * @return int
     */
    pub fn getUserDefinedDictOid(self) -> int {
        return self.user_defined_dict_oid_
    }
}
/**
 * @brief DO class: A mysql deallocate prepare statement.
 */
schema MysqlDeallocatePrepareStatementDO {
    @primary oid_: int,
    statement_name_oid_: int
}
impl MysqlDeallocatePrepareStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlDeallocatePrepareStatementDO {
    	for (tmp in db.mysql_deallocate_prepare_statement) {
            yield MysqlDeallocatePrepareStatementDO {
                oid_ : tmp.oid_,
                statement_name_oid_ : tmp.statement_name_oid_
            }
    	}
    }
    /**
     * @brief gets the statement name oid of this element.
     * @return int
     */
    pub fn getStatementNameOid(self) -> int {
        return self.statement_name_oid_
    }
}
/**
 * @brief DO class: A mysql drop full text statement.
 */
schema MysqlDropFullTextStatementDO {
    @primary oid_: int,
    name_oid_: int,
    type_: string
}
impl MysqlDropFullTextStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlDropFullTextStatementDO {
    	for (tmp in db.mysql_drop_full_text_statement) {
            yield MysqlDropFullTextStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A mysql foreign key.
 */
schema MysqlForeignKeyDO {
    @primary oid_: int,
    index_name_oid_: int,
    is_has_constraint_: int,
    on_delete_: string,
    on_update_: string,
    reference_match_: string
}
impl MysqlForeignKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlForeignKeyDO {
    	for (tmp in db.mysql_foreign_key) {
            yield MysqlForeignKeyDO {
                oid_ : tmp.oid_,
                index_name_oid_ : tmp.index_name_oid_,
                is_has_constraint_ : tmp.is_has_constraint_,
                on_delete_ : tmp.on_delete_,
                on_update_ : tmp.on_update_,
                reference_match_ : tmp.reference_match_
            }
    	}
    }
    /**
     * @brief gets the index name oid of this element.
     * @return int
     */
    pub fn getIndexNameOid(self) -> int {
        return self.index_name_oid_
    }
    /**
     * @brief gets the is has constraint of this element.
     * @return int
     */
    pub fn getIsHasConstraint(self) -> int {
        return self.is_has_constraint_
    }
    /**
     * @brief gets the on delete of this element.
     * @return string
     */
    pub fn getOnDelete(self) -> string {
        return self.on_delete_
    }
    /**
     * @brief gets the on update of this element.
     * @return string
     */
    pub fn getOnUpdate(self) -> string {
        return self.on_update_
    }
    /**
     * @brief gets the reference match of this element.
     * @return string
     */
    pub fn getReferenceMatch(self) -> string {
        return self.reference_match_
    }
}
/**
 * @brief DO class: A mysql show create full text statement.
 */
schema MysqlShowCreateFullTextStatementDO {
    @primary oid_: int,
    name_oid_: int,
    type_: string
}
impl MysqlShowCreateFullTextStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlShowCreateFullTextStatementDO {
    	for (tmp in db.mysql_show_create_full_text_statement) {
            yield MysqlShowCreateFullTextStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A mysql show db lock statement.
 */
schema MysqlShowDbLockStatementDO {
    @primary oid_: int
}
impl MysqlShowDbLockStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlShowDbLockStatementDO {
    	for (tmp in db.mysql_show_db_lock_statement) {
            yield MysqlShowDbLockStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A mysql show full text statement.
 */
schema MysqlShowFullTextStatementDO {
    @primary oid_: int,
    type_: string
}
impl MysqlShowFullTextStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlShowFullTextStatementDO {
    	for (tmp in db.mysql_show_full_text_statement) {
            yield MysqlShowFullTextStatementDO {
                oid_ : tmp.oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A mysql show htc statement.
 */
schema MysqlShowHtcStatementDO {
    @primary oid_: int,
    is_full_: int,
    is_his_: int
}
impl MysqlShowHtcStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlShowHtcStatementDO {
    	for (tmp in db.mysql_show_htc_statement) {
            yield MysqlShowHtcStatementDO {
                oid_ : tmp.oid_,
                is_full_ : tmp.is_full_,
                is_his_ : tmp.is_his_
            }
    	}
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the is his of this element.
     * @return int
     */
    pub fn getIsHis(self) -> int {
        return self.is_his_
    }
}
/**
 * @brief DO class: A mysql show stc statement.
 */
schema MysqlShowStcStatementDO {
    @primary oid_: int,
    is_full_: int,
    is_his_: int
}
impl MysqlShowStcStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *MysqlShowStcStatementDO {
    	for (tmp in db.mysql_show_stc_statement) {
            yield MysqlShowStcStatementDO {
                oid_ : tmp.oid_,
                is_full_ : tmp.is_full_,
                is_his_ : tmp.is_his_
            }
    	}
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the is his of this element.
     * @return int
     */
    pub fn getIsHis(self) -> int {
        return self.is_his_
    }
}
/**
 * @brief DO class: An odps add account provider statement.
 */
schema OdpsAddAccountProviderStatementDO {
    @primary oid_: int,
    provider_oid_: int
}
impl OdpsAddAccountProviderStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsAddAccountProviderStatementDO {
    	for (tmp in db.odps_add_account_provider_statement) {
            yield OdpsAddAccountProviderStatementDO {
                oid_ : tmp.oid_,
                provider_oid_ : tmp.provider_oid_
            }
    	}
    }
    /**
     * @brief gets the provider oid of this element.
     * @return int
     */
    pub fn getProviderOid(self) -> int {
        return self.provider_oid_
    }
}
/**
 * @brief DO class: An odps add file statement.
 */
schema OdpsAddFileStatementDO {
    @primary oid_: int,
    alias_: string,
    comment_oid_: int,
    file_: string,
    is_force_: int,
    type_: string
}
impl OdpsAddFileStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsAddFileStatementDO {
    	for (tmp in db.odps_add_file_statement) {
            yield OdpsAddFileStatementDO {
                oid_ : tmp.oid_,
                alias_ : tmp.alias_,
                comment_oid_ : tmp.comment_oid_,
                file_ : tmp.file_,
                is_force_ : tmp.is_force_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the alias of this element.
     * @return string
     */
    pub fn getAlias(self) -> string {
        return self.alias_
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the file of this element.
     * @return string
     */
    pub fn getFile(self) -> string {
        return self.file_
    }
    /**
     * @brief gets the is force of this element.
     * @return int
     */
    pub fn getIsForce(self) -> int {
        return self.is_force_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: An odps add statistic statement.
 */
schema OdpsAddStatisticStatementDO {
    @primary oid_: int,
    statistic_clause_oid_: int,
    table_oid_: int
}
impl OdpsAddStatisticStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsAddStatisticStatementDO {
    	for (tmp in db.odps_add_statistic_statement) {
            yield OdpsAddStatisticStatementDO {
                oid_ : tmp.oid_,
                statistic_clause_oid_ : tmp.statistic_clause_oid_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the statistic clause oid of this element.
     * @return int
     */
    pub fn getStatisticClauseOid(self) -> int {
        return self.statistic_clause_oid_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: An odps add table statement.
 */
schema OdpsAddTableStatementDO {
    @primary oid_: int,
    comment_oid_: int,
    is_force_: int,
    table_oid_: int,
    to_package_oid_: int
}
impl OdpsAddTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsAddTableStatementDO {
    	for (tmp in db.odps_add_table_statement) {
            yield OdpsAddTableStatementDO {
                oid_ : tmp.oid_,
                comment_oid_ : tmp.comment_oid_,
                is_force_ : tmp.is_force_,
                table_oid_ : tmp.table_oid_,
                to_package_oid_ : tmp.to_package_oid_
            }
    	}
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the is force of this element.
     * @return int
     */
    pub fn getIsForce(self) -> int {
        return self.is_force_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
    /**
     * @brief gets the to package oid of this element.
     * @return int
     */
    pub fn getToPackageOid(self) -> int {
        return self.to_package_oid_
    }
}
/**
 * @brief DO class: An odps add user statement.
 */
schema OdpsAddUserStatementDO {
    @primary oid_: int,
    user_oid_: int
}
impl OdpsAddUserStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsAddUserStatementDO {
    	for (tmp in db.odps_add_user_statement) {
            yield OdpsAddUserStatementDO {
                oid_ : tmp.oid_,
                user_oid_ : tmp.user_oid_
            }
    	}
    }
    /**
     * @brief gets the user oid of this element.
     * @return int
     */
    pub fn getUserOid(self) -> int {
        return self.user_oid_
    }
}
/**
 * @brief DO class: An odps alter table set change logs.
 */
schema OdpsAlterTableSetChangeLogsDO {
    @primary oid_: int,
    value_oid_: int
}
impl OdpsAlterTableSetChangeLogsDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsAlterTableSetChangeLogsDO {
    	for (tmp in db.odps_alter_table_set_change_logs) {
            yield OdpsAlterTableSetChangeLogsDO {
                oid_ : tmp.oid_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: An odps alter table set file format.
 */
schema OdpsAlterTableSetFileFormatDO {
    @primary oid_: int,
    value_oid_: int
}
impl OdpsAlterTableSetFileFormatDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsAlterTableSetFileFormatDO {
    	for (tmp in db.odps_alter_table_set_file_format) {
            yield OdpsAlterTableSetFileFormatDO {
                oid_ : tmp.oid_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: An odps count statement.
 */
schema OdpsCountStatementDO {
    @primary oid_: int,
    table_oid_: int
}
impl OdpsCountStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsCountStatementDO {
    	for (tmp in db.odps_count_statement) {
            yield OdpsCountStatementDO {
                oid_ : tmp.oid_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: An odps create table statement.
 */
schema OdpsCreateTableStatementDO {
    @primary oid_: int,
    lifecycle_oid_: int,
    like_oid_: int,
    stored_by_oid_: int
}
impl OdpsCreateTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsCreateTableStatementDO {
    	for (tmp in db.odps_create_table_statement) {
            yield OdpsCreateTableStatementDO {
                oid_ : tmp.oid_,
                lifecycle_oid_ : tmp.lifecycle_oid_,
                like_oid_ : tmp.like_oid_,
                stored_by_oid_ : tmp.stored_by_oid_
            }
    	}
    }
    /**
     * @brief gets the lifecycle oid of this element.
     * @return int
     */
    pub fn getLifecycleOid(self) -> int {
        return self.lifecycle_oid_
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the stored by oid of this element.
     * @return int
     */
    pub fn getStoredByOid(self) -> int {
        return self.stored_by_oid_
    }
}
/**
 * @brief DO class: An odps declare variable statement.
 */
schema OdpsDeclareVariableStatementDO {
    @primary oid_: int,
    data_type_oid_: int,
    init_value_oid_: int,
    variant_: string
}
impl OdpsDeclareVariableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsDeclareVariableStatementDO {
    	for (tmp in db.odps_declare_variable_statement) {
            yield OdpsDeclareVariableStatementDO {
                oid_ : tmp.oid_,
                data_type_oid_ : tmp.data_type_oid_,
                init_value_oid_ : tmp.init_value_oid_,
                variant_ : tmp.variant_
            }
    	}
    }
    /**
     * @brief gets the data type oid of this element.
     * @return int
     */
    pub fn getDataTypeOid(self) -> int {
        return self.data_type_oid_
    }
    /**
     * @brief gets the init value oid of this element.
     * @return int
     */
    pub fn getInitValueOid(self) -> int {
        return self.init_value_oid_
    }
    /**
     * @brief gets the variant of this element.
     * @return string
     */
    pub fn getVariant(self) -> string {
        return self.variant_
    }
}
/**
 * @brief DO class: An odps exstore statement.
 */
schema OdpsExstoreStatementDO {
    @primary oid_: int,
    table_oid_: int
}
impl OdpsExstoreStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsExstoreStatementDO {
    	for (tmp in db.odps_exstore_statement) {
            yield OdpsExstoreStatementDO {
                oid_ : tmp.oid_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: An odps grant stmt.
 */
schema OdpsGrantStmtDO {
    @primary oid_: int,
    expire_oid_: int,
    is_label_: int,
    is_super_: int,
    label_oid_: int,
    subject_type_: string
}
impl OdpsGrantStmtDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsGrantStmtDO {
    	for (tmp in db.odps_grant_stmt) {
            yield OdpsGrantStmtDO {
                oid_ : tmp.oid_,
                expire_oid_ : tmp.expire_oid_,
                is_label_ : tmp.is_label_,
                is_super_ : tmp.is_super_,
                label_oid_ : tmp.label_oid_,
                subject_type_ : tmp.subject_type_
            }
    	}
    }
    /**
     * @brief gets the expire oid of this element.
     * @return int
     */
    pub fn getExpireOid(self) -> int {
        return self.expire_oid_
    }
    /**
     * @brief gets the is label of this element.
     * @return int
     */
    pub fn getIsLabel(self) -> int {
        return self.is_label_
    }
    /**
     * @brief gets the is super of this element.
     * @return int
     */
    pub fn getIsSuper(self) -> int {
        return self.is_super_
    }
    /**
     * @brief gets the label oid of this element.
     * @return int
     */
    pub fn getLabelOid(self) -> int {
        return self.label_oid_
    }
    /**
     * @brief gets the subject type of this element.
     * @return string
     */
    pub fn getSubjectType(self) -> string {
        return self.subject_type_
    }
}
/**
 * @brief DO class: An odps install package statement.
 */
schema OdpsInstallPackageStatementDO {
    @primary oid_: int,
    package_name_oid_: int
}
impl OdpsInstallPackageStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsInstallPackageStatementDO {
    	for (tmp in db.odps_install_package_statement) {
            yield OdpsInstallPackageStatementDO {
                oid_ : tmp.oid_,
                package_name_oid_ : tmp.package_name_oid_
            }
    	}
    }
    /**
     * @brief gets the package name oid of this element.
     * @return int
     */
    pub fn getPackageNameOid(self) -> int {
        return self.package_name_oid_
    }
}
/**
 * @brief DO class: An odps list stmt.
 */
schema OdpsListStmtDO {
    @primary oid_: int,
    object_oid_: int
}
impl OdpsListStmtDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsListStmtDO {
    	for (tmp in db.odps_list_stmt) {
            yield OdpsListStmtDO {
                oid_ : tmp.oid_,
                object_oid_ : tmp.object_oid_
            }
    	}
    }
    /**
     * @brief gets the object oid of this element.
     * @return int
     */
    pub fn getObjectOid(self) -> int {
        return self.object_oid_
    }
}
/**
 * @brief DO class: An odps new expr.
 */
schema OdpsNewExprDO {
    @primary oid_: int,
    is_array_: int
}
impl OdpsNewExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsNewExprDO {
    	for (tmp in db.odps_new_expr) {
            yield OdpsNewExprDO {
                oid_ : tmp.oid_,
                is_array_ : tmp.is_array_
            }
    	}
    }
    /**
     * @brief gets the is array of this element.
     * @return int
     */
    pub fn getIsArray(self) -> int {
        return self.is_array_
    }
}
/**
 * @brief DO class: An odps object impl.
 */
schema OdpsObjectImplDO {
    @primary oid_: int
}
impl OdpsObjectImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsObjectImplDO {
    	for (tmp in db.odps_object_impl) {
            yield OdpsObjectImplDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An odps query alias statement.
 */
schema OdpsQueryAliasStatementDO {
    @primary oid_: int,
    is_cache_: int,
    statement_oid_: int,
    variant_: string
}
impl OdpsQueryAliasStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsQueryAliasStatementDO {
    	for (tmp in db.odps_query_alias_statement) {
            yield OdpsQueryAliasStatementDO {
                oid_ : tmp.oid_,
                is_cache_ : tmp.is_cache_,
                statement_oid_ : tmp.statement_oid_,
                variant_ : tmp.variant_
            }
    	}
    }
    /**
     * @brief gets the is cache of this element.
     * @return int
     */
    pub fn getIsCache(self) -> int {
        return self.is_cache_
    }
    /**
     * @brief gets the statement oid of this element.
     * @return int
     */
    pub fn getStatementOid(self) -> int {
        return self.statement_oid_
    }
    /**
     * @brief gets the variant of this element.
     * @return string
     */
    pub fn getVariant(self) -> string {
        return self.variant_
    }
}
/**
 * @brief DO class: An odps read statement.
 */
schema OdpsReadStatementDO {
    @primary oid_: int,
    row_count_oid_: int,
    table_oid_: int
}
impl OdpsReadStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsReadStatementDO {
    	for (tmp in db.odps_read_statement) {
            yield OdpsReadStatementDO {
                oid_ : tmp.oid_,
                row_count_oid_ : tmp.row_count_oid_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the row count oid of this element.
     * @return int
     */
    pub fn getRowCountOid(self) -> int {
        return self.row_count_oid_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: An odps remove statistic statement.
 */
schema OdpsRemoveStatisticStatementDO {
    @primary oid_: int,
    statistic_clause_oid_: int,
    table_oid_: int
}
impl OdpsRemoveStatisticStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsRemoveStatisticStatementDO {
    	for (tmp in db.odps_remove_statistic_statement) {
            yield OdpsRemoveStatisticStatementDO {
                oid_ : tmp.oid_,
                statistic_clause_oid_ : tmp.statistic_clause_oid_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the statistic clause oid of this element.
     * @return int
     */
    pub fn getStatisticClauseOid(self) -> int {
        return self.statistic_clause_oid_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: An odps remove user statement.
 */
schema OdpsRemoveUserStatementDO {
    @primary oid_: int,
    user_oid_: int
}
impl OdpsRemoveUserStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsRemoveUserStatementDO {
    	for (tmp in db.odps_remove_user_statement) {
            yield OdpsRemoveUserStatementDO {
                oid_ : tmp.oid_,
                user_oid_ : tmp.user_oid_
            }
    	}
    }
    /**
     * @brief gets the user oid of this element.
     * @return int
     */
    pub fn getUserOid(self) -> int {
        return self.user_oid_
    }
}
/**
 * @brief DO class: An odps restore statement.
 */
schema OdpsRestoreStatementDO {
    @primary oid_: int,
    alias_: string,
    table_oid_: int,
    to_oid_: int
}
impl OdpsRestoreStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsRestoreStatementDO {
    	for (tmp in db.odps_restore_statement) {
            yield OdpsRestoreStatementDO {
                oid_ : tmp.oid_,
                alias_ : tmp.alias_,
                table_oid_ : tmp.table_oid_,
                to_oid_ : tmp.to_oid_
            }
    	}
    }
    /**
     * @brief gets the alias of this element.
     * @return string
     */
    pub fn getAlias(self) -> string {
        return self.alias_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
}
/**
 * @brief DO class: An odps select query block.
 */
schema OdpsSelectQueryBlockDO {
    @primary oid_: int,
    z_order_by_oid_: int
}
impl OdpsSelectQueryBlockDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsSelectQueryBlockDO {
    	for (tmp in db.odps_select_query_block) {
            yield OdpsSelectQueryBlockDO {
                oid_ : tmp.oid_,
                z_order_by_oid_ : tmp.z_order_by_oid_
            }
    	}
    }
    /**
     * @brief gets the z order by oid of this element.
     * @return int
     */
    pub fn getZOrderByOid(self) -> int {
        return self.z_order_by_oid_
    }
}
/**
 * @brief DO class: An odps set label statement.
 */
schema OdpsSetLabelStatementDO {
    @primary oid_: int,
    label_: string,
    project_oid_: int,
    table_oid_: int,
    user_oid_: int
}
impl OdpsSetLabelStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsSetLabelStatementDO {
    	for (tmp in db.odps_set_label_statement) {
            yield OdpsSetLabelStatementDO {
                oid_ : tmp.oid_,
                label_ : tmp.label_,
                project_oid_ : tmp.project_oid_,
                table_oid_ : tmp.table_oid_,
                user_oid_ : tmp.user_oid_
            }
    	}
    }
    /**
     * @brief gets the label of this element.
     * @return string
     */
    pub fn getLabel(self) -> string {
        return self.label_
    }
    /**
     * @brief gets the project oid of this element.
     * @return int
     */
    pub fn getProjectOid(self) -> int {
        return self.project_oid_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
    /**
     * @brief gets the user oid of this element.
     * @return int
     */
    pub fn getUserOid(self) -> int {
        return self.user_oid_
    }
}
/**
 * @brief DO class: An odps show changelogs statement.
 */
schema OdpsShowChangelogsStatementDO {
    @primary oid_: int,
    id_oid_: int,
    is_tables_: int,
    table_oid_: int
}
impl OdpsShowChangelogsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsShowChangelogsStatementDO {
    	for (tmp in db.odps_show_changelogs_statement) {
            yield OdpsShowChangelogsStatementDO {
                oid_ : tmp.oid_,
                id_oid_ : tmp.id_oid_,
                is_tables_ : tmp.is_tables_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the id oid of this element.
     * @return int
     */
    pub fn getIdOid(self) -> int {
        return self.id_oid_
    }
    /**
     * @brief gets the is tables of this element.
     * @return int
     */
    pub fn getIsTables(self) -> int {
        return self.is_tables_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: An odps show grants stmt.
 */
schema OdpsShowGrantsStmtDO {
    @primary oid_: int,
    is_label_: int,
    object_type_oid_: int,
    user_oid_: int
}
impl OdpsShowGrantsStmtDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsShowGrantsStmtDO {
    	for (tmp in db.odps_show_grants_stmt) {
            yield OdpsShowGrantsStmtDO {
                oid_ : tmp.oid_,
                is_label_ : tmp.is_label_,
                object_type_oid_ : tmp.object_type_oid_,
                user_oid_ : tmp.user_oid_
            }
    	}
    }
    /**
     * @brief gets the is label of this element.
     * @return int
     */
    pub fn getIsLabel(self) -> int {
        return self.is_label_
    }
    /**
     * @brief gets the object type oid of this element.
     * @return int
     */
    pub fn getObjectTypeOid(self) -> int {
        return self.object_type_oid_
    }
    /**
     * @brief gets the user oid of this element.
     * @return int
     */
    pub fn getUserOid(self) -> int {
        return self.user_oid_
    }
}
/**
 * @brief DO class: An odps statement impl.
 */
schema OdpsStatementImplDO {
    @primary oid_: int
}
impl OdpsStatementImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsStatementImplDO {
    	for (tmp in db.odps_statement_impl) {
            yield OdpsStatementImplDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An odps statistic clause.
 */
schema OdpsStatisticClauseDO {
    @primary oid_: int
}
impl OdpsStatisticClauseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsStatisticClauseDO {
    	for (tmp in db.odps_statistic_clause) {
            yield OdpsStatisticClauseDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An odps transform expr.
 */
schema OdpsTransformExprDO {
    @primary oid_: int,
    input_row_format_oid_: int,
    output_row_format_oid_: int,
    using_oid_: int
}
impl OdpsTransformExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsTransformExprDO {
    	for (tmp in db.odps_transform_expr) {
            yield OdpsTransformExprDO {
                oid_ : tmp.oid_,
                input_row_format_oid_ : tmp.input_row_format_oid_,
                output_row_format_oid_ : tmp.output_row_format_oid_,
                using_oid_ : tmp.using_oid_
            }
    	}
    }
    /**
     * @brief gets the input row format oid of this element.
     * @return int
     */
    pub fn getInputRowFormatOid(self) -> int {
        return self.input_row_format_oid_
    }
    /**
     * @brief gets the output row format oid of this element.
     * @return int
     */
    pub fn getOutputRowFormatOid(self) -> int {
        return self.output_row_format_oid_
    }
    /**
     * @brief gets the using oid of this element.
     * @return int
     */
    pub fn getUsingOid(self) -> int {
        return self.using_oid_
    }
}
/**
 * @brief DO class: An odps udtfsql select item.
 */
schema OdpsUdtfsqlSelectItemDO {
    @primary oid_: int
}
impl OdpsUdtfsqlSelectItemDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsUdtfsqlSelectItemDO {
    	for (tmp in db.odps_udtfsql_select_item) {
            yield OdpsUdtfsqlSelectItemDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An odps undo table statement.
 */
schema OdpsUndoTableStatementDO {
    @primary oid_: int,
    table_oid_: int,
    to_oid_: int
}
impl OdpsUndoTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsUndoTableStatementDO {
    	for (tmp in db.odps_undo_table_statement) {
            yield OdpsUndoTableStatementDO {
                oid_ : tmp.oid_,
                table_oid_ : tmp.table_oid_,
                to_oid_ : tmp.to_oid_
            }
    	}
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
}
/**
 * @brief DO class: An odps unload statement.
 */
schema OdpsUnloadStatementDO {
    @primary oid_: int,
    from_oid_: int,
    location_oid_: int,
    row_format_oid_: int,
    stored_as_oid_: int
}
impl OdpsUnloadStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OdpsUnloadStatementDO {
    	for (tmp in db.odps_unload_statement) {
            yield OdpsUnloadStatementDO {
                oid_ : tmp.oid_,
                from_oid_ : tmp.from_oid_,
                location_oid_ : tmp.location_oid_,
                row_format_oid_ : tmp.row_format_oid_,
                stored_as_oid_ : tmp.stored_as_oid_
            }
    	}
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the location oid of this element.
     * @return int
     */
    pub fn getLocationOid(self) -> int {
        return self.location_oid_
    }
    /**
     * @brief gets the row format oid of this element.
     * @return int
     */
    pub fn getRowFormatOid(self) -> int {
        return self.row_format_oid_
    }
    /**
     * @brief gets the stored as oid of this element.
     * @return int
     */
    pub fn getStoredAsOid(self) -> int {
        return self.stored_as_oid_
    }
}
/**
 * @brief DO class: An oracle alter session statement.
 */
schema OracleAlterSessionStatementDO {
    @primary oid_: int
}
impl OracleAlterSessionStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleAlterSessionStatementDO {
    	for (tmp in db.oracle_alter_session_statement) {
            yield OracleAlterSessionStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An oracle alter synonym statement.
 */
schema OracleAlterSynonymStatementDO {
    @primary oid_: int,
    enable_: int,
    is_compile_: int,
    name_oid_: int
}
impl OracleAlterSynonymStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleAlterSynonymStatementDO {
    	for (tmp in db.oracle_alter_synonym_statement) {
            yield OracleAlterSynonymStatementDO {
                oid_ : tmp.oid_,
                enable_ : tmp.enable_,
                is_compile_ : tmp.is_compile_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the enable of this element.
     * @return int
     */
    pub fn getEnable(self) -> int {
        return self.enable_
    }
    /**
     * @brief gets the is compile of this element.
     * @return int
     */
    pub fn getIsCompile(self) -> int {
        return self.is_compile_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: An oracle alter table drop partition.
 */
schema OracleAlterTableDropPartitionDO {
    @primary oid_: int,
    name_oid_: int
}
impl OracleAlterTableDropPartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleAlterTableDropPartitionDO {
    	for (tmp in db.oracle_alter_table_drop_partition) {
            yield OracleAlterTableDropPartitionDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: An oracle alter table item.
 */
schema OracleAlterTableItemDO {
    @primary oid_: int
}
impl OracleAlterTableItemDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleAlterTableItemDO {
    	for (tmp in db.oracle_alter_table_item) {
            yield OracleAlterTableItemDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An oracle alter table modify.
 */
schema OracleAlterTableModifyDO {
    @primary oid_: int
}
impl OracleAlterTableModifyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleAlterTableModifyDO {
    	for (tmp in db.oracle_alter_table_modify) {
            yield OracleAlterTableModifyDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An oracle alter table move tablespace.
 */
schema OracleAlterTableMoveTablespaceDO {
    @primary oid_: int,
    name_oid_: int
}
impl OracleAlterTableMoveTablespaceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleAlterTableMoveTablespaceDO {
    	for (tmp in db.oracle_alter_table_move_tablespace) {
            yield OracleAlterTableMoveTablespaceDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: An oracle alter table split partition.
 */
schema OracleAlterTableSplitPartitionDO {
    @primary oid_: int,
    into_: string,
    name_oid_: int,
    update_indexes_: string
}
impl OracleAlterTableSplitPartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleAlterTableSplitPartitionDO {
    	for (tmp in db.oracle_alter_table_split_partition) {
            yield OracleAlterTableSplitPartitionDO {
                oid_ : tmp.oid_,
                into_ : tmp.into_,
                name_oid_ : tmp.name_oid_,
                update_indexes_ : tmp.update_indexes_
            }
    	}
    }
    /**
     * @brief gets the into of this element.
     * @return string
     */
    pub fn getInto(self) -> string {
        return self.into_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the update indexes of this element.
     * @return string
     */
    pub fn getUpdateIndexes(self) -> string {
        return self.update_indexes_
    }
}
/**
 * @brief DO class: An oracle alter table truncate partition.
 */
schema OracleAlterTableTruncatePartitionDO {
    @primary oid_: int,
    name_oid_: int
}
impl OracleAlterTableTruncatePartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleAlterTableTruncatePartitionDO {
    	for (tmp in db.oracle_alter_table_truncate_partition) {
            yield OracleAlterTableTruncatePartitionDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: An oracle alter tablespace add data file.
 */
schema OracleAlterTablespaceAddDataFileDO {
    @primary oid_: int
}
impl OracleAlterTablespaceAddDataFileDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleAlterTablespaceAddDataFileDO {
    	for (tmp in db.oracle_alter_tablespace_add_data_file) {
            yield OracleAlterTablespaceAddDataFileDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An oracle alter tablespace statement.
 */
schema OracleAlterTablespaceStatementDO {
    @primary oid_: int,
    item_oid_: int,
    name_oid_: int
}
impl OracleAlterTablespaceStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleAlterTablespaceStatementDO {
    	for (tmp in db.oracle_alter_tablespace_statement) {
            yield OracleAlterTablespaceStatementDO {
                oid_ : tmp.oid_,
                item_oid_ : tmp.item_oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the item oid of this element.
     * @return int
     */
    pub fn getItemOid(self) -> int {
        return self.item_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: An oracle alter trigger statement.
 */
schema OracleAlterTriggerStatementDO {
    @primary oid_: int,
    enable_: int,
    is_compile_: int,
    name_oid_: int
}
impl OracleAlterTriggerStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleAlterTriggerStatementDO {
    	for (tmp in db.oracle_alter_trigger_statement) {
            yield OracleAlterTriggerStatementDO {
                oid_ : tmp.oid_,
                enable_ : tmp.enable_,
                is_compile_ : tmp.is_compile_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the enable of this element.
     * @return int
     */
    pub fn getEnable(self) -> int {
        return self.enable_
    }
    /**
     * @brief gets the is compile of this element.
     * @return int
     */
    pub fn getIsCompile(self) -> int {
        return self.is_compile_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: An oracle alter view statement.
 */
schema OracleAlterViewStatementDO {
    @primary oid_: int,
    enable_: int,
    is_compile_: int,
    name_oid_: int
}
impl OracleAlterViewStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleAlterViewStatementDO {
    	for (tmp in db.oracle_alter_view_statement) {
            yield OracleAlterViewStatementDO {
                oid_ : tmp.oid_,
                enable_ : tmp.enable_,
                is_compile_ : tmp.is_compile_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the enable of this element.
     * @return int
     */
    pub fn getEnable(self) -> int {
        return self.enable_
    }
    /**
     * @brief gets the is compile of this element.
     * @return int
     */
    pub fn getIsCompile(self) -> int {
        return self.is_compile_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: An oracle analytic.
 */
schema OracleAnalyticDO {
    @primary oid_: int,
    windowing_oid_: int
}
impl OracleAnalyticDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleAnalyticDO {
    	for (tmp in db.oracle_analytic) {
            yield OracleAnalyticDO {
                oid_ : tmp.oid_,
                windowing_oid_ : tmp.windowing_oid_
            }
    	}
    }
    /**
     * @brief gets the windowing oid of this element.
     * @return int
     */
    pub fn getWindowingOid(self) -> int {
        return self.windowing_oid_
    }
}
/**
 * @brief DO class: An oracle analytic windowing.
 */
schema OracleAnalyticWindowingDO {
    @primary oid_: int,
    expr_oid_: int,
    type_: string
}
impl OracleAnalyticWindowingDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleAnalyticWindowingDO {
    	for (tmp in db.oracle_analytic_windowing) {
            yield OracleAnalyticWindowingDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: An oracle argument expr.
 */
schema OracleArgumentExprDO {
    @primary oid_: int,
    argument_name_: string,
    value_oid_: int
}
impl OracleArgumentExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleArgumentExprDO {
    	for (tmp in db.oracle_argument_expr) {
            yield OracleArgumentExprDO {
                oid_ : tmp.oid_,
                argument_name_ : tmp.argument_name_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the argument name of this element.
     * @return string
     */
    pub fn getArgumentName(self) -> string {
        return self.argument_name_
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: An oracle binary double expr.
 */
schema OracleBinaryDoubleExprDO {
    @primary oid_: int,
    number_: string,
    value_: string
}
impl OracleBinaryDoubleExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleBinaryDoubleExprDO {
    	for (tmp in db.oracle_binary_double_expr) {
            yield OracleBinaryDoubleExprDO {
                oid_ : tmp.oid_,
                number_ : tmp.number_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the number of this element.
     * @return string
     */
    pub fn getNumber(self) -> string {
        return self.number_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: An oracle binary float expr.
 */
schema OracleBinaryFloatExprDO {
    @primary oid_: int,
    number_: string,
    value_: string
}
impl OracleBinaryFloatExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleBinaryFloatExprDO {
    	for (tmp in db.oracle_binary_float_expr) {
            yield OracleBinaryFloatExprDO {
                oid_ : tmp.oid_,
                number_ : tmp.number_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the number of this element.
     * @return string
     */
    pub fn getNumber(self) -> string {
        return self.number_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: An oracle check.
 */
schema OracleCheckDO {
    @primary oid_: int,
    deferrable_: int,
    exceptions_into_oid_: int,
    initially_: string,
    using_oid_: int
}
impl OracleCheckDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleCheckDO {
    	for (tmp in db.oracle_check) {
            yield OracleCheckDO {
                oid_ : tmp.oid_,
                deferrable_ : tmp.deferrable_,
                exceptions_into_oid_ : tmp.exceptions_into_oid_,
                initially_ : tmp.initially_,
                using_oid_ : tmp.using_oid_
            }
    	}
    }
    /**
     * @brief gets the deferrable of this element.
     * @return int
     */
    pub fn getDeferrable(self) -> int {
        return self.deferrable_
    }
    /**
     * @brief gets the exceptions into oid of this element.
     * @return int
     */
    pub fn getExceptionsIntoOid(self) -> int {
        return self.exceptions_into_oid_
    }
    /**
     * @brief gets the initially of this element.
     * @return string
     */
    pub fn getInitially(self) -> string {
        return self.initially_
    }
    /**
     * @brief gets the using oid of this element.
     * @return int
     */
    pub fn getUsingOid(self) -> int {
        return self.using_oid_
    }
}
/**
 * @brief DO class: An oracle continue statement.
 */
schema OracleContinueStatementDO {
    @primary oid_: int,
    label_: string,
    when_oid_: int
}
impl OracleContinueStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleContinueStatementDO {
    	for (tmp in db.oracle_continue_statement) {
            yield OracleContinueStatementDO {
                oid_ : tmp.oid_,
                label_ : tmp.label_,
                when_oid_ : tmp.when_oid_
            }
    	}
    }
    /**
     * @brief gets the label of this element.
     * @return string
     */
    pub fn getLabel(self) -> string {
        return self.label_
    }
    /**
     * @brief gets the when oid of this element.
     * @return int
     */
    pub fn getWhenOid(self) -> int {
        return self.when_oid_
    }
}
/**
 * @brief DO class: An oracle create database db link statement.
 */
schema OracleCreateDatabaseDbLinkStatementDO {
    @primary oid_: int,
    authenticated_password_: string,
    authenticated_user_oid_: int,
    is_public_: int,
    is_shared_: int,
    name_oid_: int,
    password_: string,
    user_oid_: int,
    using_oid_: int
}
impl OracleCreateDatabaseDbLinkStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleCreateDatabaseDbLinkStatementDO {
    	for (tmp in db.oracle_create_database_db_link_statement) {
            yield OracleCreateDatabaseDbLinkStatementDO {
                oid_ : tmp.oid_,
                authenticated_password_ : tmp.authenticated_password_,
                authenticated_user_oid_ : tmp.authenticated_user_oid_,
                is_public_ : tmp.is_public_,
                is_shared_ : tmp.is_shared_,
                name_oid_ : tmp.name_oid_,
                password_ : tmp.password_,
                user_oid_ : tmp.user_oid_,
                using_oid_ : tmp.using_oid_
            }
    	}
    }
    /**
     * @brief gets the authenticated password of this element.
     * @return string
     */
    pub fn getAuthenticatedPassword(self) -> string {
        return self.authenticated_password_
    }
    /**
     * @brief gets the authenticated user oid of this element.
     * @return int
     */
    pub fn getAuthenticatedUserOid(self) -> int {
        return self.authenticated_user_oid_
    }
    /**
     * @brief gets the is public of this element.
     * @return int
     */
    pub fn getIsPublic(self) -> int {
        return self.is_public_
    }
    /**
     * @brief gets the is shared of this element.
     * @return int
     */
    pub fn getIsShared(self) -> int {
        return self.is_shared_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the password of this element.
     * @return string
     */
    pub fn getPassword(self) -> string {
        return self.password_
    }
    /**
     * @brief gets the user oid of this element.
     * @return int
     */
    pub fn getUserOid(self) -> int {
        return self.user_oid_
    }
    /**
     * @brief gets the using oid of this element.
     * @return int
     */
    pub fn getUsingOid(self) -> int {
        return self.using_oid_
    }
}
/**
 * @brief DO class: An oracle create index statement.
 */
schema OracleCreateIndexStatementDO {
    @primary oid_: int,
    compress_: int,
    compress_level_: int,
    enable_: int,
    free_lists_: int,
    initrans_: int,
    is_cluster_: int,
    is_compress_for_oltp_: int,
    is_compute_statistics_: int,
    is_global_: int,
    is_index_only_top_level_: int,
    is_local_: int,
    is_no_parallel_: int,
    is_online_: int,
    is_reverse_: int,
    logging_: int,
    maxtrans_: int,
    parallel_oid_: int,
    pctfree_: int,
    pctincrease_: int,
    pctthreshold_: int,
    pctused_: int,
    sort_: int,
    storage_: string,
    tablespace_oid_: int
}
impl OracleCreateIndexStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleCreateIndexStatementDO {
    	for (tmp in db.oracle_create_index_statement) {
            yield OracleCreateIndexStatementDO {
                oid_ : tmp.oid_,
                compress_ : tmp.compress_,
                compress_level_ : tmp.compress_level_,
                enable_ : tmp.enable_,
                free_lists_ : tmp.free_lists_,
                initrans_ : tmp.initrans_,
                is_cluster_ : tmp.is_cluster_,
                is_compress_for_oltp_ : tmp.is_compress_for_oltp_,
                is_compute_statistics_ : tmp.is_compute_statistics_,
                is_global_ : tmp.is_global_,
                is_index_only_top_level_ : tmp.is_index_only_top_level_,
                is_local_ : tmp.is_local_,
                is_no_parallel_ : tmp.is_no_parallel_,
                is_online_ : tmp.is_online_,
                is_reverse_ : tmp.is_reverse_,
                logging_ : tmp.logging_,
                maxtrans_ : tmp.maxtrans_,
                parallel_oid_ : tmp.parallel_oid_,
                pctfree_ : tmp.pctfree_,
                pctincrease_ : tmp.pctincrease_,
                pctthreshold_ : tmp.pctthreshold_,
                pctused_ : tmp.pctused_,
                sort_ : tmp.sort_,
                storage_ : tmp.storage_,
                tablespace_oid_ : tmp.tablespace_oid_
            }
    	}
    }
    /**
     * @brief gets the compress of this element.
     * @return int
     */
    pub fn getCompress(self) -> int {
        return self.compress_
    }
    /**
     * @brief gets the compress level of this element.
     * @return int
     */
    pub fn getCompressLevel(self) -> int {
        return self.compress_level_
    }
    /**
     * @brief gets the enable of this element.
     * @return int
     */
    pub fn getEnable(self) -> int {
        return self.enable_
    }
    /**
     * @brief gets the free lists of this element.
     * @return int
     */
    pub fn getFreeLists(self) -> int {
        return self.free_lists_
    }
    /**
     * @brief gets the initrans of this element.
     * @return int
     */
    pub fn getInitrans(self) -> int {
        return self.initrans_
    }
    /**
     * @brief gets the is cluster of this element.
     * @return int
     */
    pub fn getIsCluster(self) -> int {
        return self.is_cluster_
    }
    /**
     * @brief gets the is compress for oltp of this element.
     * @return int
     */
    pub fn getIsCompressForOltp(self) -> int {
        return self.is_compress_for_oltp_
    }
    /**
     * @brief gets the is compute statistics of this element.
     * @return int
     */
    pub fn getIsComputeStatistics(self) -> int {
        return self.is_compute_statistics_
    }
    /**
     * @brief gets the is global of this element.
     * @return int
     */
    pub fn getIsGlobal(self) -> int {
        return self.is_global_
    }
    /**
     * @brief gets the is index only top level of this element.
     * @return int
     */
    pub fn getIsIndexOnlyTopLevel(self) -> int {
        return self.is_index_only_top_level_
    }
    /**
     * @brief gets the is local of this element.
     * @return int
     */
    pub fn getIsLocal(self) -> int {
        return self.is_local_
    }
    /**
     * @brief gets the is no parallel of this element.
     * @return int
     */
    pub fn getIsNoParallel(self) -> int {
        return self.is_no_parallel_
    }
    /**
     * @brief gets the is online of this element.
     * @return int
     */
    pub fn getIsOnline(self) -> int {
        return self.is_online_
    }
    /**
     * @brief gets the is reverse of this element.
     * @return int
     */
    pub fn getIsReverse(self) -> int {
        return self.is_reverse_
    }
    /**
     * @brief gets the logging of this element.
     * @return int
     */
    pub fn getLogging(self) -> int {
        return self.logging_
    }
    /**
     * @brief gets the maxtrans of this element.
     * @return int
     */
    pub fn getMaxtrans(self) -> int {
        return self.maxtrans_
    }
    /**
     * @brief gets the parallel oid of this element.
     * @return int
     */
    pub fn getParallelOid(self) -> int {
        return self.parallel_oid_
    }
    /**
     * @brief gets the pctfree of this element.
     * @return int
     */
    pub fn getPctfree(self) -> int {
        return self.pctfree_
    }
    /**
     * @brief gets the pctincrease of this element.
     * @return int
     */
    pub fn getPctincrease(self) -> int {
        return self.pctincrease_
    }
    /**
     * @brief gets the pctthreshold of this element.
     * @return int
     */
    pub fn getPctthreshold(self) -> int {
        return self.pctthreshold_
    }
    /**
     * @brief gets the pctused of this element.
     * @return int
     */
    pub fn getPctused(self) -> int {
        return self.pctused_
    }
    /**
     * @brief gets the sort of this element.
     * @return int
     */
    pub fn getSort(self) -> int {
        return self.sort_
    }
    /**
     * @brief gets the storage of this element.
     * @return string
     */
    pub fn getStorage(self) -> string {
        return self.storage_
    }
    /**
     * @brief gets the tablespace oid of this element.
     * @return int
     */
    pub fn getTablespaceOid(self) -> int {
        return self.tablespace_oid_
    }
}
/**
 * @brief DO class: An oracle create package statement.
 */
schema OracleCreatePackageStatementDO {
    @primary oid_: int,
    is_body_: int,
    is_or_replace_: int,
    name_oid_: int
}
impl OracleCreatePackageStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleCreatePackageStatementDO {
    	for (tmp in db.oracle_create_package_statement) {
            yield OracleCreatePackageStatementDO {
                oid_ : tmp.oid_,
                is_body_ : tmp.is_body_,
                is_or_replace_ : tmp.is_or_replace_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is body of this element.
     * @return int
     */
    pub fn getIsBody(self) -> int {
        return self.is_body_
    }
    /**
     * @brief gets the is or replace of this element.
     * @return int
     */
    pub fn getIsOrReplace(self) -> int {
        return self.is_or_replace_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: An oracle create synonym statement.
 */
schema OracleCreateSynonymStatementDO {
    @primary oid_: int,
    is_or_replace_: int,
    is_public_: int,
    name_oid_: int,
    object_oid_: int
}
impl OracleCreateSynonymStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleCreateSynonymStatementDO {
    	for (tmp in db.oracle_create_synonym_statement) {
            yield OracleCreateSynonymStatementDO {
                oid_ : tmp.oid_,
                is_or_replace_ : tmp.is_or_replace_,
                is_public_ : tmp.is_public_,
                name_oid_ : tmp.name_oid_,
                object_oid_ : tmp.object_oid_
            }
    	}
    }
    /**
     * @brief gets the is or replace of this element.
     * @return int
     */
    pub fn getIsOrReplace(self) -> int {
        return self.is_or_replace_
    }
    /**
     * @brief gets the is public of this element.
     * @return int
     */
    pub fn getIsPublic(self) -> int {
        return self.is_public_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the object oid of this element.
     * @return int
     */
    pub fn getObjectOid(self) -> int {
        return self.object_oid_
    }
}
/**
 * @brief DO class: An oracle create table statement.
 */
schema OracleCreateTableStatementDO {
    @primary oid_: int,
    cache_: int,
    cluster_oid_: int,
    compress_level_: int,
    deferred_segment_creation_: string,
    enable_row_movement_: int,
    initrans_: int,
    is_compress_for_oltp_: int,
    is_cursor_specific_segment_: int,
    is_in_memory_metadata_: int,
    is_monitoring_: int,
    is_on_commit_delete_rows_: int,
    lob_storage_oid_: int,
    maxtrans_: int,
    of_oid_: int,
    oid_index_: string,
    organization_: string,
    parallel_: int,
    parallel_value_oid_: int,
    pctfree_: int,
    pctincrease_: int,
    pctused_: int,
    storage_oid_: int,
    xml_type_column_properties_oid_: int
}
impl OracleCreateTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleCreateTableStatementDO {
    	for (tmp in db.oracle_create_table_statement) {
            yield OracleCreateTableStatementDO {
                oid_ : tmp.oid_,
                cache_ : tmp.cache_,
                cluster_oid_ : tmp.cluster_oid_,
                compress_level_ : tmp.compress_level_,
                deferred_segment_creation_ : tmp.deferred_segment_creation_,
                enable_row_movement_ : tmp.enable_row_movement_,
                initrans_ : tmp.initrans_,
                is_compress_for_oltp_ : tmp.is_compress_for_oltp_,
                is_cursor_specific_segment_ : tmp.is_cursor_specific_segment_,
                is_in_memory_metadata_ : tmp.is_in_memory_metadata_,
                is_monitoring_ : tmp.is_monitoring_,
                is_on_commit_delete_rows_ : tmp.is_on_commit_delete_rows_,
                lob_storage_oid_ : tmp.lob_storage_oid_,
                maxtrans_ : tmp.maxtrans_,
                of_oid_ : tmp.of_oid_,
                oid_index_ : tmp.oid_index_,
                organization_ : tmp.organization_,
                parallel_ : tmp.parallel_,
                parallel_value_oid_ : tmp.parallel_value_oid_,
                pctfree_ : tmp.pctfree_,
                pctincrease_ : tmp.pctincrease_,
                pctused_ : tmp.pctused_,
                storage_oid_ : tmp.storage_oid_,
                xml_type_column_properties_oid_ : tmp.xml_type_column_properties_oid_
            }
    	}
    }
    /**
     * @brief gets the cache of this element.
     * @return int
     */
    pub fn getCache(self) -> int {
        return self.cache_
    }
    /**
     * @brief gets the cluster oid of this element.
     * @return int
     */
    pub fn getClusterOid(self) -> int {
        return self.cluster_oid_
    }
    /**
     * @brief gets the compress level of this element.
     * @return int
     */
    pub fn getCompressLevel(self) -> int {
        return self.compress_level_
    }
    /**
     * @brief gets the deferred segment creation of this element.
     * @return string
     */
    pub fn getDeferredSegmentCreation(self) -> string {
        return self.deferred_segment_creation_
    }
    /**
     * @brief gets the enable row movement of this element.
     * @return int
     */
    pub fn getEnableRowMovement(self) -> int {
        return self.enable_row_movement_
    }
    /**
     * @brief gets the initrans of this element.
     * @return int
     */
    pub fn getInitrans(self) -> int {
        return self.initrans_
    }
    /**
     * @brief gets the is compress for oltp of this element.
     * @return int
     */
    pub fn getIsCompressForOltp(self) -> int {
        return self.is_compress_for_oltp_
    }
    /**
     * @brief gets the is cursor specific segment of this element.
     * @return int
     */
    pub fn getIsCursorSpecificSegment(self) -> int {
        return self.is_cursor_specific_segment_
    }
    /**
     * @brief gets the is in memory metadata of this element.
     * @return int
     */
    pub fn getIsInMemoryMetadata(self) -> int {
        return self.is_in_memory_metadata_
    }
    /**
     * @brief gets the is monitoring of this element.
     * @return int
     */
    pub fn getIsMonitoring(self) -> int {
        return self.is_monitoring_
    }
    /**
     * @brief gets the is on commit delete rows of this element.
     * @return int
     */
    pub fn getIsOnCommitDeleteRows(self) -> int {
        return self.is_on_commit_delete_rows_
    }
    /**
     * @brief gets the lob storage oid of this element.
     * @return int
     */
    pub fn getLobStorageOid(self) -> int {
        return self.lob_storage_oid_
    }
    /**
     * @brief gets the maxtrans of this element.
     * @return int
     */
    pub fn getMaxtrans(self) -> int {
        return self.maxtrans_
    }
    /**
     * @brief gets the of oid of this element.
     * @return int
     */
    pub fn getOfOid(self) -> int {
        return self.of_oid_
    }
    /**
     * @brief gets the oid index of this element.
     * @return string
     */
    pub fn getOidIndex(self) -> string {
        return self.oid_index_
    }
    /**
     * @brief gets the organization of this element.
     * @return string
     */
    pub fn getOrganization(self) -> string {
        return self.organization_
    }
    /**
     * @brief gets the parallel of this element.
     * @return int
     */
    pub fn getParallel(self) -> int {
        return self.parallel_
    }
    /**
     * @brief gets the parallel value oid of this element.
     * @return int
     */
    pub fn getParallelValueOid(self) -> int {
        return self.parallel_value_oid_
    }
    /**
     * @brief gets the pctfree of this element.
     * @return int
     */
    pub fn getPctfree(self) -> int {
        return self.pctfree_
    }
    /**
     * @brief gets the pctincrease of this element.
     * @return int
     */
    pub fn getPctincrease(self) -> int {
        return self.pctincrease_
    }
    /**
     * @brief gets the pctused of this element.
     * @return int
     */
    pub fn getPctused(self) -> int {
        return self.pctused_
    }
    /**
     * @brief gets the storage oid of this element.
     * @return int
     */
    pub fn getStorageOid(self) -> int {
        return self.storage_oid_
    }
    /**
     * @brief gets the xml type column properties oid of this element.
     * @return int
     */
    pub fn getXmlTypeColumnPropertiesOid(self) -> int {
        return self.xml_type_column_properties_oid_
    }
}
/**
 * @brief DO class: An oracle create type statement.
 */
schema OracleCreateTypeStatementDO {
    @primary oid_: int,
    auth_id_oid_: int,
    instantiable_: int,
    is_body_: int,
    is_final_: int,
    is_force_: int,
    is_object_: int,
    is_or_replace_: int,
    is_paren_: int,
    name_oid_: int,
    oid_oid_: int,
    table_of_oid_: int,
    under_oid_: int,
    varray_data_type_oid_: int,
    varray_size_limit_oid_: int,
    wrapped_source_: string
}
impl OracleCreateTypeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleCreateTypeStatementDO {
    	for (tmp in db.oracle_create_type_statement) {
            yield OracleCreateTypeStatementDO {
                oid_ : tmp.oid_,
                auth_id_oid_ : tmp.auth_id_oid_,
                instantiable_ : tmp.instantiable_,
                is_body_ : tmp.is_body_,
                is_final_ : tmp.is_final_,
                is_force_ : tmp.is_force_,
                is_object_ : tmp.is_object_,
                is_or_replace_ : tmp.is_or_replace_,
                is_paren_ : tmp.is_paren_,
                name_oid_ : tmp.name_oid_,
                oid_oid_ : tmp.oid_oid_,
                table_of_oid_ : tmp.table_of_oid_,
                under_oid_ : tmp.under_oid_,
                varray_data_type_oid_ : tmp.varray_data_type_oid_,
                varray_size_limit_oid_ : tmp.varray_size_limit_oid_,
                wrapped_source_ : tmp.wrapped_source_
            }
    	}
    }
    /**
     * @brief gets the auth id oid of this element.
     * @return int
     */
    pub fn getAuthIdOid(self) -> int {
        return self.auth_id_oid_
    }
    /**
     * @brief gets the instantiable of this element.
     * @return int
     */
    pub fn getInstantiable(self) -> int {
        return self.instantiable_
    }
    /**
     * @brief gets the is body of this element.
     * @return int
     */
    pub fn getIsBody(self) -> int {
        return self.is_body_
    }
    /**
     * @brief gets the is final of this element.
     * @return int
     */
    pub fn getIsFinal(self) -> int {
        return self.is_final_
    }
    /**
     * @brief gets the is force of this element.
     * @return int
     */
    pub fn getIsForce(self) -> int {
        return self.is_force_
    }
    /**
     * @brief gets the is object of this element.
     * @return int
     */
    pub fn getIsObject(self) -> int {
        return self.is_object_
    }
    /**
     * @brief gets the is or replace of this element.
     * @return int
     */
    pub fn getIsOrReplace(self) -> int {
        return self.is_or_replace_
    }
    /**
     * @brief gets the is paren of this element.
     * @return int
     */
    pub fn getIsParen(self) -> int {
        return self.is_paren_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the oid oid of this element.
     * @return int
     */
    pub fn getOidOid(self) -> int {
        return self.oid_oid_
    }
    /**
     * @brief gets the table of oid of this element.
     * @return int
     */
    pub fn getTableOfOid(self) -> int {
        return self.table_of_oid_
    }
    /**
     * @brief gets the under oid of this element.
     * @return int
     */
    pub fn getUnderOid(self) -> int {
        return self.under_oid_
    }
    /**
     * @brief gets the varray data type oid of this element.
     * @return int
     */
    pub fn getVarrayDataTypeOid(self) -> int {
        return self.varray_data_type_oid_
    }
    /**
     * @brief gets the varray size limit oid of this element.
     * @return int
     */
    pub fn getVarraySizeLimitOid(self) -> int {
        return self.varray_size_limit_oid_
    }
    /**
     * @brief gets the wrapped source of this element.
     * @return string
     */
    pub fn getWrappedSource(self) -> string {
        return self.wrapped_source_
    }
}
/**
 * @brief DO class: An oracle cursor expr.
 */
schema OracleCursorExprDO {
    @primary oid_: int,
    query_oid_: int
}
impl OracleCursorExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleCursorExprDO {
    	for (tmp in db.oracle_cursor_expr) {
            yield OracleCursorExprDO {
                oid_ : tmp.oid_,
                query_oid_ : tmp.query_oid_
            }
    	}
    }
    /**
     * @brief gets the query oid of this element.
     * @return int
     */
    pub fn getQueryOid(self) -> int {
        return self.query_oid_
    }
}
/**
 * @brief DO class: An oracle data type interval day.
 */
schema OracleDataTypeIntervalDayDO {
    @primary oid_: int,
    is_to_second_: int
}
impl OracleDataTypeIntervalDayDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleDataTypeIntervalDayDO {
    	for (tmp in db.oracle_data_type_interval_day) {
            yield OracleDataTypeIntervalDayDO {
                oid_ : tmp.oid_,
                is_to_second_ : tmp.is_to_second_
            }
    	}
    }
    /**
     * @brief gets the is to second of this element.
     * @return int
     */
    pub fn getIsToSecond(self) -> int {
        return self.is_to_second_
    }
}
/**
 * @brief DO class: An oracle data type interval year.
 */
schema OracleDataTypeIntervalYearDO {
    @primary oid_: int
}
impl OracleDataTypeIntervalYearDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleDataTypeIntervalYearDO {
    	for (tmp in db.oracle_data_type_interval_year) {
            yield OracleDataTypeIntervalYearDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An oracle datetime expr.
 */
schema OracleDatetimeExprDO {
    @primary oid_: int,
    expr_oid_: int,
    time_zone_oid_: int
}
impl OracleDatetimeExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleDatetimeExprDO {
    	for (tmp in db.oracle_datetime_expr) {
            yield OracleDatetimeExprDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_,
                time_zone_oid_ : tmp.time_zone_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the time zone oid of this element.
     * @return int
     */
    pub fn getTimeZoneOid(self) -> int {
        return self.time_zone_oid_
    }
}
/**
 * @brief DO class: An oracle delete statement.
 */
schema OracleDeleteStatementDO {
    @primary oid_: int,
    returning_oid_: int
}
impl OracleDeleteStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleDeleteStatementDO {
    	for (tmp in db.oracle_delete_statement) {
            yield OracleDeleteStatementDO {
                oid_ : tmp.oid_,
                returning_oid_ : tmp.returning_oid_
            }
    	}
    }
    /**
     * @brief gets the returning oid of this element.
     * @return int
     */
    pub fn getReturningOid(self) -> int {
        return self.returning_oid_
    }
}
/**
 * @brief DO class: An oracle drop db link statement.
 */
schema OracleDropDbLinkStatementDO {
    @primary oid_: int,
    is_public_: int,
    name_oid_: int
}
impl OracleDropDbLinkStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleDropDbLinkStatementDO {
    	for (tmp in db.oracle_drop_db_link_statement) {
            yield OracleDropDbLinkStatementDO {
                oid_ : tmp.oid_,
                is_public_ : tmp.is_public_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is public of this element.
     * @return int
     */
    pub fn getIsPublic(self) -> int {
        return self.is_public_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: An oracle exception statement.
 */
schema OracleExceptionStatementDO {
    @primary oid_: int,
    items_: string
}
impl OracleExceptionStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleExceptionStatementDO {
    	for (tmp in db.oracle_exception_statement) {
            yield OracleExceptionStatementDO {
                oid_ : tmp.oid_,
                items_ : tmp.items_
            }
    	}
    }
    /**
     * @brief gets the items of this element.
     * @return string
     */
    pub fn getItems(self) -> string {
        return self.items_
    }
}
/**
 * @brief DO class: An oracle execute immediate statement.
 */
schema OracleExecuteImmediateStatementDO {
    @primary oid_: int,
    dynamic_sql_oid_: int
}
impl OracleExecuteImmediateStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleExecuteImmediateStatementDO {
    	for (tmp in db.oracle_execute_immediate_statement) {
            yield OracleExecuteImmediateStatementDO {
                oid_ : tmp.oid_,
                dynamic_sql_oid_ : tmp.dynamic_sql_oid_
            }
    	}
    }
    /**
     * @brief gets the dynamic sql oid of this element.
     * @return int
     */
    pub fn getDynamicSqlOid(self) -> int {
        return self.dynamic_sql_oid_
    }
}
/**
 * @brief DO class: An oracle exit statement.
 */
schema OracleExitStatementDO {
    @primary oid_: int,
    label_: string,
    when_oid_: int
}
impl OracleExitStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleExitStatementDO {
    	for (tmp in db.oracle_exit_statement) {
            yield OracleExitStatementDO {
                oid_ : tmp.oid_,
                label_ : tmp.label_,
                when_oid_ : tmp.when_oid_
            }
    	}
    }
    /**
     * @brief gets the label of this element.
     * @return string
     */
    pub fn getLabel(self) -> string {
        return self.label_
    }
    /**
     * @brief gets the when oid of this element.
     * @return int
     */
    pub fn getWhenOid(self) -> int {
        return self.when_oid_
    }
}
/**
 * @brief DO class: An oracle explain statement.
 */
schema OracleExplainStatementDO {
    @primary oid_: int,
    into_oid_: int,
    statement_id_oid_: int
}
impl OracleExplainStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleExplainStatementDO {
    	for (tmp in db.oracle_explain_statement) {
            yield OracleExplainStatementDO {
                oid_ : tmp.oid_,
                into_oid_ : tmp.into_oid_,
                statement_id_oid_ : tmp.statement_id_oid_
            }
    	}
    }
    /**
     * @brief gets the into oid of this element.
     * @return int
     */
    pub fn getIntoOid(self) -> int {
        return self.into_oid_
    }
    /**
     * @brief gets the statement id oid of this element.
     * @return int
     */
    pub fn getStatementIdOid(self) -> int {
        return self.statement_id_oid_
    }
}
/**
 * @brief DO class: An oracle file specification.
 */
schema OracleFileSpecificationDO {
    @primary oid_: int,
    auto_extend_on_oid_: int,
    is_auto_extend_off_: int,
    size_oid_: int
}
impl OracleFileSpecificationDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleFileSpecificationDO {
    	for (tmp in db.oracle_file_specification) {
            yield OracleFileSpecificationDO {
                oid_ : tmp.oid_,
                auto_extend_on_oid_ : tmp.auto_extend_on_oid_,
                is_auto_extend_off_ : tmp.is_auto_extend_off_,
                size_oid_ : tmp.size_oid_
            }
    	}
    }
    /**
     * @brief gets the auto extend on oid of this element.
     * @return int
     */
    pub fn getAutoExtendOnOid(self) -> int {
        return self.auto_extend_on_oid_
    }
    /**
     * @brief gets the is auto extend off of this element.
     * @return int
     */
    pub fn getIsAutoExtendOff(self) -> int {
        return self.is_auto_extend_off_
    }
    /**
     * @brief gets the size oid of this element.
     * @return int
     */
    pub fn getSizeOid(self) -> int {
        return self.size_oid_
    }
}
/**
 * @brief DO class: An oracle for statement.
 */
schema OracleForStatementDO {
    @primary oid_: int,
    end_label_oid_: int,
    is_all_: int
}
impl OracleForStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleForStatementDO {
    	for (tmp in db.oracle_for_statement) {
            yield OracleForStatementDO {
                oid_ : tmp.oid_,
                end_label_oid_ : tmp.end_label_oid_,
                is_all_ : tmp.is_all_
            }
    	}
    }
    /**
     * @brief gets the end label oid of this element.
     * @return int
     */
    pub fn getEndLabelOid(self) -> int {
        return self.end_label_oid_
    }
    /**
     * @brief gets the is all of this element.
     * @return int
     */
    pub fn getIsAll(self) -> int {
        return self.is_all_
    }
}
/**
 * @brief DO class: An oracle foreign key.
 */
schema OracleForeignKeyDO {
    @primary oid_: int,
    deferrable_: int,
    exceptions_into_oid_: int,
    initially_: string,
    using_oid_: int
}
impl OracleForeignKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleForeignKeyDO {
    	for (tmp in db.oracle_foreign_key) {
            yield OracleForeignKeyDO {
                oid_ : tmp.oid_,
                deferrable_ : tmp.deferrable_,
                exceptions_into_oid_ : tmp.exceptions_into_oid_,
                initially_ : tmp.initially_,
                using_oid_ : tmp.using_oid_
            }
    	}
    }
    /**
     * @brief gets the deferrable of this element.
     * @return int
     */
    pub fn getDeferrable(self) -> int {
        return self.deferrable_
    }
    /**
     * @brief gets the exceptions into oid of this element.
     * @return int
     */
    pub fn getExceptionsIntoOid(self) -> int {
        return self.exceptions_into_oid_
    }
    /**
     * @brief gets the initially of this element.
     * @return string
     */
    pub fn getInitially(self) -> string {
        return self.initially_
    }
    /**
     * @brief gets the using oid of this element.
     * @return int
     */
    pub fn getUsingOid(self) -> int {
        return self.using_oid_
    }
}
/**
 * @brief DO class: An oracle goto statement.
 */
schema OracleGotoStatementDO {
    @primary oid_: int,
    label_oid_: int
}
impl OracleGotoStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleGotoStatementDO {
    	for (tmp in db.oracle_goto_statement) {
            yield OracleGotoStatementDO {
                oid_ : tmp.oid_,
                label_oid_ : tmp.label_oid_
            }
    	}
    }
    /**
     * @brief gets the label oid of this element.
     * @return int
     */
    pub fn getLabelOid(self) -> int {
        return self.label_oid_
    }
}
/**
 * @brief DO class: An oracle insert statement.
 */
schema OracleInsertStatementDO {
    @primary oid_: int,
    error_logging_oid_: int,
    returning_oid_: int
}
impl OracleInsertStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleInsertStatementDO {
    	for (tmp in db.oracle_insert_statement) {
            yield OracleInsertStatementDO {
                oid_ : tmp.oid_,
                error_logging_oid_ : tmp.error_logging_oid_,
                returning_oid_ : tmp.returning_oid_
            }
    	}
    }
    /**
     * @brief gets the error logging oid of this element.
     * @return int
     */
    pub fn getErrorLoggingOid(self) -> int {
        return self.error_logging_oid_
    }
    /**
     * @brief gets the returning oid of this element.
     * @return int
     */
    pub fn getReturningOid(self) -> int {
        return self.returning_oid_
    }
}
/**
 * @brief DO class: An oracle interval expr.
 */
schema OracleIntervalExprDO {
    @primary oid_: int,
    factional_seconds_precision_: int,
    precision_oid_: int,
    to_factional_seconds_precision_oid_: int,
    to_type_: string,
    type_: string,
    value_oid_: int
}
impl OracleIntervalExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleIntervalExprDO {
    	for (tmp in db.oracle_interval_expr) {
            yield OracleIntervalExprDO {
                oid_ : tmp.oid_,
                factional_seconds_precision_ : tmp.factional_seconds_precision_,
                precision_oid_ : tmp.precision_oid_,
                to_factional_seconds_precision_oid_ : tmp.to_factional_seconds_precision_oid_,
                to_type_ : tmp.to_type_,
                type_ : tmp.type_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the factional seconds precision of this element.
     * @return int
     */
    pub fn getFactionalSecondsPrecision(self) -> int {
        return self.factional_seconds_precision_
    }
    /**
     * @brief gets the precision oid of this element.
     * @return int
     */
    pub fn getPrecisionOid(self) -> int {
        return self.precision_oid_
    }
    /**
     * @brief gets the to factional seconds precision oid of this element.
     * @return int
     */
    pub fn getToFactionalSecondsPrecisionOid(self) -> int {
        return self.to_factional_seconds_precision_oid_
    }
    /**
     * @brief gets the to type of this element.
     * @return string
     */
    pub fn getToType(self) -> string {
        return self.to_type_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: An oracle is of type expr.
 */
schema OracleIsOfTypeExprDO {
    @primary oid_: int,
    expr_oid_: int
}
impl OracleIsOfTypeExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleIsOfTypeExprDO {
    	for (tmp in db.oracle_is_of_type_expr) {
            yield OracleIsOfTypeExprDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
}
/**
 * @brief DO class: An oracle is set expr.
 */
schema OracleIsSetExprDO {
    @primary oid_: int,
    nested_table_oid_: int
}
impl OracleIsSetExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleIsSetExprDO {
    	for (tmp in db.oracle_is_set_expr) {
            yield OracleIsSetExprDO {
                oid_ : tmp.oid_,
                nested_table_oid_ : tmp.nested_table_oid_
            }
    	}
    }
    /**
     * @brief gets the nested table oid of this element.
     * @return int
     */
    pub fn getNestedTableOid(self) -> int {
        return self.nested_table_oid_
    }
}
/**
 * @brief DO class: An oracle label statement.
 */
schema OracleLabelStatementDO {
    @primary oid_: int,
    label_oid_: int
}
impl OracleLabelStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleLabelStatementDO {
    	for (tmp in db.oracle_label_statement) {
            yield OracleLabelStatementDO {
                oid_ : tmp.oid_,
                label_oid_ : tmp.label_oid_
            }
    	}
    }
    /**
     * @brief gets the label oid of this element.
     * @return int
     */
    pub fn getLabelOid(self) -> int {
        return self.label_oid_
    }
}
/**
 * @brief DO class: An oracle lob storage clause.
 */
schema OracleLobStorageClauseDO {
    @primary oid_: int,
    cache_: int,
    chunk_oid_: int,
    compress_: int,
    enable_: int,
    is_basic_file_: int,
    is_retention_: int,
    is_secure_file_: int,
    keep_duplicate_: int,
    logging_: int,
    pctversion_oid_: int,
    segement_name_oid_: int,
    storage_clause_oid_: int
}
impl OracleLobStorageClauseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleLobStorageClauseDO {
    	for (tmp in db.oracle_lob_storage_clause) {
            yield OracleLobStorageClauseDO {
                oid_ : tmp.oid_,
                cache_ : tmp.cache_,
                chunk_oid_ : tmp.chunk_oid_,
                compress_ : tmp.compress_,
                enable_ : tmp.enable_,
                is_basic_file_ : tmp.is_basic_file_,
                is_retention_ : tmp.is_retention_,
                is_secure_file_ : tmp.is_secure_file_,
                keep_duplicate_ : tmp.keep_duplicate_,
                logging_ : tmp.logging_,
                pctversion_oid_ : tmp.pctversion_oid_,
                segement_name_oid_ : tmp.segement_name_oid_,
                storage_clause_oid_ : tmp.storage_clause_oid_
            }
    	}
    }
    /**
     * @brief gets the cache of this element.
     * @return int
     */
    pub fn getCache(self) -> int {
        return self.cache_
    }
    /**
     * @brief gets the chunk oid of this element.
     * @return int
     */
    pub fn getChunkOid(self) -> int {
        return self.chunk_oid_
    }
    /**
     * @brief gets the compress of this element.
     * @return int
     */
    pub fn getCompress(self) -> int {
        return self.compress_
    }
    /**
     * @brief gets the enable of this element.
     * @return int
     */
    pub fn getEnable(self) -> int {
        return self.enable_
    }
    /**
     * @brief gets the is basic file of this element.
     * @return int
     */
    pub fn getIsBasicFile(self) -> int {
        return self.is_basic_file_
    }
    /**
     * @brief gets the is retention of this element.
     * @return int
     */
    pub fn getIsRetention(self) -> int {
        return self.is_retention_
    }
    /**
     * @brief gets the is secure file of this element.
     * @return int
     */
    pub fn getIsSecureFile(self) -> int {
        return self.is_secure_file_
    }
    /**
     * @brief gets the keep duplicate of this element.
     * @return int
     */
    pub fn getKeepDuplicate(self) -> int {
        return self.keep_duplicate_
    }
    /**
     * @brief gets the logging of this element.
     * @return int
     */
    pub fn getLogging(self) -> int {
        return self.logging_
    }
    /**
     * @brief gets the pctversion oid of this element.
     * @return int
     */
    pub fn getPctversionOid(self) -> int {
        return self.pctversion_oid_
    }
    /**
     * @brief gets the segement name oid of this element.
     * @return int
     */
    pub fn getSegementNameOid(self) -> int {
        return self.segement_name_oid_
    }
    /**
     * @brief gets the storage clause oid of this element.
     * @return int
     */
    pub fn getStorageClauseOid(self) -> int {
        return self.storage_clause_oid_
    }
}
/**
 * @brief DO class: An oracle lock table statement.
 */
schema OracleLockTableStatementDO {
    @primary oid_: int,
    is_no_wait_: int,
    lock_mode_: string,
    partition_oid_: int,
    table_oid_: int,
    wait_oid_: int
}
impl OracleLockTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleLockTableStatementDO {
    	for (tmp in db.oracle_lock_table_statement) {
            yield OracleLockTableStatementDO {
                oid_ : tmp.oid_,
                is_no_wait_ : tmp.is_no_wait_,
                lock_mode_ : tmp.lock_mode_,
                partition_oid_ : tmp.partition_oid_,
                table_oid_ : tmp.table_oid_,
                wait_oid_ : tmp.wait_oid_
            }
    	}
    }
    /**
     * @brief gets the is no wait of this element.
     * @return int
     */
    pub fn getIsNoWait(self) -> int {
        return self.is_no_wait_
    }
    /**
     * @brief gets the lock mode of this element.
     * @return string
     */
    pub fn getLockMode(self) -> string {
        return self.lock_mode_
    }
    /**
     * @brief gets the partition oid of this element.
     * @return int
     */
    pub fn getPartitionOid(self) -> int {
        return self.partition_oid_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
    /**
     * @brief gets the wait oid of this element.
     * @return int
     */
    pub fn getWaitOid(self) -> int {
        return self.wait_oid_
    }
}
/**
 * @brief DO class: An oracle multi insert statement.
 */
schema OracleMultiInsertStatementDO {
    @primary oid_: int,
    entries_: string,
    option_: string,
    sub_query_oid_: int
}
impl OracleMultiInsertStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleMultiInsertStatementDO {
    	for (tmp in db.oracle_multi_insert_statement) {
            yield OracleMultiInsertStatementDO {
                oid_ : tmp.oid_,
                entries_ : tmp.entries_,
                option_ : tmp.option_,
                sub_query_oid_ : tmp.sub_query_oid_
            }
    	}
    }
    /**
     * @brief gets the entries of this element.
     * @return string
     */
    pub fn getEntries(self) -> string {
        return self.entries_
    }
    /**
     * @brief gets the option of this element.
     * @return string
     */
    pub fn getOption(self) -> string {
        return self.option_
    }
    /**
     * @brief gets the sub query oid of this element.
     * @return int
     */
    pub fn getSubQueryOid(self) -> int {
        return self.sub_query_oid_
    }
}
/**
 * @brief DO class: An oracle outer expr.
 */
schema OracleOuterExprDO {
    @primary oid_: int,
    expr_oid_: int
}
impl OracleOuterExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleOuterExprDO {
    	for (tmp in db.oracle_outer_expr) {
            yield OracleOuterExprDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
}
/**
 * @brief DO class: An oracle pipe row statement.
 */
schema OraclePipeRowStatementDO {
    @primary oid_: int
}
impl OraclePipeRowStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OraclePipeRowStatementDO {
    	for (tmp in db.oracle_pipe_row_statement) {
            yield OraclePipeRowStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An oracle primary key.
 */
schema OraclePrimaryKeyDO {
    @primary oid_: int,
    deferrable_: int,
    enable_: int,
    exceptions_into_oid_: int,
    initially_: string,
    using_oid_: int
}
impl OraclePrimaryKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OraclePrimaryKeyDO {
    	for (tmp in db.oracle_primary_key) {
            yield OraclePrimaryKeyDO {
                oid_ : tmp.oid_,
                deferrable_ : tmp.deferrable_,
                enable_ : tmp.enable_,
                exceptions_into_oid_ : tmp.exceptions_into_oid_,
                initially_ : tmp.initially_,
                using_oid_ : tmp.using_oid_
            }
    	}
    }
    /**
     * @brief gets the deferrable of this element.
     * @return int
     */
    pub fn getDeferrable(self) -> int {
        return self.deferrable_
    }
    /**
     * @brief gets the enable of this element.
     * @return int
     */
    pub fn getEnable(self) -> int {
        return self.enable_
    }
    /**
     * @brief gets the exceptions into oid of this element.
     * @return int
     */
    pub fn getExceptionsIntoOid(self) -> int {
        return self.exceptions_into_oid_
    }
    /**
     * @brief gets the initially of this element.
     * @return string
     */
    pub fn getInitially(self) -> string {
        return self.initially_
    }
    /**
     * @brief gets the using oid of this element.
     * @return int
     */
    pub fn getUsingOid(self) -> int {
        return self.using_oid_
    }
}
/**
 * @brief DO class: An oracle raise statement.
 */
schema OracleRaiseStatementDO {
    @primary oid_: int,
    exception_oid_: int
}
impl OracleRaiseStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleRaiseStatementDO {
    	for (tmp in db.oracle_raise_statement) {
            yield OracleRaiseStatementDO {
                oid_ : tmp.oid_,
                exception_oid_ : tmp.exception_oid_
            }
    	}
    }
    /**
     * @brief gets the exception oid of this element.
     * @return int
     */
    pub fn getExceptionOid(self) -> int {
        return self.exception_oid_
    }
}
/**
 * @brief DO class: An oracle range expr.
 */
schema OracleRangeExprDO {
    @primary oid_: int,
    low_bound_oid_: int,
    up_bound_oid_: int
}
impl OracleRangeExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleRangeExprDO {
    	for (tmp in db.oracle_range_expr) {
            yield OracleRangeExprDO {
                oid_ : tmp.oid_,
                low_bound_oid_ : tmp.low_bound_oid_,
                up_bound_oid_ : tmp.up_bound_oid_
            }
    	}
    }
    /**
     * @brief gets the low bound oid of this element.
     * @return int
     */
    pub fn getLowBoundOid(self) -> int {
        return self.low_bound_oid_
    }
    /**
     * @brief gets the up bound oid of this element.
     * @return int
     */
    pub fn getUpBoundOid(self) -> int {
        return self.up_bound_oid_
    }
}
/**
 * @brief DO class: An oracle returning clause.
 */
schema OracleReturningClauseDO {
    @primary oid_: int
}
impl OracleReturningClauseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleReturningClauseDO {
    	for (tmp in db.oracle_returning_clause) {
            yield OracleReturningClauseDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An oracle run statement.
 */
schema OracleRunStatementDO {
    @primary oid_: int,
    expr_oid_: int
}
impl OracleRunStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleRunStatementDO {
    	for (tmp in db.oracle_run_statement) {
            yield OracleRunStatementDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
}
/**
 * @brief DO class: An oracle segment attributes impl.
 */
schema OracleSegmentAttributesImplDO {
    @primary oid_: int,
    compress_: int,
    compress_level_: int,
    free_lists_: int,
    initrans_: int,
    is_compress_for_oltp_: int,
    logging_: int,
    maxtrans_: int,
    pctfree_: int,
    pctincrease_: int,
    pctthreshold_: int,
    pctused_: int,
    storage_: string,
    tablespace_oid_: int
}
impl OracleSegmentAttributesImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleSegmentAttributesImplDO {
    	for (tmp in db.oracle_segment_attributes_impl) {
            yield OracleSegmentAttributesImplDO {
                oid_ : tmp.oid_,
                compress_ : tmp.compress_,
                compress_level_ : tmp.compress_level_,
                free_lists_ : tmp.free_lists_,
                initrans_ : tmp.initrans_,
                is_compress_for_oltp_ : tmp.is_compress_for_oltp_,
                logging_ : tmp.logging_,
                maxtrans_ : tmp.maxtrans_,
                pctfree_ : tmp.pctfree_,
                pctincrease_ : tmp.pctincrease_,
                pctthreshold_ : tmp.pctthreshold_,
                pctused_ : tmp.pctused_,
                storage_ : tmp.storage_,
                tablespace_oid_ : tmp.tablespace_oid_
            }
    	}
    }
    /**
     * @brief gets the compress of this element.
     * @return int
     */
    pub fn getCompress(self) -> int {
        return self.compress_
    }
    /**
     * @brief gets the compress level of this element.
     * @return int
     */
    pub fn getCompressLevel(self) -> int {
        return self.compress_level_
    }
    /**
     * @brief gets the free lists of this element.
     * @return int
     */
    pub fn getFreeLists(self) -> int {
        return self.free_lists_
    }
    /**
     * @brief gets the initrans of this element.
     * @return int
     */
    pub fn getInitrans(self) -> int {
        return self.initrans_
    }
    /**
     * @brief gets the is compress for oltp of this element.
     * @return int
     */
    pub fn getIsCompressForOltp(self) -> int {
        return self.is_compress_for_oltp_
    }
    /**
     * @brief gets the logging of this element.
     * @return int
     */
    pub fn getLogging(self) -> int {
        return self.logging_
    }
    /**
     * @brief gets the maxtrans of this element.
     * @return int
     */
    pub fn getMaxtrans(self) -> int {
        return self.maxtrans_
    }
    /**
     * @brief gets the pctfree of this element.
     * @return int
     */
    pub fn getPctfree(self) -> int {
        return self.pctfree_
    }
    /**
     * @brief gets the pctincrease of this element.
     * @return int
     */
    pub fn getPctincrease(self) -> int {
        return self.pctincrease_
    }
    /**
     * @brief gets the pctthreshold of this element.
     * @return int
     */
    pub fn getPctthreshold(self) -> int {
        return self.pctthreshold_
    }
    /**
     * @brief gets the pctused of this element.
     * @return int
     */
    pub fn getPctused(self) -> int {
        return self.pctused_
    }
    /**
     * @brief gets the storage of this element.
     * @return string
     */
    pub fn getStorage(self) -> string {
        return self.storage_
    }
    /**
     * @brief gets the tablespace oid of this element.
     * @return int
     */
    pub fn getTablespaceOid(self) -> int {
        return self.tablespace_oid_
    }
}
/**
 * @brief DO class: An oracle select join.
 */
schema OracleSelectJoinDO {
    @primary oid_: int,
    pivot_oid_: int
}
impl OracleSelectJoinDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleSelectJoinDO {
    	for (tmp in db.oracle_select_join) {
            yield OracleSelectJoinDO {
                oid_ : tmp.oid_,
                pivot_oid_ : tmp.pivot_oid_
            }
    	}
    }
    /**
     * @brief gets the pivot oid of this element.
     * @return int
     */
    pub fn getPivotOid(self) -> int {
        return self.pivot_oid_
    }
}
/**
 * @brief DO class: An oracle select pivot.
 */
schema OracleSelectPivotDO {
    @primary oid_: int,
    is_xml_: int,
    items_: string,
    pivot_in_: string
}
impl OracleSelectPivotDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleSelectPivotDO {
    	for (tmp in db.oracle_select_pivot) {
            yield OracleSelectPivotDO {
                oid_ : tmp.oid_,
                is_xml_ : tmp.is_xml_,
                items_ : tmp.items_,
                pivot_in_ : tmp.pivot_in_
            }
    	}
    }
    /**
     * @brief gets the is xml of this element.
     * @return int
     */
    pub fn getIsXml(self) -> int {
        return self.is_xml_
    }
    /**
     * @brief gets the items of this element.
     * @return string
     */
    pub fn getItems(self) -> string {
        return self.items_
    }
    /**
     * @brief gets the pivot in of this element.
     * @return string
     */
    pub fn getPivotIn(self) -> string {
        return self.pivot_in_
    }
}
/**
 * @brief DO class: An oracle select pivot base.
 */
schema OracleSelectPivotBaseDO {
    @primary oid_: int
}
impl OracleSelectPivotBaseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleSelectPivotBaseDO {
    	for (tmp in db.oracle_select_pivot_base) {
            yield OracleSelectPivotBaseDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An oracle select query block.
 */
schema OracleSelectQueryBlockDO {
    @primary oid_: int,
    is_skip_locked_: int,
    model_clause_oid_: int
}
impl OracleSelectQueryBlockDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleSelectQueryBlockDO {
    	for (tmp in db.oracle_select_query_block) {
            yield OracleSelectQueryBlockDO {
                oid_ : tmp.oid_,
                is_skip_locked_ : tmp.is_skip_locked_,
                model_clause_oid_ : tmp.model_clause_oid_
            }
    	}
    }
    /**
     * @brief gets the is skip locked of this element.
     * @return int
     */
    pub fn getIsSkipLocked(self) -> int {
        return self.is_skip_locked_
    }
    /**
     * @brief gets the model clause oid of this element.
     * @return int
     */
    pub fn getModelClauseOid(self) -> int {
        return self.model_clause_oid_
    }
}
/**
 * @brief DO class: An oracle select restriction.
 */
schema OracleSelectRestrictionDO {
    @primary oid_: int,
    constraint_oid_: int
}
impl OracleSelectRestrictionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleSelectRestrictionDO {
    	for (tmp in db.oracle_select_restriction) {
            yield OracleSelectRestrictionDO {
                oid_ : tmp.oid_,
                constraint_oid_ : tmp.constraint_oid_
            }
    	}
    }
    /**
     * @brief gets the constraint oid of this element.
     * @return int
     */
    pub fn getConstraintOid(self) -> int {
        return self.constraint_oid_
    }
}
/**
 * @brief DO class: An oracle select subquery table source.
 */
schema OracleSelectSubqueryTableSourceDO {
    @primary oid_: int,
    pivot_oid_: int
}
impl OracleSelectSubqueryTableSourceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleSelectSubqueryTableSourceDO {
    	for (tmp in db.oracle_select_subquery_table_source) {
            yield OracleSelectSubqueryTableSourceDO {
                oid_ : tmp.oid_,
                pivot_oid_ : tmp.pivot_oid_
            }
    	}
    }
    /**
     * @brief gets the pivot oid of this element.
     * @return int
     */
    pub fn getPivotOid(self) -> int {
        return self.pivot_oid_
    }
}
/**
 * @brief DO class: An oracle select table reference.
 */
schema OracleSelectTableReferenceDO {
    @primary oid_: int,
    is_only_: int,
    partition_oid_: int,
    pivot_oid_: int,
    sample_clause_oid_: int
}
impl OracleSelectTableReferenceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleSelectTableReferenceDO {
    	for (tmp in db.oracle_select_table_reference) {
            yield OracleSelectTableReferenceDO {
                oid_ : tmp.oid_,
                is_only_ : tmp.is_only_,
                partition_oid_ : tmp.partition_oid_,
                pivot_oid_ : tmp.pivot_oid_,
                sample_clause_oid_ : tmp.sample_clause_oid_
            }
    	}
    }
    /**
     * @brief gets the is only of this element.
     * @return int
     */
    pub fn getIsOnly(self) -> int {
        return self.is_only_
    }
    /**
     * @brief gets the partition oid of this element.
     * @return int
     */
    pub fn getPartitionOid(self) -> int {
        return self.partition_oid_
    }
    /**
     * @brief gets the pivot oid of this element.
     * @return int
     */
    pub fn getPivotOid(self) -> int {
        return self.pivot_oid_
    }
    /**
     * @brief gets the sample clause oid of this element.
     * @return int
     */
    pub fn getSampleClauseOid(self) -> int {
        return self.sample_clause_oid_
    }
}
/**
 * @brief DO class: An oracle select un pivot.
 */
schema OracleSelectUnPivotDO {
    @primary oid_: int,
    nulls_include_type_: string,
    pivot_in_: string
}
impl OracleSelectUnPivotDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleSelectUnPivotDO {
    	for (tmp in db.oracle_select_un_pivot) {
            yield OracleSelectUnPivotDO {
                oid_ : tmp.oid_,
                nulls_include_type_ : tmp.nulls_include_type_,
                pivot_in_ : tmp.pivot_in_
            }
    	}
    }
    /**
     * @brief gets the nulls include type of this element.
     * @return string
     */
    pub fn getNullsIncludeType(self) -> string {
        return self.nulls_include_type_
    }
    /**
     * @brief gets the pivot in of this element.
     * @return string
     */
    pub fn getPivotIn(self) -> string {
        return self.pivot_in_
    }
}
/**
 * @brief DO class: An oracle set transaction statement.
 */
schema OracleSetTransactionStatementDO {
    @primary oid_: int,
    is_read_only_: int,
    is_write_: int,
    name_oid_: int
}
impl OracleSetTransactionStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleSetTransactionStatementDO {
    	for (tmp in db.oracle_set_transaction_statement) {
            yield OracleSetTransactionStatementDO {
                oid_ : tmp.oid_,
                is_read_only_ : tmp.is_read_only_,
                is_write_ : tmp.is_write_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is read only of this element.
     * @return int
     */
    pub fn getIsReadOnly(self) -> int {
        return self.is_read_only_
    }
    /**
     * @brief gets the is write of this element.
     * @return int
     */
    pub fn getIsWrite(self) -> int {
        return self.is_write_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: An oracle sql object impl.
 */
schema OracleSqlObjectImplDO {
    @primary oid_: int
}
impl OracleSqlObjectImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleSqlObjectImplDO {
    	for (tmp in db.oracle_sql_object_impl) {
            yield OracleSqlObjectImplDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An oracle statement impl.
 */
schema OracleStatementImplDO {
    @primary oid_: int
}
impl OracleStatementImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleStatementImplDO {
    	for (tmp in db.oracle_statement_impl) {
            yield OracleStatementImplDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An oracle storage clause.
 */
schema OracleStorageClauseDO {
    @primary oid_: int,
    buffer_pool_oid_: int,
    cell_flash_cache_: string,
    flash_cache_: string,
    free_list_groups_oid_: int,
    free_lists_oid_: int,
    initial_oid_: int,
    max_extents_oid_: int,
    max_size_oid_: int,
    min_extents_oid_: int,
    next_oid_: int,
    objno_oid_: int,
    pct_increase_oid_: int
}
impl OracleStorageClauseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleStorageClauseDO {
    	for (tmp in db.oracle_storage_clause) {
            yield OracleStorageClauseDO {
                oid_ : tmp.oid_,
                buffer_pool_oid_ : tmp.buffer_pool_oid_,
                cell_flash_cache_ : tmp.cell_flash_cache_,
                flash_cache_ : tmp.flash_cache_,
                free_list_groups_oid_ : tmp.free_list_groups_oid_,
                free_lists_oid_ : tmp.free_lists_oid_,
                initial_oid_ : tmp.initial_oid_,
                max_extents_oid_ : tmp.max_extents_oid_,
                max_size_oid_ : tmp.max_size_oid_,
                min_extents_oid_ : tmp.min_extents_oid_,
                next_oid_ : tmp.next_oid_,
                objno_oid_ : tmp.objno_oid_,
                pct_increase_oid_ : tmp.pct_increase_oid_
            }
    	}
    }
    /**
     * @brief gets the buffer pool oid of this element.
     * @return int
     */
    pub fn getBufferPoolOid(self) -> int {
        return self.buffer_pool_oid_
    }
    /**
     * @brief gets the cell flash cache of this element.
     * @return string
     */
    pub fn getCellFlashCache(self) -> string {
        return self.cell_flash_cache_
    }
    /**
     * @brief gets the flash cache of this element.
     * @return string
     */
    pub fn getFlashCache(self) -> string {
        return self.flash_cache_
    }
    /**
     * @brief gets the free list groups oid of this element.
     * @return int
     */
    pub fn getFreeListGroupsOid(self) -> int {
        return self.free_list_groups_oid_
    }
    /**
     * @brief gets the free lists oid of this element.
     * @return int
     */
    pub fn getFreeListsOid(self) -> int {
        return self.free_lists_oid_
    }
    /**
     * @brief gets the initial oid of this element.
     * @return int
     */
    pub fn getInitialOid(self) -> int {
        return self.initial_oid_
    }
    /**
     * @brief gets the max extents oid of this element.
     * @return int
     */
    pub fn getMaxExtentsOid(self) -> int {
        return self.max_extents_oid_
    }
    /**
     * @brief gets the max size oid of this element.
     * @return int
     */
    pub fn getMaxSizeOid(self) -> int {
        return self.max_size_oid_
    }
    /**
     * @brief gets the min extents oid of this element.
     * @return int
     */
    pub fn getMinExtentsOid(self) -> int {
        return self.min_extents_oid_
    }
    /**
     * @brief gets the next oid of this element.
     * @return int
     */
    pub fn getNextOid(self) -> int {
        return self.next_oid_
    }
    /**
     * @brief gets the objno oid of this element.
     * @return int
     */
    pub fn getObjnoOid(self) -> int {
        return self.objno_oid_
    }
    /**
     * @brief gets the pct increase oid of this element.
     * @return int
     */
    pub fn getPctIncreaseOid(self) -> int {
        return self.pct_increase_oid_
    }
}
/**
 * @brief DO class: An oracle supplemental id key.
 */
schema OracleSupplementalIdKeyDO {
    @primary oid_: int,
    is_all_: int,
    is_foreign_key_: int,
    is_primary_key_: int,
    is_unique_: int,
    is_unique_index_: int
}
impl OracleSupplementalIdKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleSupplementalIdKeyDO {
    	for (tmp in db.oracle_supplemental_id_key) {
            yield OracleSupplementalIdKeyDO {
                oid_ : tmp.oid_,
                is_all_ : tmp.is_all_,
                is_foreign_key_ : tmp.is_foreign_key_,
                is_primary_key_ : tmp.is_primary_key_,
                is_unique_ : tmp.is_unique_,
                is_unique_index_ : tmp.is_unique_index_
            }
    	}
    }
    /**
     * @brief gets the is all of this element.
     * @return int
     */
    pub fn getIsAll(self) -> int {
        return self.is_all_
    }
    /**
     * @brief gets the is foreign key of this element.
     * @return int
     */
    pub fn getIsForeignKey(self) -> int {
        return self.is_foreign_key_
    }
    /**
     * @brief gets the is primary key of this element.
     * @return int
     */
    pub fn getIsPrimaryKey(self) -> int {
        return self.is_primary_key_
    }
    /**
     * @brief gets the is unique of this element.
     * @return int
     */
    pub fn getIsUnique(self) -> int {
        return self.is_unique_
    }
    /**
     * @brief gets the is unique index of this element.
     * @return int
     */
    pub fn getIsUniqueIndex(self) -> int {
        return self.is_unique_index_
    }
}
/**
 * @brief DO class: An oracle supplemental log grp.
 */
schema OracleSupplementalLogGrpDO {
    @primary oid_: int,
    group_oid_: int,
    is_always_: int
}
impl OracleSupplementalLogGrpDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleSupplementalLogGrpDO {
    	for (tmp in db.oracle_supplemental_log_grp) {
            yield OracleSupplementalLogGrpDO {
                oid_ : tmp.oid_,
                group_oid_ : tmp.group_oid_,
                is_always_ : tmp.is_always_
            }
    	}
    }
    /**
     * @brief gets the group oid of this element.
     * @return int
     */
    pub fn getGroupOid(self) -> int {
        return self.group_oid_
    }
    /**
     * @brief gets the is always of this element.
     * @return int
     */
    pub fn getIsAlways(self) -> int {
        return self.is_always_
    }
}
/**
 * @brief DO class: An oracle sysdate expr.
 */
schema OracleSysdateExprDO {
    @primary oid_: int,
    option_: string
}
impl OracleSysdateExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleSysdateExprDO {
    	for (tmp in db.oracle_sysdate_expr) {
            yield OracleSysdateExprDO {
                oid_ : tmp.oid_,
                option_ : tmp.option_
            }
    	}
    }
    /**
     * @brief gets the option of this element.
     * @return string
     */
    pub fn getOption(self) -> string {
        return self.option_
    }
}
/**
 * @brief DO class: An oracle treat expr.
 */
schema OracleTreatExprDO {
    @primary oid_: int,
    expr_oid_: int,
    is_ref_: int,
    type_oid_: int
}
impl OracleTreatExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleTreatExprDO {
    	for (tmp in db.oracle_treat_expr) {
            yield OracleTreatExprDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_,
                is_ref_ : tmp.is_ref_,
                type_oid_ : tmp.type_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the is ref of this element.
     * @return int
     */
    pub fn getIsRef(self) -> int {
        return self.is_ref_
    }
    /**
     * @brief gets the type oid of this element.
     * @return int
     */
    pub fn getTypeOid(self) -> int {
        return self.type_oid_
    }
}
/**
 * @brief DO class: An oracle unique.
 */
schema OracleUniqueDO {
    @primary oid_: int,
    deferrable_: int,
    exceptions_into_oid_: int,
    initially_: string,
    using_oid_: int
}
impl OracleUniqueDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleUniqueDO {
    	for (tmp in db.oracle_unique) {
            yield OracleUniqueDO {
                oid_ : tmp.oid_,
                deferrable_ : tmp.deferrable_,
                exceptions_into_oid_ : tmp.exceptions_into_oid_,
                initially_ : tmp.initially_,
                using_oid_ : tmp.using_oid_
            }
    	}
    }
    /**
     * @brief gets the deferrable of this element.
     * @return int
     */
    pub fn getDeferrable(self) -> int {
        return self.deferrable_
    }
    /**
     * @brief gets the exceptions into oid of this element.
     * @return int
     */
    pub fn getExceptionsIntoOid(self) -> int {
        return self.exceptions_into_oid_
    }
    /**
     * @brief gets the initially of this element.
     * @return string
     */
    pub fn getInitially(self) -> string {
        return self.initially_
    }
    /**
     * @brief gets the using oid of this element.
     * @return int
     */
    pub fn getUsingOid(self) -> int {
        return self.using_oid_
    }
}
/**
 * @brief DO class: An oracle update statement.
 */
schema OracleUpdateStatementDO {
    @primary oid_: int,
    alias_: string,
    hints_size_: int,
    is_only_: int
}
impl OracleUpdateStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleUpdateStatementDO {
    	for (tmp in db.oracle_update_statement) {
            yield OracleUpdateStatementDO {
                oid_ : tmp.oid_,
                alias_ : tmp.alias_,
                hints_size_ : tmp.hints_size_,
                is_only_ : tmp.is_only_
            }
    	}
    }
    /**
     * @brief gets the alias of this element.
     * @return string
     */
    pub fn getAlias(self) -> string {
        return self.alias_
    }
    /**
     * @brief gets the hints size of this element.
     * @return int
     */
    pub fn getHintsSize(self) -> int {
        return self.hints_size_
    }
    /**
     * @brief gets the is only of this element.
     * @return int
     */
    pub fn getIsOnly(self) -> int {
        return self.is_only_
    }
}
/**
 * @brief DO class: An oracle using index clause.
 */
schema OracleUsingIndexClauseDO {
    @primary oid_: int,
    enable_: int,
    index_: string,
    is_compute_statistics_: int,
    is_reverse_: int
}
impl OracleUsingIndexClauseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleUsingIndexClauseDO {
    	for (tmp in db.oracle_using_index_clause) {
            yield OracleUsingIndexClauseDO {
                oid_ : tmp.oid_,
                enable_ : tmp.enable_,
                index_ : tmp.index_,
                is_compute_statistics_ : tmp.is_compute_statistics_,
                is_reverse_ : tmp.is_reverse_
            }
    	}
    }
    /**
     * @brief gets the enable of this element.
     * @return int
     */
    pub fn getEnable(self) -> int {
        return self.enable_
    }
    /**
     * @brief gets the index of this element.
     * @return string
     */
    pub fn getIndex(self) -> string {
        return self.index_
    }
    /**
     * @brief gets the is compute statistics of this element.
     * @return int
     */
    pub fn getIsComputeStatistics(self) -> int {
        return self.is_compute_statistics_
    }
    /**
     * @brief gets the is reverse of this element.
     * @return int
     */
    pub fn getIsReverse(self) -> int {
        return self.is_reverse_
    }
}
/**
 * @brief DO class: An oracle with subquery entry.
 */
schema OracleWithSubqueryEntryDO {
    @primary oid_: int,
    cycle_clause_oid_: int,
    search_clause_oid_: int
}
impl OracleWithSubqueryEntryDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleWithSubqueryEntryDO {
    	for (tmp in db.oracle_with_subquery_entry) {
            yield OracleWithSubqueryEntryDO {
                oid_ : tmp.oid_,
                cycle_clause_oid_ : tmp.cycle_clause_oid_,
                search_clause_oid_ : tmp.search_clause_oid_
            }
    	}
    }
    /**
     * @brief gets the cycle clause oid of this element.
     * @return int
     */
    pub fn getCycleClauseOid(self) -> int {
        return self.cycle_clause_oid_
    }
    /**
     * @brief gets the search clause oid of this element.
     * @return int
     */
    pub fn getSearchClauseOid(self) -> int {
        return self.search_clause_oid_
    }
}
/**
 * @brief DO class: An oracle xml column properties.
 */
schema OracleXmlColumnPropertiesDO {
    @primary oid_: int,
    allow_any_schema_: int,
    allow_non_schema_: int,
    column_oid_: int,
    storage_: string
}
impl OracleXmlColumnPropertiesDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OracleXmlColumnPropertiesDO {
    	for (tmp in db.oracle_xml_column_properties) {
            yield OracleXmlColumnPropertiesDO {
                oid_ : tmp.oid_,
                allow_any_schema_ : tmp.allow_any_schema_,
                allow_non_schema_ : tmp.allow_non_schema_,
                column_oid_ : tmp.column_oid_,
                storage_ : tmp.storage_
            }
    	}
    }
    /**
     * @brief gets the allow any schema of this element.
     * @return int
     */
    pub fn getAllowAnySchema(self) -> int {
        return self.allow_any_schema_
    }
    /**
     * @brief gets the allow non schema of this element.
     * @return int
     */
    pub fn getAllowNonSchema(self) -> int {
        return self.allow_non_schema_
    }
    /**
     * @brief gets the column oid of this element.
     * @return int
     */
    pub fn getColumnOid(self) -> int {
        return self.column_oid_
    }
    /**
     * @brief gets the storage of this element.
     * @return string
     */
    pub fn getStorage(self) -> string {
        return self.storage_
    }
}
/**
 * @brief DO class: An oscar alter schema statement.
 */
schema OscarAlterSchemaStatementDO {
    @primary oid_: int,
    new_name_oid_: int,
    new_owner_oid_: int,
    schema_name_oid_: int
}
impl OscarAlterSchemaStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OscarAlterSchemaStatementDO {
    	for (tmp in db.oscar_alter_schema_statement) {
            yield OscarAlterSchemaStatementDO {
                oid_ : tmp.oid_,
                new_name_oid_ : tmp.new_name_oid_,
                new_owner_oid_ : tmp.new_owner_oid_,
                schema_name_oid_ : tmp.schema_name_oid_
            }
    	}
    }
    /**
     * @brief gets the new name oid of this element.
     * @return int
     */
    pub fn getNewNameOid(self) -> int {
        return self.new_name_oid_
    }
    /**
     * @brief gets the new owner oid of this element.
     * @return int
     */
    pub fn getNewOwnerOid(self) -> int {
        return self.new_owner_oid_
    }
    /**
     * @brief gets the schema name oid of this element.
     * @return int
     */
    pub fn getSchemaNameOid(self) -> int {
        return self.schema_name_oid_
    }
}
/**
 * @brief DO class: An oscar connect to statement.
 */
schema OscarConnectToStatementDO {
    @primary oid_: int,
    target_oid_: int
}
impl OscarConnectToStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OscarConnectToStatementDO {
    	for (tmp in db.oscar_connect_to_statement) {
            yield OscarConnectToStatementDO {
                oid_ : tmp.oid_,
                target_oid_ : tmp.target_oid_
            }
    	}
    }
    /**
     * @brief gets the target oid of this element.
     * @return int
     */
    pub fn getTargetOid(self) -> int {
        return self.target_oid_
    }
}
/**
 * @brief DO class: An oscar create schema statement.
 */
schema OscarCreateSchemaStatementDO {
    @primary oid_: int,
    is_authorization_: int,
    is_if_not_exists_: int,
    schema_name_oid_: int,
    user_name_oid_: int
}
impl OscarCreateSchemaStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OscarCreateSchemaStatementDO {
    	for (tmp in db.oscar_create_schema_statement) {
            yield OscarCreateSchemaStatementDO {
                oid_ : tmp.oid_,
                is_authorization_ : tmp.is_authorization_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                schema_name_oid_ : tmp.schema_name_oid_,
                user_name_oid_ : tmp.user_name_oid_
            }
    	}
    }
    /**
     * @brief gets the is authorization of this element.
     * @return int
     */
    pub fn getIsAuthorization(self) -> int {
        return self.is_authorization_
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the schema name oid of this element.
     * @return int
     */
    pub fn getSchemaNameOid(self) -> int {
        return self.schema_name_oid_
    }
    /**
     * @brief gets the user name oid of this element.
     * @return int
     */
    pub fn getUserNameOid(self) -> int {
        return self.user_name_oid_
    }
}
/**
 * @brief DO class: An oscar delete statement.
 */
schema OscarDeleteStatementDO {
    @primary oid_: int,
    alias_: string,
    is_returning_: int
}
impl OscarDeleteStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OscarDeleteStatementDO {
    	for (tmp in db.oscar_delete_statement) {
            yield OscarDeleteStatementDO {
                oid_ : tmp.oid_,
                alias_ : tmp.alias_,
                is_returning_ : tmp.is_returning_
            }
    	}
    }
    /**
     * @brief gets the alias of this element.
     * @return string
     */
    pub fn getAlias(self) -> string {
        return self.alias_
    }
    /**
     * @brief gets the is returning of this element.
     * @return int
     */
    pub fn getIsReturning(self) -> int {
        return self.is_returning_
    }
}
/**
 * @brief DO class: An oscar drop schema statement.
 */
schema OscarDropSchemaStatementDO {
    @primary oid_: int,
    is_cascade_: int,
    is_if_exists_: int,
    is_restrict_: int,
    schema_name_oid_: int
}
impl OscarDropSchemaStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OscarDropSchemaStatementDO {
    	for (tmp in db.oscar_drop_schema_statement) {
            yield OscarDropSchemaStatementDO {
                oid_ : tmp.oid_,
                is_cascade_ : tmp.is_cascade_,
                is_if_exists_ : tmp.is_if_exists_,
                is_restrict_ : tmp.is_restrict_,
                schema_name_oid_ : tmp.schema_name_oid_
            }
    	}
    }
    /**
     * @brief gets the is cascade of this element.
     * @return int
     */
    pub fn getIsCascade(self) -> int {
        return self.is_cascade_
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the is restrict of this element.
     * @return int
     */
    pub fn getIsRestrict(self) -> int {
        return self.is_restrict_
    }
    /**
     * @brief gets the schema name oid of this element.
     * @return int
     */
    pub fn getSchemaNameOid(self) -> int {
        return self.schema_name_oid_
    }
}
/**
 * @brief DO class: An oscar function table source.
 */
schema OscarFunctionTableSourceDO {
    @primary oid_: int
}
impl OscarFunctionTableSourceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OscarFunctionTableSourceDO {
    	for (tmp in db.oscar_function_table_source) {
            yield OscarFunctionTableSourceDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An oscar insert statement.
 */
schema OscarInsertStatementDO {
    @primary oid_: int,
    is_default_values_: int,
    is_on_conflict_do_nothing_: int,
    on_conflict_constraint_oid_: int,
    on_conflict_update_where_oid_: int,
    on_conflict_where_oid_: int,
    returning_oid_: int,
    values_: string,
    values_list_: string
}
impl OscarInsertStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OscarInsertStatementDO {
    	for (tmp in db.oscar_insert_statement) {
            yield OscarInsertStatementDO {
                oid_ : tmp.oid_,
                is_default_values_ : tmp.is_default_values_,
                is_on_conflict_do_nothing_ : tmp.is_on_conflict_do_nothing_,
                on_conflict_constraint_oid_ : tmp.on_conflict_constraint_oid_,
                on_conflict_update_where_oid_ : tmp.on_conflict_update_where_oid_,
                on_conflict_where_oid_ : tmp.on_conflict_where_oid_,
                returning_oid_ : tmp.returning_oid_,
                values_ : tmp.values_,
                values_list_ : tmp.values_list_
            }
    	}
    }
    /**
     * @brief gets the is default values of this element.
     * @return int
     */
    pub fn getIsDefaultValues(self) -> int {
        return self.is_default_values_
    }
    /**
     * @brief gets the is on conflict do nothing of this element.
     * @return int
     */
    pub fn getIsOnConflictDoNothing(self) -> int {
        return self.is_on_conflict_do_nothing_
    }
    /**
     * @brief gets the on conflict constraint oid of this element.
     * @return int
     */
    pub fn getOnConflictConstraintOid(self) -> int {
        return self.on_conflict_constraint_oid_
    }
    /**
     * @brief gets the on conflict update where oid of this element.
     * @return int
     */
    pub fn getOnConflictUpdateWhereOid(self) -> int {
        return self.on_conflict_update_where_oid_
    }
    /**
     * @brief gets the on conflict where oid of this element.
     * @return int
     */
    pub fn getOnConflictWhereOid(self) -> int {
        return self.on_conflict_where_oid_
    }
    /**
     * @brief gets the returning oid of this element.
     * @return int
     */
    pub fn getReturningOid(self) -> int {
        return self.returning_oid_
    }
    /**
     * @brief gets the values of this element.
     * @return string
     */
    pub fn getValues(self) -> string {
        return self.values_
    }
    /**
     * @brief gets the values list of this element.
     * @return string
     */
    pub fn getValuesList(self) -> string {
        return self.values_list_
    }
}
/**
 * @brief DO class: An oscar object impl.
 */
schema OscarObjectImplDO {
    @primary oid_: int
}
impl OscarObjectImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OscarObjectImplDO {
    	for (tmp in db.oscar_object_impl) {
            yield OscarObjectImplDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An oscar select query block.
 */
schema OscarSelectQueryBlockDO {
    @primary oid_: int,
    fetch_: string,
    for_clause_: string,
    into_option_local_: string,
    into_option_temp_: string,
    top_oid_: int
}
impl OscarSelectQueryBlockDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OscarSelectQueryBlockDO {
    	for (tmp in db.oscar_select_query_block) {
            yield OscarSelectQueryBlockDO {
                oid_ : tmp.oid_,
                fetch_ : tmp.fetch_,
                for_clause_ : tmp.for_clause_,
                into_option_local_ : tmp.into_option_local_,
                into_option_temp_ : tmp.into_option_temp_,
                top_oid_ : tmp.top_oid_
            }
    	}
    }
    /**
     * @brief gets the fetch of this element.
     * @return string
     */
    pub fn getFetch(self) -> string {
        return self.fetch_
    }
    /**
     * @brief gets the for clause of this element.
     * @return string
     */
    pub fn getForClause(self) -> string {
        return self.for_clause_
    }
    /**
     * @brief gets the into option local of this element.
     * @return string
     */
    pub fn getIntoOptionLocal(self) -> string {
        return self.into_option_local_
    }
    /**
     * @brief gets the into option temp of this element.
     * @return string
     */
    pub fn getIntoOptionTemp(self) -> string {
        return self.into_option_temp_
    }
    /**
     * @brief gets the top oid of this element.
     * @return int
     */
    pub fn getTopOid(self) -> int {
        return self.top_oid_
    }
}
/**
 * @brief DO class: An oscar select statement.
 */
schema OscarSelectStatementDO {
    @primary oid_: int
}
impl OscarSelectStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OscarSelectStatementDO {
    	for (tmp in db.oscar_select_statement) {
            yield OscarSelectStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An oscar show statement.
 */
schema OscarShowStatementDO {
    @primary oid_: int,
    expr_oid_: int
}
impl OscarShowStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OscarShowStatementDO {
    	for (tmp in db.oscar_show_statement) {
            yield OscarShowStatementDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
}
/**
 * @brief DO class: An oscar start transaction statement.
 */
schema OscarStartTransactionStatementDO {
    @primary oid_: int
}
impl OscarStartTransactionStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OscarStartTransactionStatementDO {
    	for (tmp in db.oscar_start_transaction_statement) {
            yield OscarStartTransactionStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: An oscar top.
 */
schema OscarTopDO {
    @primary oid_: int,
    expr_oid_: int,
    is_percent_: int,
    is_with_ties_: int
}
impl OscarTopDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OscarTopDO {
    	for (tmp in db.oscar_top) {
            yield OscarTopDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_,
                is_percent_ : tmp.is_percent_,
                is_with_ties_ : tmp.is_with_ties_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the is percent of this element.
     * @return int
     */
    pub fn getIsPercent(self) -> int {
        return self.is_percent_
    }
    /**
     * @brief gets the is with ties of this element.
     * @return int
     */
    pub fn getIsWithTies(self) -> int {
        return self.is_with_ties_
    }
}
/**
 * @brief DO class: An oscar update statement.
 */
schema OscarUpdateStatementDO {
    @primary oid_: int,
    is_only_: int
}
impl OscarUpdateStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *OscarUpdateStatementDO {
    	for (tmp in db.oscar_update_statement) {
            yield OscarUpdateStatementDO {
                oid_ : tmp.oid_,
                is_only_ : tmp.is_only_
            }
    	}
    }
    /**
     * @brief gets the is only of this element.
     * @return int
     */
    pub fn getIsOnly(self) -> int {
        return self.is_only_
    }
}
/**
 * @brief DO class: A partition extension clause.
 */
schema PartitionExtensionClauseDO {
    @primary oid_: int,
    is_sub_partition_: int,
    partition_oid_: int
}
impl PartitionExtensionClauseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PartitionExtensionClauseDO {
    	for (tmp in db.partition_extension_clause) {
            yield PartitionExtensionClauseDO {
                oid_ : tmp.oid_,
                is_sub_partition_ : tmp.is_sub_partition_,
                partition_oid_ : tmp.partition_oid_
            }
    	}
    }
    /**
     * @brief gets the is sub partition of this element.
     * @return int
     */
    pub fn getIsSubPartition(self) -> int {
        return self.is_sub_partition_
    }
    /**
     * @brief gets the partition oid of this element.
     * @return int
     */
    pub fn getPartitionOid(self) -> int {
        return self.partition_oid_
    }
}
/**
 * @brief DO class: A pg alter schema statement.
 */
schema PgAlterSchemaStatementDO {
    @primary oid_: int,
    new_name_oid_: int,
    new_owner_oid_: int,
    schema_name_oid_: int
}
impl PgAlterSchemaStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgAlterSchemaStatementDO {
    	for (tmp in db.pg_alter_schema_statement) {
            yield PgAlterSchemaStatementDO {
                oid_ : tmp.oid_,
                new_name_oid_ : tmp.new_name_oid_,
                new_owner_oid_ : tmp.new_owner_oid_,
                schema_name_oid_ : tmp.schema_name_oid_
            }
    	}
    }
    /**
     * @brief gets the new name oid of this element.
     * @return int
     */
    pub fn getNewNameOid(self) -> int {
        return self.new_name_oid_
    }
    /**
     * @brief gets the new owner oid of this element.
     * @return int
     */
    pub fn getNewOwnerOid(self) -> int {
        return self.new_owner_oid_
    }
    /**
     * @brief gets the schema name oid of this element.
     * @return int
     */
    pub fn getSchemaNameOid(self) -> int {
        return self.schema_name_oid_
    }
}
/**
 * @brief DO class: A pg box expr.
 */
schema PgBoxExprDO {
    @primary oid_: int,
    value_oid_: int
}
impl PgBoxExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgBoxExprDO {
    	for (tmp in db.pg_box_expr) {
            yield PgBoxExprDO {
                oid_ : tmp.oid_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A pg cidr expr.
 */
schema PgCidrExprDO {
    @primary oid_: int,
    value_oid_: int
}
impl PgCidrExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgCidrExprDO {
    	for (tmp in db.pg_cidr_expr) {
            yield PgCidrExprDO {
                oid_ : tmp.oid_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A pg circle expr.
 */
schema PgCircleExprDO {
    @primary oid_: int,
    value_oid_: int
}
impl PgCircleExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgCircleExprDO {
    	for (tmp in db.pg_circle_expr) {
            yield PgCircleExprDO {
                oid_ : tmp.oid_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A pg connect to statement.
 */
schema PgConnectToStatementDO {
    @primary oid_: int,
    target_oid_: int
}
impl PgConnectToStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgConnectToStatementDO {
    	for (tmp in db.pg_connect_to_statement) {
            yield PgConnectToStatementDO {
                oid_ : tmp.oid_,
                target_oid_ : tmp.target_oid_
            }
    	}
    }
    /**
     * @brief gets the target oid of this element.
     * @return int
     */
    pub fn getTargetOid(self) -> int {
        return self.target_oid_
    }
}
/**
 * @brief DO class: A pg create schema statement.
 */
schema PgCreateSchemaStatementDO {
    @primary oid_: int,
    is_authorization_: int,
    is_if_not_exists_: int,
    schema_name_oid_: int,
    user_name_oid_: int
}
impl PgCreateSchemaStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgCreateSchemaStatementDO {
    	for (tmp in db.pg_create_schema_statement) {
            yield PgCreateSchemaStatementDO {
                oid_ : tmp.oid_,
                is_authorization_ : tmp.is_authorization_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                schema_name_oid_ : tmp.schema_name_oid_,
                user_name_oid_ : tmp.user_name_oid_
            }
    	}
    }
    /**
     * @brief gets the is authorization of this element.
     * @return int
     */
    pub fn getIsAuthorization(self) -> int {
        return self.is_authorization_
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the schema name oid of this element.
     * @return int
     */
    pub fn getSchemaNameOid(self) -> int {
        return self.schema_name_oid_
    }
    /**
     * @brief gets the user name oid of this element.
     * @return int
     */
    pub fn getUserNameOid(self) -> int {
        return self.user_name_oid_
    }
}
/**
 * @brief DO class: A pg delete statement.
 */
schema PgDeleteStatementDO {
    @primary oid_: int,
    alias_: string,
    is_returning_: int
}
impl PgDeleteStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgDeleteStatementDO {
    	for (tmp in db.pg_delete_statement) {
            yield PgDeleteStatementDO {
                oid_ : tmp.oid_,
                alias_ : tmp.alias_,
                is_returning_ : tmp.is_returning_
            }
    	}
    }
    /**
     * @brief gets the alias of this element.
     * @return string
     */
    pub fn getAlias(self) -> string {
        return self.alias_
    }
    /**
     * @brief gets the is returning of this element.
     * @return int
     */
    pub fn getIsReturning(self) -> int {
        return self.is_returning_
    }
}
/**
 * @brief DO class: A pg drop schema statement.
 */
schema PgDropSchemaStatementDO {
    @primary oid_: int,
    is_cascade_: int,
    is_if_exists_: int,
    is_restrict_: int,
    schema_name_oid_: int
}
impl PgDropSchemaStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgDropSchemaStatementDO {
    	for (tmp in db.pg_drop_schema_statement) {
            yield PgDropSchemaStatementDO {
                oid_ : tmp.oid_,
                is_cascade_ : tmp.is_cascade_,
                is_if_exists_ : tmp.is_if_exists_,
                is_restrict_ : tmp.is_restrict_,
                schema_name_oid_ : tmp.schema_name_oid_
            }
    	}
    }
    /**
     * @brief gets the is cascade of this element.
     * @return int
     */
    pub fn getIsCascade(self) -> int {
        return self.is_cascade_
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the is restrict of this element.
     * @return int
     */
    pub fn getIsRestrict(self) -> int {
        return self.is_restrict_
    }
    /**
     * @brief gets the schema name oid of this element.
     * @return int
     */
    pub fn getSchemaNameOid(self) -> int {
        return self.schema_name_oid_
    }
}
/**
 * @brief DO class: A pg expr impl.
 */
schema PgExprImplDO {
    @primary oid_: int
}
impl PgExprImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgExprImplDO {
    	for (tmp in db.pg_expr_impl) {
            yield PgExprImplDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A pg extract expr.
 */
schema PgExtractExprDO {
    @primary oid_: int,
    field_: string,
    source_oid_: int
}
impl PgExtractExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgExtractExprDO {
    	for (tmp in db.pg_extract_expr) {
            yield PgExtractExprDO {
                oid_ : tmp.oid_,
                field_ : tmp.field_,
                source_oid_ : tmp.source_oid_
            }
    	}
    }
    /**
     * @brief gets the field of this element.
     * @return string
     */
    pub fn getField(self) -> string {
        return self.field_
    }
    /**
     * @brief gets the source oid of this element.
     * @return int
     */
    pub fn getSourceOid(self) -> int {
        return self.source_oid_
    }
}
/**
 * @brief DO class: A pg function table source.
 */
schema PgFunctionTableSourceDO {
    @primary oid_: int
}
impl PgFunctionTableSourceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgFunctionTableSourceDO {
    	for (tmp in db.pg_function_table_source) {
            yield PgFunctionTableSourceDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A pg inet expr.
 */
schema PgInetExprDO {
    @primary oid_: int,
    value_oid_: int
}
impl PgInetExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgInetExprDO {
    	for (tmp in db.pg_inet_expr) {
            yield PgInetExprDO {
                oid_ : tmp.oid_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A pg insert statement.
 */
schema PgInsertStatementDO {
    @primary oid_: int,
    is_default_values_: int,
    is_on_conflict_do_nothing_: int,
    on_conflict_constraint_oid_: int,
    on_conflict_update_where_oid_: int,
    on_conflict_where_oid_: int,
    returning_oid_: int,
    values_: string,
    values_list_: string
}
impl PgInsertStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgInsertStatementDO {
    	for (tmp in db.pg_insert_statement) {
            yield PgInsertStatementDO {
                oid_ : tmp.oid_,
                is_default_values_ : tmp.is_default_values_,
                is_on_conflict_do_nothing_ : tmp.is_on_conflict_do_nothing_,
                on_conflict_constraint_oid_ : tmp.on_conflict_constraint_oid_,
                on_conflict_update_where_oid_ : tmp.on_conflict_update_where_oid_,
                on_conflict_where_oid_ : tmp.on_conflict_where_oid_,
                returning_oid_ : tmp.returning_oid_,
                values_ : tmp.values_,
                values_list_ : tmp.values_list_
            }
    	}
    }
    /**
     * @brief gets the is default values of this element.
     * @return int
     */
    pub fn getIsDefaultValues(self) -> int {
        return self.is_default_values_
    }
    /**
     * @brief gets the is on conflict do nothing of this element.
     * @return int
     */
    pub fn getIsOnConflictDoNothing(self) -> int {
        return self.is_on_conflict_do_nothing_
    }
    /**
     * @brief gets the on conflict constraint oid of this element.
     * @return int
     */
    pub fn getOnConflictConstraintOid(self) -> int {
        return self.on_conflict_constraint_oid_
    }
    /**
     * @brief gets the on conflict update where oid of this element.
     * @return int
     */
    pub fn getOnConflictUpdateWhereOid(self) -> int {
        return self.on_conflict_update_where_oid_
    }
    /**
     * @brief gets the on conflict where oid of this element.
     * @return int
     */
    pub fn getOnConflictWhereOid(self) -> int {
        return self.on_conflict_where_oid_
    }
    /**
     * @brief gets the returning oid of this element.
     * @return int
     */
    pub fn getReturningOid(self) -> int {
        return self.returning_oid_
    }
    /**
     * @brief gets the values of this element.
     * @return string
     */
    pub fn getValues(self) -> string {
        return self.values_
    }
    /**
     * @brief gets the values list of this element.
     * @return string
     */
    pub fn getValuesList(self) -> string {
        return self.values_list_
    }
}
/**
 * @brief DO class: A pg line segments expr.
 */
schema PgLineSegmentsExprDO {
    @primary oid_: int,
    value_oid_: int
}
impl PgLineSegmentsExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgLineSegmentsExprDO {
    	for (tmp in db.pg_line_segments_expr) {
            yield PgLineSegmentsExprDO {
                oid_ : tmp.oid_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A pg mac addr expr.
 */
schema PgMacAddrExprDO {
    @primary oid_: int,
    value_oid_: int
}
impl PgMacAddrExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgMacAddrExprDO {
    	for (tmp in db.pg_mac_addr_expr) {
            yield PgMacAddrExprDO {
                oid_ : tmp.oid_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A pg point expr.
 */
schema PgPointExprDO {
    @primary oid_: int,
    value_oid_: int
}
impl PgPointExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgPointExprDO {
    	for (tmp in db.pg_point_expr) {
            yield PgPointExprDO {
                oid_ : tmp.oid_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A pg polygon expr.
 */
schema PgPolygonExprDO {
    @primary oid_: int,
    value_oid_: int
}
impl PgPolygonExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgPolygonExprDO {
    	for (tmp in db.pg_polygon_expr) {
            yield PgPolygonExprDO {
                oid_ : tmp.oid_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A pg select query block.
 */
schema PgSelectQueryBlockDO {
    @primary oid_: int,
    fetch_: string,
    for_clause_: string,
    into_option_: string
}
impl PgSelectQueryBlockDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgSelectQueryBlockDO {
    	for (tmp in db.pg_select_query_block) {
            yield PgSelectQueryBlockDO {
                oid_ : tmp.oid_,
                fetch_ : tmp.fetch_,
                for_clause_ : tmp.for_clause_,
                into_option_ : tmp.into_option_
            }
    	}
    }
    /**
     * @brief gets the fetch of this element.
     * @return string
     */
    pub fn getFetch(self) -> string {
        return self.fetch_
    }
    /**
     * @brief gets the for clause of this element.
     * @return string
     */
    pub fn getForClause(self) -> string {
        return self.for_clause_
    }
    /**
     * @brief gets the into option of this element.
     * @return string
     */
    pub fn getIntoOption(self) -> string {
        return self.into_option_
    }
}
/**
 * @brief DO class: A pg select statement.
 */
schema PgSelectStatementDO {
    @primary oid_: int
}
impl PgSelectStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgSelectStatementDO {
    	for (tmp in db.pg_select_statement) {
            yield PgSelectStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A pg show statement.
 */
schema PgShowStatementDO {
    @primary oid_: int,
    expr_oid_: int
}
impl PgShowStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgShowStatementDO {
    	for (tmp in db.pg_show_statement) {
            yield PgShowStatementDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
}
/**
 * @brief DO class: A pg start transaction statement.
 */
schema PgStartTransactionStatementDO {
    @primary oid_: int
}
impl PgStartTransactionStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgStartTransactionStatementDO {
    	for (tmp in db.pg_start_transaction_statement) {
            yield PgStartTransactionStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A pg type cast expr.
 */
schema PgTypeCastExprDO {
    @primary oid_: int
}
impl PgTypeCastExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgTypeCastExprDO {
    	for (tmp in db.pg_type_cast_expr) {
            yield PgTypeCastExprDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A pg update statement.
 */
schema PgUpdateStatementDO {
    @primary oid_: int,
    is_only_: int
}
impl PgUpdateStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgUpdateStatementDO {
    	for (tmp in db.pg_update_statement) {
            yield PgUpdateStatementDO {
                oid_ : tmp.oid_,
                is_only_ : tmp.is_only_
            }
    	}
    }
    /**
     * @brief gets the is only of this element.
     * @return int
     */
    pub fn getIsOnly(self) -> int {
        return self.is_only_
    }
}
/**
 * @brief DO class: A pgsql object impl.
 */
schema PgsqlObjectImplDO {
    @primary oid_: int
}
impl PgsqlObjectImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PgsqlObjectImplDO {
    	for (tmp in db.pgsql_object_impl) {
            yield PgsqlObjectImplDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A phoenix statement impl.
 */
schema PhoenixStatementImplDO {
    @primary oid_: int
}
impl PhoenixStatementImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *PhoenixStatementImplDO {
    	for (tmp in db.phoenix_statement_impl) {
            yield PhoenixStatementImplDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sample clause.
 */
schema SampleClauseDO {
    @primary oid_: int,
    is_block_: int,
    seed_value_oid_: int
}
impl SampleClauseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SampleClauseDO {
    	for (tmp in db.sample_clause) {
            yield SampleClauseDO {
                oid_ : tmp.oid_,
                is_block_ : tmp.is_block_,
                seed_value_oid_ : tmp.seed_value_oid_
            }
    	}
    }
    /**
     * @brief gets the is block of this element.
     * @return int
     */
    pub fn getIsBlock(self) -> int {
        return self.is_block_
    }
    /**
     * @brief gets the seed value oid of this element.
     * @return int
     */
    pub fn getSeedValueOid(self) -> int {
        return self.seed_value_oid_
    }
}
/**
 * @brief DO class: A search clause.
 */
schema SearchClauseDO {
    @primary oid_: int,
    ordering_column_oid_: int,
    type_: string
}
impl SearchClauseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SearchClauseDO {
    	for (tmp in db.search_clause) {
            yield SearchClauseDO {
                oid_ : tmp.oid_,
                ordering_column_oid_ : tmp.ordering_column_oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the ordering column oid of this element.
     * @return int
     */
    pub fn getOrderingColumnOid(self) -> int {
        return self.ordering_column_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A sql adhoc table source.
 */
schema SqlAdhocTableSourceDO {
    @primary oid_: int,
    definition_oid_: int
}
impl SqlAdhocTableSourceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAdhocTableSourceDO {
    	for (tmp in db.sql_adhoc_table_source) {
            yield SqlAdhocTableSourceDO {
                oid_ : tmp.oid_,
                definition_oid_ : tmp.definition_oid_
            }
    	}
    }
    /**
     * @brief gets the definition oid of this element.
     * @return int
     */
    pub fn getDefinitionOid(self) -> int {
        return self.definition_oid_
    }
}
/**
 * @brief DO class: A sql aggregate expr.
 */
schema SqlAggregateExprDO {
    @primary oid_: int,
    filter_oid_: int,
    ignore_nulls_: int,
    is_distinct_: int,
    is_ignore_nulls_: int,
    is_within_group_: int,
    keep_oid_: int,
    option_: string,
    order_by_oid_: int,
    over_oid_: int,
    over_ref_oid_: int
}
impl SqlAggregateExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAggregateExprDO {
    	for (tmp in db.sql_aggregate_expr) {
            yield SqlAggregateExprDO {
                oid_ : tmp.oid_,
                filter_oid_ : tmp.filter_oid_,
                ignore_nulls_ : tmp.ignore_nulls_,
                is_distinct_ : tmp.is_distinct_,
                is_ignore_nulls_ : tmp.is_ignore_nulls_,
                is_within_group_ : tmp.is_within_group_,
                keep_oid_ : tmp.keep_oid_,
                option_ : tmp.option_,
                order_by_oid_ : tmp.order_by_oid_,
                over_oid_ : tmp.over_oid_,
                over_ref_oid_ : tmp.over_ref_oid_
            }
    	}
    }
    /**
     * @brief gets the filter oid of this element.
     * @return int
     */
    pub fn getFilterOid(self) -> int {
        return self.filter_oid_
    }
    /**
     * @brief gets the ignore nulls of this element.
     * @return int
     */
    pub fn getIgnoreNulls(self) -> int {
        return self.ignore_nulls_
    }
    /**
     * @brief gets the is distinct of this element.
     * @return int
     */
    pub fn getIsDistinct(self) -> int {
        return self.is_distinct_
    }
    /**
     * @brief gets the is ignore nulls of this element.
     * @return int
     */
    pub fn getIsIgnoreNulls(self) -> int {
        return self.is_ignore_nulls_
    }
    /**
     * @brief gets the is within group of this element.
     * @return int
     */
    pub fn getIsWithinGroup(self) -> int {
        return self.is_within_group_
    }
    /**
     * @brief gets the keep oid of this element.
     * @return int
     */
    pub fn getKeepOid(self) -> int {
        return self.keep_oid_
    }
    /**
     * @brief gets the option of this element.
     * @return string
     */
    pub fn getOption(self) -> string {
        return self.option_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the over oid of this element.
     * @return int
     */
    pub fn getOverOid(self) -> int {
        return self.over_oid_
    }
    /**
     * @brief gets the over ref oid of this element.
     * @return int
     */
    pub fn getOverRefOid(self) -> int {
        return self.over_ref_oid_
    }
}
/**
 * @brief DO class: A sql all column expr.
 */
schema SqlAllColumnExprDO {
    @primary oid_: int,
    resolved_table_source_oid_: int
}
impl SqlAllColumnExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAllColumnExprDO {
    	for (tmp in db.sql_all_column_expr) {
            yield SqlAllColumnExprDO {
                oid_ : tmp.oid_,
                resolved_table_source_oid_ : tmp.resolved_table_source_oid_
            }
    	}
    }
    /**
     * @brief gets the resolved table source oid of this element.
     * @return int
     */
    pub fn getResolvedTableSourceOid(self) -> int {
        return self.resolved_table_source_oid_
    }
}
/**
 * @brief DO class: A sql all expr.
 */
schema SqlAllExprDO {
    @primary oid_: int,
    sub_query_oid_: int
}
impl SqlAllExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAllExprDO {
    	for (tmp in db.sql_all_expr) {
            yield SqlAllExprDO {
                oid_ : tmp.oid_,
                sub_query_oid_ : tmp.sub_query_oid_
            }
    	}
    }
    /**
     * @brief gets the sub query oid of this element.
     * @return int
     */
    pub fn getSubQueryOid(self) -> int {
        return self.sub_query_oid_
    }
}
/**
 * @brief DO class: A sql alter character.
 */
schema SqlAlterCharacterDO {
    @primary oid_: int,
    character_set_oid_: int,
    collate_oid_: int
}
impl SqlAlterCharacterDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterCharacterDO {
    	for (tmp in db.sql_alter_character) {
            yield SqlAlterCharacterDO {
                oid_ : tmp.oid_,
                character_set_oid_ : tmp.character_set_oid_,
                collate_oid_ : tmp.collate_oid_
            }
    	}
    }
    /**
     * @brief gets the character set oid of this element.
     * @return int
     */
    pub fn getCharacterSetOid(self) -> int {
        return self.character_set_oid_
    }
    /**
     * @brief gets the collate oid of this element.
     * @return int
     */
    pub fn getCollateOid(self) -> int {
        return self.collate_oid_
    }
}
/**
 * @brief DO class: A sql alter database statement.
 */
schema SqlAlterDatabaseStatementDO {
    @primary oid_: int,
    character_oid_: int,
    is_upgrade_data_directory_name_: int,
    item_oid_: int,
    name_oid_: int
}
impl SqlAlterDatabaseStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterDatabaseStatementDO {
    	for (tmp in db.sql_alter_database_statement) {
            yield SqlAlterDatabaseStatementDO {
                oid_ : tmp.oid_,
                character_oid_ : tmp.character_oid_,
                is_upgrade_data_directory_name_ : tmp.is_upgrade_data_directory_name_,
                item_oid_ : tmp.item_oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the character oid of this element.
     * @return int
     */
    pub fn getCharacterOid(self) -> int {
        return self.character_oid_
    }
    /**
     * @brief gets the is upgrade data directory name of this element.
     * @return int
     */
    pub fn getIsUpgradeDataDirectoryName(self) -> int {
        return self.is_upgrade_data_directory_name_
    }
    /**
     * @brief gets the item oid of this element.
     * @return int
     */
    pub fn getItemOid(self) -> int {
        return self.item_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql alter function statement.
 */
schema SqlAlterFunctionStatementDO {
    @primary oid_: int,
    comment_oid_: int,
    is_contains_sql_: int,
    is_debug_: int,
    is_language_sql_: int,
    is_reuse_settings_: int,
    name_oid_: int,
    sql_security_oid_: int
}
impl SqlAlterFunctionStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterFunctionStatementDO {
    	for (tmp in db.sql_alter_function_statement) {
            yield SqlAlterFunctionStatementDO {
                oid_ : tmp.oid_,
                comment_oid_ : tmp.comment_oid_,
                is_contains_sql_ : tmp.is_contains_sql_,
                is_debug_ : tmp.is_debug_,
                is_language_sql_ : tmp.is_language_sql_,
                is_reuse_settings_ : tmp.is_reuse_settings_,
                name_oid_ : tmp.name_oid_,
                sql_security_oid_ : tmp.sql_security_oid_
            }
    	}
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the is contains sql of this element.
     * @return int
     */
    pub fn getIsContainsSql(self) -> int {
        return self.is_contains_sql_
    }
    /**
     * @brief gets the is debug of this element.
     * @return int
     */
    pub fn getIsDebug(self) -> int {
        return self.is_debug_
    }
    /**
     * @brief gets the is language sql of this element.
     * @return int
     */
    pub fn getIsLanguageSql(self) -> int {
        return self.is_language_sql_
    }
    /**
     * @brief gets the is reuse settings of this element.
     * @return int
     */
    pub fn getIsReuseSettings(self) -> int {
        return self.is_reuse_settings_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the sql security oid of this element.
     * @return int
     */
    pub fn getSqlSecurityOid(self) -> int {
        return self.sql_security_oid_
    }
}
/**
 * @brief DO class: A sql alter index statement.
 */
schema SqlAlterIndexStatementDO {
    @primary oid_: int,
    db_partition_by_oid_: int,
    enable_: int,
    is_compile_: int,
    is_unusable_: int,
    monitoring_usage_: int,
    name_oid_: int,
    parallel_oid_: int,
    rebuild_: string,
    rename_to_oid_: int,
    table_oid_: int
}
impl SqlAlterIndexStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterIndexStatementDO {
    	for (tmp in db.sql_alter_index_statement) {
            yield SqlAlterIndexStatementDO {
                oid_ : tmp.oid_,
                db_partition_by_oid_ : tmp.db_partition_by_oid_,
                enable_ : tmp.enable_,
                is_compile_ : tmp.is_compile_,
                is_unusable_ : tmp.is_unusable_,
                monitoring_usage_ : tmp.monitoring_usage_,
                name_oid_ : tmp.name_oid_,
                parallel_oid_ : tmp.parallel_oid_,
                rebuild_ : tmp.rebuild_,
                rename_to_oid_ : tmp.rename_to_oid_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the db partition by oid of this element.
     * @return int
     */
    pub fn getDbPartitionByOid(self) -> int {
        return self.db_partition_by_oid_
    }
    /**
     * @brief gets the enable of this element.
     * @return int
     */
    pub fn getEnable(self) -> int {
        return self.enable_
    }
    /**
     * @brief gets the is compile of this element.
     * @return int
     */
    pub fn getIsCompile(self) -> int {
        return self.is_compile_
    }
    /**
     * @brief gets the is unusable of this element.
     * @return int
     */
    pub fn getIsUnusable(self) -> int {
        return self.is_unusable_
    }
    /**
     * @brief gets the monitoring usage of this element.
     * @return int
     */
    pub fn getMonitoringUsage(self) -> int {
        return self.monitoring_usage_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the parallel oid of this element.
     * @return int
     */
    pub fn getParallelOid(self) -> int {
        return self.parallel_oid_
    }
    /**
     * @brief gets the rebuild of this element.
     * @return string
     */
    pub fn getRebuild(self) -> string {
        return self.rebuild_
    }
    /**
     * @brief gets the rename to oid of this element.
     * @return int
     */
    pub fn getRenameToOid(self) -> int {
        return self.rename_to_oid_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: A sql alter materialized view statement.
 */
schema SqlAlterMaterializedViewStatementDO {
    @primary oid_: int,
    enable_query_rewrite_: int,
    is_rebuild_: int,
    is_refresh_: int,
    is_refresh_complete_: int,
    is_refresh_fast_: int,
    is_refresh_force_: int,
    is_refresh_next_: int,
    is_refresh_on_commit_: int,
    is_refresh_on_demand_: int,
    is_refresh_on_over_write_: int,
    is_refresh_start_with_: int,
    name_oid_: int,
    next_oid_: int,
    start_with_oid_: int
}
impl SqlAlterMaterializedViewStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterMaterializedViewStatementDO {
    	for (tmp in db.sql_alter_materialized_view_statement) {
            yield SqlAlterMaterializedViewStatementDO {
                oid_ : tmp.oid_,
                enable_query_rewrite_ : tmp.enable_query_rewrite_,
                is_rebuild_ : tmp.is_rebuild_,
                is_refresh_ : tmp.is_refresh_,
                is_refresh_complete_ : tmp.is_refresh_complete_,
                is_refresh_fast_ : tmp.is_refresh_fast_,
                is_refresh_force_ : tmp.is_refresh_force_,
                is_refresh_next_ : tmp.is_refresh_next_,
                is_refresh_on_commit_ : tmp.is_refresh_on_commit_,
                is_refresh_on_demand_ : tmp.is_refresh_on_demand_,
                is_refresh_on_over_write_ : tmp.is_refresh_on_over_write_,
                is_refresh_start_with_ : tmp.is_refresh_start_with_,
                name_oid_ : tmp.name_oid_,
                next_oid_ : tmp.next_oid_,
                start_with_oid_ : tmp.start_with_oid_
            }
    	}
    }
    /**
     * @brief gets the enable query rewrite of this element.
     * @return int
     */
    pub fn getEnableQueryRewrite(self) -> int {
        return self.enable_query_rewrite_
    }
    /**
     * @brief gets the is rebuild of this element.
     * @return int
     */
    pub fn getIsRebuild(self) -> int {
        return self.is_rebuild_
    }
    /**
     * @brief gets the is refresh of this element.
     * @return int
     */
    pub fn getIsRefresh(self) -> int {
        return self.is_refresh_
    }
    /**
     * @brief gets the is refresh complete of this element.
     * @return int
     */
    pub fn getIsRefreshComplete(self) -> int {
        return self.is_refresh_complete_
    }
    /**
     * @brief gets the is refresh fast of this element.
     * @return int
     */
    pub fn getIsRefreshFast(self) -> int {
        return self.is_refresh_fast_
    }
    /**
     * @brief gets the is refresh force of this element.
     * @return int
     */
    pub fn getIsRefreshForce(self) -> int {
        return self.is_refresh_force_
    }
    /**
     * @brief gets the is refresh next of this element.
     * @return int
     */
    pub fn getIsRefreshNext(self) -> int {
        return self.is_refresh_next_
    }
    /**
     * @brief gets the is refresh on commit of this element.
     * @return int
     */
    pub fn getIsRefreshOnCommit(self) -> int {
        return self.is_refresh_on_commit_
    }
    /**
     * @brief gets the is refresh on demand of this element.
     * @return int
     */
    pub fn getIsRefreshOnDemand(self) -> int {
        return self.is_refresh_on_demand_
    }
    /**
     * @brief gets the is refresh on over write of this element.
     * @return int
     */
    pub fn getIsRefreshOnOverWrite(self) -> int {
        return self.is_refresh_on_over_write_
    }
    /**
     * @brief gets the is refresh start with of this element.
     * @return int
     */
    pub fn getIsRefreshStartWith(self) -> int {
        return self.is_refresh_start_with_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the next oid of this element.
     * @return int
     */
    pub fn getNextOid(self) -> int {
        return self.next_oid_
    }
    /**
     * @brief gets the start with oid of this element.
     * @return int
     */
    pub fn getStartWithOid(self) -> int {
        return self.start_with_oid_
    }
}
/**
 * @brief DO class: A sql alter outline statement.
 */
schema SqlAlterOutlineStatementDO {
    @primary oid_: int,
    is_disable_: int,
    is_enable_: int,
    is_resync_: int,
    name_oid_: int
}
impl SqlAlterOutlineStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterOutlineStatementDO {
    	for (tmp in db.sql_alter_outline_statement) {
            yield SqlAlterOutlineStatementDO {
                oid_ : tmp.oid_,
                is_disable_ : tmp.is_disable_,
                is_enable_ : tmp.is_enable_,
                is_resync_ : tmp.is_resync_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is disable of this element.
     * @return int
     */
    pub fn getIsDisable(self) -> int {
        return self.is_disable_
    }
    /**
     * @brief gets the is enable of this element.
     * @return int
     */
    pub fn getIsEnable(self) -> int {
        return self.is_enable_
    }
    /**
     * @brief gets the is resync of this element.
     * @return int
     */
    pub fn getIsResync(self) -> int {
        return self.is_resync_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql alter procedure statement.
 */
schema SqlAlterProcedureStatementDO {
    @primary oid_: int,
    comment_oid_: int,
    is_compile_: int,
    is_contains_sql_: int,
    is_language_sql_: int,
    is_reuse_settings_: int,
    name_oid_: int,
    sql_security_oid_: int
}
impl SqlAlterProcedureStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterProcedureStatementDO {
    	for (tmp in db.sql_alter_procedure_statement) {
            yield SqlAlterProcedureStatementDO {
                oid_ : tmp.oid_,
                comment_oid_ : tmp.comment_oid_,
                is_compile_ : tmp.is_compile_,
                is_contains_sql_ : tmp.is_contains_sql_,
                is_language_sql_ : tmp.is_language_sql_,
                is_reuse_settings_ : tmp.is_reuse_settings_,
                name_oid_ : tmp.name_oid_,
                sql_security_oid_ : tmp.sql_security_oid_
            }
    	}
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the is compile of this element.
     * @return int
     */
    pub fn getIsCompile(self) -> int {
        return self.is_compile_
    }
    /**
     * @brief gets the is contains sql of this element.
     * @return int
     */
    pub fn getIsContainsSql(self) -> int {
        return self.is_contains_sql_
    }
    /**
     * @brief gets the is language sql of this element.
     * @return int
     */
    pub fn getIsLanguageSql(self) -> int {
        return self.is_language_sql_
    }
    /**
     * @brief gets the is reuse settings of this element.
     * @return int
     */
    pub fn getIsReuseSettings(self) -> int {
        return self.is_reuse_settings_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the sql security oid of this element.
     * @return int
     */
    pub fn getSqlSecurityOid(self) -> int {
        return self.sql_security_oid_
    }
}
/**
 * @brief DO class: A sql alter resource group statement.
 */
schema SqlAlterResourceGroupStatementDO {
    @primary oid_: int,
    enable_: int,
    name_oid_: int,
    properties_: string
}
impl SqlAlterResourceGroupStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterResourceGroupStatementDO {
    	for (tmp in db.sql_alter_resource_group_statement) {
            yield SqlAlterResourceGroupStatementDO {
                oid_ : tmp.oid_,
                enable_ : tmp.enable_,
                name_oid_ : tmp.name_oid_,
                properties_ : tmp.properties_
            }
    	}
    }
    /**
     * @brief gets the enable of this element.
     * @return int
     */
    pub fn getEnable(self) -> int {
        return self.enable_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the properties of this element.
     * @return string
     */
    pub fn getProperties(self) -> string {
        return self.properties_
    }
}
/**
 * @brief DO class: A sql alter sequence statement.
 */
schema SqlAlterSequenceStatementDO {
    @primary oid_: int,
    cache_: int,
    cache_value_oid_: int,
    cycle_: int,
    increment_by_oid_: int,
    is_change_to_group_: int,
    is_change_to_simple_: int,
    is_change_to_time_: int,
    is_no_max_value_: int,
    is_no_min_value_: int,
    is_restart_: int,
    max_value_oid_: int,
    min_value_oid_: int,
    name_oid_: int,
    order_: int,
    restart_with_oid_: int,
    schema_: string,
    start_with_oid_: int,
    with_cache_: int
}
impl SqlAlterSequenceStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterSequenceStatementDO {
    	for (tmp in db.sql_alter_sequence_statement) {
            yield SqlAlterSequenceStatementDO {
                oid_ : tmp.oid_,
                cache_ : tmp.cache_,
                cache_value_oid_ : tmp.cache_value_oid_,
                cycle_ : tmp.cycle_,
                increment_by_oid_ : tmp.increment_by_oid_,
                is_change_to_group_ : tmp.is_change_to_group_,
                is_change_to_simple_ : tmp.is_change_to_simple_,
                is_change_to_time_ : tmp.is_change_to_time_,
                is_no_max_value_ : tmp.is_no_max_value_,
                is_no_min_value_ : tmp.is_no_min_value_,
                is_restart_ : tmp.is_restart_,
                max_value_oid_ : tmp.max_value_oid_,
                min_value_oid_ : tmp.min_value_oid_,
                name_oid_ : tmp.name_oid_,
                order_ : tmp.order_,
                restart_with_oid_ : tmp.restart_with_oid_,
                schema_ : tmp.schema_,
                start_with_oid_ : tmp.start_with_oid_,
                with_cache_ : tmp.with_cache_
            }
    	}
    }
    /**
     * @brief gets the cache of this element.
     * @return int
     */
    pub fn getCache(self) -> int {
        return self.cache_
    }
    /**
     * @brief gets the cache value oid of this element.
     * @return int
     */
    pub fn getCacheValueOid(self) -> int {
        return self.cache_value_oid_
    }
    /**
     * @brief gets the cycle of this element.
     * @return int
     */
    pub fn getCycle(self) -> int {
        return self.cycle_
    }
    /**
     * @brief gets the increment by oid of this element.
     * @return int
     */
    pub fn getIncrementByOid(self) -> int {
        return self.increment_by_oid_
    }
    /**
     * @brief gets the is change to group of this element.
     * @return int
     */
    pub fn getIsChangeToGroup(self) -> int {
        return self.is_change_to_group_
    }
    /**
     * @brief gets the is change to simple of this element.
     * @return int
     */
    pub fn getIsChangeToSimple(self) -> int {
        return self.is_change_to_simple_
    }
    /**
     * @brief gets the is change to time of this element.
     * @return int
     */
    pub fn getIsChangeToTime(self) -> int {
        return self.is_change_to_time_
    }
    /**
     * @brief gets the is no max value of this element.
     * @return int
     */
    pub fn getIsNoMaxValue(self) -> int {
        return self.is_no_max_value_
    }
    /**
     * @brief gets the is no min value of this element.
     * @return int
     */
    pub fn getIsNoMinValue(self) -> int {
        return self.is_no_min_value_
    }
    /**
     * @brief gets the is restart of this element.
     * @return int
     */
    pub fn getIsRestart(self) -> int {
        return self.is_restart_
    }
    /**
     * @brief gets the max value oid of this element.
     * @return int
     */
    pub fn getMaxValueOid(self) -> int {
        return self.max_value_oid_
    }
    /**
     * @brief gets the min value oid of this element.
     * @return int
     */
    pub fn getMinValueOid(self) -> int {
        return self.min_value_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the order of this element.
     * @return int
     */
    pub fn getOrder(self) -> int {
        return self.order_
    }
    /**
     * @brief gets the restart with oid of this element.
     * @return int
     */
    pub fn getRestartWithOid(self) -> int {
        return self.restart_with_oid_
    }
    /**
     * @brief gets the schema of this element.
     * @return string
     */
    pub fn getSchema(self) -> string {
        return self.schema_
    }
    /**
     * @brief gets the start with oid of this element.
     * @return int
     */
    pub fn getStartWithOid(self) -> int {
        return self.start_with_oid_
    }
    /**
     * @brief gets the with cache of this element.
     * @return int
     */
    pub fn getWithCache(self) -> int {
        return self.with_cache_
    }
}
/**
 * @brief DO class: A sql alter system get config statement.
 */
schema SqlAlterSystemGetConfigStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl SqlAlterSystemGetConfigStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterSystemGetConfigStatementDO {
    	for (tmp in db.sql_alter_system_get_config_statement) {
            yield SqlAlterSystemGetConfigStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql alter system set config statement.
 */
schema SqlAlterSystemSetConfigStatementDO {
    @primary oid_: int
}
impl SqlAlterSystemSetConfigStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterSystemSetConfigStatementDO {
    	for (tmp in db.sql_alter_system_set_config_statement) {
            yield SqlAlterSystemSetConfigStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table add clustering key.
 */
schema SqlAlterTableAddClusteringKeyDO {
    @primary oid_: int,
    name_oid_: int
}
impl SqlAlterTableAddClusteringKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableAddClusteringKeyDO {
    	for (tmp in db.sql_alter_table_add_clustering_key) {
            yield SqlAlterTableAddClusteringKeyDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql alter table add column.
 */
schema SqlAlterTableAddColumnDO {
    @primary oid_: int,
    after_column_oid_: int,
    first_column_oid_: int,
    is_cascade_: int,
    is_first_: int,
    is_restrict_: int,
    restrict_: int
}
impl SqlAlterTableAddColumnDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableAddColumnDO {
    	for (tmp in db.sql_alter_table_add_column) {
            yield SqlAlterTableAddColumnDO {
                oid_ : tmp.oid_,
                after_column_oid_ : tmp.after_column_oid_,
                first_column_oid_ : tmp.first_column_oid_,
                is_cascade_ : tmp.is_cascade_,
                is_first_ : tmp.is_first_,
                is_restrict_ : tmp.is_restrict_,
                restrict_ : tmp.restrict_
            }
    	}
    }
    /**
     * @brief gets the after column oid of this element.
     * @return int
     */
    pub fn getAfterColumnOid(self) -> int {
        return self.after_column_oid_
    }
    /**
     * @brief gets the first column oid of this element.
     * @return int
     */
    pub fn getFirstColumnOid(self) -> int {
        return self.first_column_oid_
    }
    /**
     * @brief gets the is cascade of this element.
     * @return int
     */
    pub fn getIsCascade(self) -> int {
        return self.is_cascade_
    }
    /**
     * @brief gets the is first of this element.
     * @return int
     */
    pub fn getIsFirst(self) -> int {
        return self.is_first_
    }
    /**
     * @brief gets the is restrict of this element.
     * @return int
     */
    pub fn getIsRestrict(self) -> int {
        return self.is_restrict_
    }
    /**
     * @brief gets the restrict of this element.
     * @return int
     */
    pub fn getRestrict(self) -> int {
        return self.restrict_
    }
}
/**
 * @brief DO class: A sql alter table add constraint.
 */
schema SqlAlterTableAddConstraintDO {
    @primary oid_: int,
    constraint_oid_: int,
    is_with_no_check_: int
}
impl SqlAlterTableAddConstraintDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableAddConstraintDO {
    	for (tmp in db.sql_alter_table_add_constraint) {
            yield SqlAlterTableAddConstraintDO {
                oid_ : tmp.oid_,
                constraint_oid_ : tmp.constraint_oid_,
                is_with_no_check_ : tmp.is_with_no_check_
            }
    	}
    }
    /**
     * @brief gets the constraint oid of this element.
     * @return int
     */
    pub fn getConstraintOid(self) -> int {
        return self.constraint_oid_
    }
    /**
     * @brief gets the is with no check of this element.
     * @return int
     */
    pub fn getIsWithNoCheck(self) -> int {
        return self.is_with_no_check_
    }
}
/**
 * @brief DO class: A sql alter table add ext partition.
 */
schema SqlAlterTableAddExtPartitionDO {
    @primary oid_: int,
    ext_partition_oid_: int
}
impl SqlAlterTableAddExtPartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableAddExtPartitionDO {
    	for (tmp in db.sql_alter_table_add_ext_partition) {
            yield SqlAlterTableAddExtPartitionDO {
                oid_ : tmp.oid_,
                ext_partition_oid_ : tmp.ext_partition_oid_
            }
    	}
    }
    /**
     * @brief gets the ext partition oid of this element.
     * @return int
     */
    pub fn getExtPartitionOid(self) -> int {
        return self.ext_partition_oid_
    }
}
/**
 * @brief DO class: A sql alter table add index.
 */
schema SqlAlterTableAddIndexDO {
    @primary oid_: int,
    algorithm_: string,
    comment_oid_: int,
    db_partition_by_oid_: int,
    distance_measure_: string,
    index_definition_oid_: int,
    is_global_: int,
    is_hash_map_type_: int,
    is_key_: int,
    is_unique_: int,
    key_block_size_oid_: int,
    name_oid_: int,
    parser_name_: string,
    table_partition_by_oid_: int,
    table_partitions_oid_: int,
    type_: string,
    using_: string
}
impl SqlAlterTableAddIndexDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableAddIndexDO {
    	for (tmp in db.sql_alter_table_add_index) {
            yield SqlAlterTableAddIndexDO {
                oid_ : tmp.oid_,
                algorithm_ : tmp.algorithm_,
                comment_oid_ : tmp.comment_oid_,
                db_partition_by_oid_ : tmp.db_partition_by_oid_,
                distance_measure_ : tmp.distance_measure_,
                index_definition_oid_ : tmp.index_definition_oid_,
                is_global_ : tmp.is_global_,
                is_hash_map_type_ : tmp.is_hash_map_type_,
                is_key_ : tmp.is_key_,
                is_unique_ : tmp.is_unique_,
                key_block_size_oid_ : tmp.key_block_size_oid_,
                name_oid_ : tmp.name_oid_,
                parser_name_ : tmp.parser_name_,
                table_partition_by_oid_ : tmp.table_partition_by_oid_,
                table_partitions_oid_ : tmp.table_partitions_oid_,
                type_ : tmp.type_,
                using_ : tmp.using_
            }
    	}
    }
    /**
     * @brief gets the algorithm of this element.
     * @return string
     */
    pub fn getAlgorithm(self) -> string {
        return self.algorithm_
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the db partition by oid of this element.
     * @return int
     */
    pub fn getDbPartitionByOid(self) -> int {
        return self.db_partition_by_oid_
    }
    /**
     * @brief gets the distance measure of this element.
     * @return string
     */
    pub fn getDistanceMeasure(self) -> string {
        return self.distance_measure_
    }
    /**
     * @brief gets the index definition oid of this element.
     * @return int
     */
    pub fn getIndexDefinitionOid(self) -> int {
        return self.index_definition_oid_
    }
    /**
     * @brief gets the is global of this element.
     * @return int
     */
    pub fn getIsGlobal(self) -> int {
        return self.is_global_
    }
    /**
     * @brief gets the is hash map type of this element.
     * @return int
     */
    pub fn getIsHashMapType(self) -> int {
        return self.is_hash_map_type_
    }
    /**
     * @brief gets the is key of this element.
     * @return int
     */
    pub fn getIsKey(self) -> int {
        return self.is_key_
    }
    /**
     * @brief gets the is unique of this element.
     * @return int
     */
    pub fn getIsUnique(self) -> int {
        return self.is_unique_
    }
    /**
     * @brief gets the key block size oid of this element.
     * @return int
     */
    pub fn getKeyBlockSizeOid(self) -> int {
        return self.key_block_size_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the parser name of this element.
     * @return string
     */
    pub fn getParserName(self) -> string {
        return self.parser_name_
    }
    /**
     * @brief gets the table partition by oid of this element.
     * @return int
     */
    pub fn getTablePartitionByOid(self) -> int {
        return self.table_partition_by_oid_
    }
    /**
     * @brief gets the table partitions oid of this element.
     * @return int
     */
    pub fn getTablePartitionsOid(self) -> int {
        return self.table_partitions_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
    /**
     * @brief gets the using of this element.
     * @return string
     */
    pub fn getUsing(self) -> string {
        return self.using_
    }
}
/**
 * @brief DO class: A sql alter table add partition.
 */
schema SqlAlterTableAddPartitionDO {
    @primary oid_: int,
    is_if_not_exists_: int,
    location_oid_: int,
    partition_count_oid_: int
}
impl SqlAlterTableAddPartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableAddPartitionDO {
    	for (tmp in db.sql_alter_table_add_partition) {
            yield SqlAlterTableAddPartitionDO {
                oid_ : tmp.oid_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                location_oid_ : tmp.location_oid_,
                partition_count_oid_ : tmp.partition_count_oid_
            }
    	}
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the location oid of this element.
     * @return int
     */
    pub fn getLocationOid(self) -> int {
        return self.location_oid_
    }
    /**
     * @brief gets the partition count oid of this element.
     * @return int
     */
    pub fn getPartitionCountOid(self) -> int {
        return self.partition_count_oid_
    }
}
/**
 * @brief DO class: A sql alter table add supplemental.
 */
schema SqlAlterTableAddSupplementalDO {
    @primary oid_: int,
    element_oid_: int
}
impl SqlAlterTableAddSupplementalDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableAddSupplementalDO {
    	for (tmp in db.sql_alter_table_add_supplemental) {
            yield SqlAlterTableAddSupplementalDO {
                oid_ : tmp.oid_,
                element_oid_ : tmp.element_oid_
            }
    	}
    }
    /**
     * @brief gets the element oid of this element.
     * @return int
     */
    pub fn getElementOid(self) -> int {
        return self.element_oid_
    }
}
/**
 * @brief DO class: A sql alter table alter column.
 */
schema SqlAlterTableAlterColumnDO {
    @primary oid_: int,
    after_oid_: int,
    column_oid_: int,
    data_type_oid_: int,
    is_drop_default_: int,
    is_drop_not_null_: int,
    is_first_: int,
    is_set_not_null_: int,
    origin_column_oid_: int,
    set_default_oid_: int
}
impl SqlAlterTableAlterColumnDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableAlterColumnDO {
    	for (tmp in db.sql_alter_table_alter_column) {
            yield SqlAlterTableAlterColumnDO {
                oid_ : tmp.oid_,
                after_oid_ : tmp.after_oid_,
                column_oid_ : tmp.column_oid_,
                data_type_oid_ : tmp.data_type_oid_,
                is_drop_default_ : tmp.is_drop_default_,
                is_drop_not_null_ : tmp.is_drop_not_null_,
                is_first_ : tmp.is_first_,
                is_set_not_null_ : tmp.is_set_not_null_,
                origin_column_oid_ : tmp.origin_column_oid_,
                set_default_oid_ : tmp.set_default_oid_
            }
    	}
    }
    /**
     * @brief gets the after oid of this element.
     * @return int
     */
    pub fn getAfterOid(self) -> int {
        return self.after_oid_
    }
    /**
     * @brief gets the column oid of this element.
     * @return int
     */
    pub fn getColumnOid(self) -> int {
        return self.column_oid_
    }
    /**
     * @brief gets the data type oid of this element.
     * @return int
     */
    pub fn getDataTypeOid(self) -> int {
        return self.data_type_oid_
    }
    /**
     * @brief gets the is drop default of this element.
     * @return int
     */
    pub fn getIsDropDefault(self) -> int {
        return self.is_drop_default_
    }
    /**
     * @brief gets the is drop not null of this element.
     * @return int
     */
    pub fn getIsDropNotNull(self) -> int {
        return self.is_drop_not_null_
    }
    /**
     * @brief gets the is first of this element.
     * @return int
     */
    pub fn getIsFirst(self) -> int {
        return self.is_first_
    }
    /**
     * @brief gets the is set not null of this element.
     * @return int
     */
    pub fn getIsSetNotNull(self) -> int {
        return self.is_set_not_null_
    }
    /**
     * @brief gets the origin column oid of this element.
     * @return int
     */
    pub fn getOriginColumnOid(self) -> int {
        return self.origin_column_oid_
    }
    /**
     * @brief gets the set default oid of this element.
     * @return int
     */
    pub fn getSetDefaultOid(self) -> int {
        return self.set_default_oid_
    }
}
/**
 * @brief DO class: A sql alter table alter index.
 */
schema SqlAlterTableAlterIndexDO {
    @primary oid_: int,
    algorithm_: string,
    comment_oid_: int,
    db_partition_by_oid_: int,
    distance_measure_: string,
    index_definition_oid_: int,
    is_global_: int,
    is_hash_map_type_: int,
    is_key_: int,
    is_unique_: int,
    key_block_size_oid_: int,
    name_oid_: int,
    parser_name_: string,
    table_partition_by_oid_: int,
    table_partitions_oid_: int,
    type_: string,
    using_: string
}
impl SqlAlterTableAlterIndexDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableAlterIndexDO {
    	for (tmp in db.sql_alter_table_alter_index) {
            yield SqlAlterTableAlterIndexDO {
                oid_ : tmp.oid_,
                algorithm_ : tmp.algorithm_,
                comment_oid_ : tmp.comment_oid_,
                db_partition_by_oid_ : tmp.db_partition_by_oid_,
                distance_measure_ : tmp.distance_measure_,
                index_definition_oid_ : tmp.index_definition_oid_,
                is_global_ : tmp.is_global_,
                is_hash_map_type_ : tmp.is_hash_map_type_,
                is_key_ : tmp.is_key_,
                is_unique_ : tmp.is_unique_,
                key_block_size_oid_ : tmp.key_block_size_oid_,
                name_oid_ : tmp.name_oid_,
                parser_name_ : tmp.parser_name_,
                table_partition_by_oid_ : tmp.table_partition_by_oid_,
                table_partitions_oid_ : tmp.table_partitions_oid_,
                type_ : tmp.type_,
                using_ : tmp.using_
            }
    	}
    }
    /**
     * @brief gets the algorithm of this element.
     * @return string
     */
    pub fn getAlgorithm(self) -> string {
        return self.algorithm_
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the db partition by oid of this element.
     * @return int
     */
    pub fn getDbPartitionByOid(self) -> int {
        return self.db_partition_by_oid_
    }
    /**
     * @brief gets the distance measure of this element.
     * @return string
     */
    pub fn getDistanceMeasure(self) -> string {
        return self.distance_measure_
    }
    /**
     * @brief gets the index definition oid of this element.
     * @return int
     */
    pub fn getIndexDefinitionOid(self) -> int {
        return self.index_definition_oid_
    }
    /**
     * @brief gets the is global of this element.
     * @return int
     */
    pub fn getIsGlobal(self) -> int {
        return self.is_global_
    }
    /**
     * @brief gets the is hash map type of this element.
     * @return int
     */
    pub fn getIsHashMapType(self) -> int {
        return self.is_hash_map_type_
    }
    /**
     * @brief gets the is key of this element.
     * @return int
     */
    pub fn getIsKey(self) -> int {
        return self.is_key_
    }
    /**
     * @brief gets the is unique of this element.
     * @return int
     */
    pub fn getIsUnique(self) -> int {
        return self.is_unique_
    }
    /**
     * @brief gets the key block size oid of this element.
     * @return int
     */
    pub fn getKeyBlockSizeOid(self) -> int {
        return self.key_block_size_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the parser name of this element.
     * @return string
     */
    pub fn getParserName(self) -> string {
        return self.parser_name_
    }
    /**
     * @brief gets the table partition by oid of this element.
     * @return int
     */
    pub fn getTablePartitionByOid(self) -> int {
        return self.table_partition_by_oid_
    }
    /**
     * @brief gets the table partitions oid of this element.
     * @return int
     */
    pub fn getTablePartitionsOid(self) -> int {
        return self.table_partitions_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
    /**
     * @brief gets the using of this element.
     * @return string
     */
    pub fn getUsing(self) -> string {
        return self.using_
    }
}
/**
 * @brief DO class: A sql alter table analyze partition.
 */
schema SqlAlterTableAnalyzePartitionDO {
    @primary oid_: int
}
impl SqlAlterTableAnalyzePartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableAnalyzePartitionDO {
    	for (tmp in db.sql_alter_table_analyze_partition) {
            yield SqlAlterTableAnalyzePartitionDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table archive partition.
 */
schema SqlAlterTableArchivePartitionDO {
    @primary oid_: int
}
impl SqlAlterTableArchivePartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableArchivePartitionDO {
    	for (tmp in db.sql_alter_table_archive_partition) {
            yield SqlAlterTableArchivePartitionDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table block size.
 */
schema SqlAlterTableBlockSizeDO {
    @primary oid_: int,
    size_oid_: int
}
impl SqlAlterTableBlockSizeDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableBlockSizeDO {
    	for (tmp in db.sql_alter_table_block_size) {
            yield SqlAlterTableBlockSizeDO {
                oid_ : tmp.oid_,
                size_oid_ : tmp.size_oid_
            }
    	}
    }
    /**
     * @brief gets the size oid of this element.
     * @return int
     */
    pub fn getSizeOid(self) -> int {
        return self.size_oid_
    }
}
/**
 * @brief DO class: A sql alter table change owner.
 */
schema SqlAlterTableChangeOwnerDO {
    @primary oid_: int,
    owner_oid_: int
}
impl SqlAlterTableChangeOwnerDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableChangeOwnerDO {
    	for (tmp in db.sql_alter_table_change_owner) {
            yield SqlAlterTableChangeOwnerDO {
                oid_ : tmp.oid_,
                owner_oid_ : tmp.owner_oid_
            }
    	}
    }
    /**
     * @brief gets the owner oid of this element.
     * @return int
     */
    pub fn getOwnerOid(self) -> int {
        return self.owner_oid_
    }
}
/**
 * @brief DO class: A sql alter table check partition.
 */
schema SqlAlterTableCheckPartitionDO {
    @primary oid_: int
}
impl SqlAlterTableCheckPartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableCheckPartitionDO {
    	for (tmp in db.sql_alter_table_check_partition) {
            yield SqlAlterTableCheckPartitionDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table coalesce partition.
 */
schema SqlAlterTableCoalescePartitionDO {
    @primary oid_: int,
    count_oid_: int
}
impl SqlAlterTableCoalescePartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableCoalescePartitionDO {
    	for (tmp in db.sql_alter_table_coalesce_partition) {
            yield SqlAlterTableCoalescePartitionDO {
                oid_ : tmp.oid_,
                count_oid_ : tmp.count_oid_
            }
    	}
    }
    /**
     * @brief gets the count oid of this element.
     * @return int
     */
    pub fn getCountOid(self) -> int {
        return self.count_oid_
    }
}
/**
 * @brief DO class: A sql alter table compression.
 */
schema SqlAlterTableCompressionDO {
    @primary oid_: int,
    name_oid_: int
}
impl SqlAlterTableCompressionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableCompressionDO {
    	for (tmp in db.sql_alter_table_compression) {
            yield SqlAlterTableCompressionDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql alter table convert char set.
 */
schema SqlAlterTableConvertCharSetDO {
    @primary oid_: int,
    charset_oid_: int,
    collate_oid_: int
}
impl SqlAlterTableConvertCharSetDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableConvertCharSetDO {
    	for (tmp in db.sql_alter_table_convert_char_set) {
            yield SqlAlterTableConvertCharSetDO {
                oid_ : tmp.oid_,
                charset_oid_ : tmp.charset_oid_,
                collate_oid_ : tmp.collate_oid_
            }
    	}
    }
    /**
     * @brief gets the charset oid of this element.
     * @return int
     */
    pub fn getCharsetOid(self) -> int {
        return self.charset_oid_
    }
    /**
     * @brief gets the collate oid of this element.
     * @return int
     */
    pub fn getCollateOid(self) -> int {
        return self.collate_oid_
    }
}
/**
 * @brief DO class: A sql alter table delete by condition.
 */
schema SqlAlterTableDeleteByConditionDO {
    @primary oid_: int,
    where_oid_: int
}
impl SqlAlterTableDeleteByConditionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDeleteByConditionDO {
    	for (tmp in db.sql_alter_table_delete_by_condition) {
            yield SqlAlterTableDeleteByConditionDO {
                oid_ : tmp.oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A sql alter table disable constraint.
 */
schema SqlAlterTableDisableConstraintDO {
    @primary oid_: int,
    constraint_name_oid_: int
}
impl SqlAlterTableDisableConstraintDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDisableConstraintDO {
    	for (tmp in db.sql_alter_table_disable_constraint) {
            yield SqlAlterTableDisableConstraintDO {
                oid_ : tmp.oid_,
                constraint_name_oid_ : tmp.constraint_name_oid_
            }
    	}
    }
    /**
     * @brief gets the constraint name oid of this element.
     * @return int
     */
    pub fn getConstraintNameOid(self) -> int {
        return self.constraint_name_oid_
    }
}
/**
 * @brief DO class: A sql alter table disable keys.
 */
schema SqlAlterTableDisableKeysDO {
    @primary oid_: int
}
impl SqlAlterTableDisableKeysDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDisableKeysDO {
    	for (tmp in db.sql_alter_table_disable_keys) {
            yield SqlAlterTableDisableKeysDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table disable lifecycle.
 */
schema SqlAlterTableDisableLifecycleDO {
    @primary oid_: int
}
impl SqlAlterTableDisableLifecycleDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDisableLifecycleDO {
    	for (tmp in db.sql_alter_table_disable_lifecycle) {
            yield SqlAlterTableDisableLifecycleDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table discard partition.
 */
schema SqlAlterTableDiscardPartitionDO {
    @primary oid_: int,
    is_tablespace_: int
}
impl SqlAlterTableDiscardPartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDiscardPartitionDO {
    	for (tmp in db.sql_alter_table_discard_partition) {
            yield SqlAlterTableDiscardPartitionDO {
                oid_ : tmp.oid_,
                is_tablespace_ : tmp.is_tablespace_
            }
    	}
    }
    /**
     * @brief gets the is tablespace of this element.
     * @return int
     */
    pub fn getIsTablespace(self) -> int {
        return self.is_tablespace_
    }
}
/**
 * @brief DO class: A sql alter table drop clustering key.
 */
schema SqlAlterTableDropClusteringKeyDO {
    @primary oid_: int,
    key_name_oid_: int
}
impl SqlAlterTableDropClusteringKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDropClusteringKeyDO {
    	for (tmp in db.sql_alter_table_drop_clustering_key) {
            yield SqlAlterTableDropClusteringKeyDO {
                oid_ : tmp.oid_,
                key_name_oid_ : tmp.key_name_oid_
            }
    	}
    }
    /**
     * @brief gets the key name oid of this element.
     * @return int
     */
    pub fn getKeyNameOid(self) -> int {
        return self.key_name_oid_
    }
}
/**
 * @brief DO class: A sql alter table drop column item.
 */
schema SqlAlterTableDropColumnItemDO {
    @primary oid_: int,
    is_cascade_: int
}
impl SqlAlterTableDropColumnItemDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDropColumnItemDO {
    	for (tmp in db.sql_alter_table_drop_column_item) {
            yield SqlAlterTableDropColumnItemDO {
                oid_ : tmp.oid_,
                is_cascade_ : tmp.is_cascade_
            }
    	}
    }
    /**
     * @brief gets the is cascade of this element.
     * @return int
     */
    pub fn getIsCascade(self) -> int {
        return self.is_cascade_
    }
}
/**
 * @brief DO class: A sql alter table drop constraint.
 */
schema SqlAlterTableDropConstraintDO {
    @primary oid_: int,
    constraint_name_oid_: int,
    is_cascade_: int,
    is_restrict_: int
}
impl SqlAlterTableDropConstraintDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDropConstraintDO {
    	for (tmp in db.sql_alter_table_drop_constraint) {
            yield SqlAlterTableDropConstraintDO {
                oid_ : tmp.oid_,
                constraint_name_oid_ : tmp.constraint_name_oid_,
                is_cascade_ : tmp.is_cascade_,
                is_restrict_ : tmp.is_restrict_
            }
    	}
    }
    /**
     * @brief gets the constraint name oid of this element.
     * @return int
     */
    pub fn getConstraintNameOid(self) -> int {
        return self.constraint_name_oid_
    }
    /**
     * @brief gets the is cascade of this element.
     * @return int
     */
    pub fn getIsCascade(self) -> int {
        return self.is_cascade_
    }
    /**
     * @brief gets the is restrict of this element.
     * @return int
     */
    pub fn getIsRestrict(self) -> int {
        return self.is_restrict_
    }
}
/**
 * @brief DO class: A sql alter table drop ext partition.
 */
schema SqlAlterTableDropExtPartitionDO {
    @primary oid_: int,
    ext_partition_oid_: int
}
impl SqlAlterTableDropExtPartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDropExtPartitionDO {
    	for (tmp in db.sql_alter_table_drop_ext_partition) {
            yield SqlAlterTableDropExtPartitionDO {
                oid_ : tmp.oid_,
                ext_partition_oid_ : tmp.ext_partition_oid_
            }
    	}
    }
    /**
     * @brief gets the ext partition oid of this element.
     * @return int
     */
    pub fn getExtPartitionOid(self) -> int {
        return self.ext_partition_oid_
    }
}
/**
 * @brief DO class: A sql alter table drop foreign key.
 */
schema SqlAlterTableDropForeignKeyDO {
    @primary oid_: int,
    index_name_oid_: int
}
impl SqlAlterTableDropForeignKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDropForeignKeyDO {
    	for (tmp in db.sql_alter_table_drop_foreign_key) {
            yield SqlAlterTableDropForeignKeyDO {
                oid_ : tmp.oid_,
                index_name_oid_ : tmp.index_name_oid_
            }
    	}
    }
    /**
     * @brief gets the index name oid of this element.
     * @return int
     */
    pub fn getIndexNameOid(self) -> int {
        return self.index_name_oid_
    }
}
/**
 * @brief DO class: A sql alter table drop index.
 */
schema SqlAlterTableDropIndexDO {
    @primary oid_: int,
    index_name_oid_: int
}
impl SqlAlterTableDropIndexDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDropIndexDO {
    	for (tmp in db.sql_alter_table_drop_index) {
            yield SqlAlterTableDropIndexDO {
                oid_ : tmp.oid_,
                index_name_oid_ : tmp.index_name_oid_
            }
    	}
    }
    /**
     * @brief gets the index name oid of this element.
     * @return int
     */
    pub fn getIndexNameOid(self) -> int {
        return self.index_name_oid_
    }
}
/**
 * @brief DO class: A sql alter table drop key.
 */
schema SqlAlterTableDropKeyDO {
    @primary oid_: int,
    key_name_oid_: int
}
impl SqlAlterTableDropKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDropKeyDO {
    	for (tmp in db.sql_alter_table_drop_key) {
            yield SqlAlterTableDropKeyDO {
                oid_ : tmp.oid_,
                key_name_oid_ : tmp.key_name_oid_
            }
    	}
    }
    /**
     * @brief gets the key name oid of this element.
     * @return int
     */
    pub fn getKeyNameOid(self) -> int {
        return self.key_name_oid_
    }
}
/**
 * @brief DO class: A sql alter table drop partition.
 */
schema SqlAlterTableDropPartitionDO {
    @primary oid_: int,
    is_if_exists_: int,
    is_purge_: int
}
impl SqlAlterTableDropPartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDropPartitionDO {
    	for (tmp in db.sql_alter_table_drop_partition) {
            yield SqlAlterTableDropPartitionDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_,
                is_purge_ : tmp.is_purge_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the is purge of this element.
     * @return int
     */
    pub fn getIsPurge(self) -> int {
        return self.is_purge_
    }
}
/**
 * @brief DO class: A sql alter table drop primary key.
 */
schema SqlAlterTableDropPrimaryKeyDO {
    @primary oid_: int
}
impl SqlAlterTableDropPrimaryKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDropPrimaryKeyDO {
    	for (tmp in db.sql_alter_table_drop_primary_key) {
            yield SqlAlterTableDropPrimaryKeyDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table drop subpartition.
 */
schema SqlAlterTableDropSubpartitionDO {
    @primary oid_: int
}
impl SqlAlterTableDropSubpartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableDropSubpartitionDO {
    	for (tmp in db.sql_alter_table_drop_subpartition) {
            yield SqlAlterTableDropSubpartitionDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table enable constraint.
 */
schema SqlAlterTableEnableConstraintDO {
    @primary oid_: int,
    constraint_name_oid_: int
}
impl SqlAlterTableEnableConstraintDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableEnableConstraintDO {
    	for (tmp in db.sql_alter_table_enable_constraint) {
            yield SqlAlterTableEnableConstraintDO {
                oid_ : tmp.oid_,
                constraint_name_oid_ : tmp.constraint_name_oid_
            }
    	}
    }
    /**
     * @brief gets the constraint name oid of this element.
     * @return int
     */
    pub fn getConstraintNameOid(self) -> int {
        return self.constraint_name_oid_
    }
}
/**
 * @brief DO class: A sql alter table enable keys.
 */
schema SqlAlterTableEnableKeysDO {
    @primary oid_: int
}
impl SqlAlterTableEnableKeysDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableEnableKeysDO {
    	for (tmp in db.sql_alter_table_enable_keys) {
            yield SqlAlterTableEnableKeysDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table enable lifecycle.
 */
schema SqlAlterTableEnableLifecycleDO {
    @primary oid_: int
}
impl SqlAlterTableEnableLifecycleDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableEnableLifecycleDO {
    	for (tmp in db.sql_alter_table_enable_lifecycle) {
            yield SqlAlterTableEnableLifecycleDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table exchange partition.
 */
schema SqlAlterTableExchangePartitionDO {
    @primary oid_: int,
    table_oid_: int,
    validation_: int
}
impl SqlAlterTableExchangePartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableExchangePartitionDO {
    	for (tmp in db.sql_alter_table_exchange_partition) {
            yield SqlAlterTableExchangePartitionDO {
                oid_ : tmp.oid_,
                table_oid_ : tmp.table_oid_,
                validation_ : tmp.validation_
            }
    	}
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
    /**
     * @brief gets the validation of this element.
     * @return int
     */
    pub fn getValidation(self) -> int {
        return self.validation_
    }
}
/**
 * @brief DO class: A sql alter table group statement.
 */
schema SqlAlterTableGroupStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl SqlAlterTableGroupStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableGroupStatementDO {
    	for (tmp in db.sql_alter_table_group_statement) {
            yield SqlAlterTableGroupStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql alter table import partition.
 */
schema SqlAlterTableImportPartitionDO {
    @primary oid_: int,
    is_tablespace_: int
}
impl SqlAlterTableImportPartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableImportPartitionDO {
    	for (tmp in db.sql_alter_table_import_partition) {
            yield SqlAlterTableImportPartitionDO {
                oid_ : tmp.oid_,
                is_tablespace_ : tmp.is_tablespace_
            }
    	}
    }
    /**
     * @brief gets the is tablespace of this element.
     * @return int
     */
    pub fn getIsTablespace(self) -> int {
        return self.is_tablespace_
    }
}
/**
 * @brief DO class: A sql alter table merge partition.
 */
schema SqlAlterTableMergePartitionDO {
    @primary oid_: int,
    is_if_exists_: int,
    is_purge_: int,
    overwrite_partition_oid_: int
}
impl SqlAlterTableMergePartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableMergePartitionDO {
    	for (tmp in db.sql_alter_table_merge_partition) {
            yield SqlAlterTableMergePartitionDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_,
                is_purge_ : tmp.is_purge_,
                overwrite_partition_oid_ : tmp.overwrite_partition_oid_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the is purge of this element.
     * @return int
     */
    pub fn getIsPurge(self) -> int {
        return self.is_purge_
    }
    /**
     * @brief gets the overwrite partition oid of this element.
     * @return int
     */
    pub fn getOverwritePartitionOid(self) -> int {
        return self.overwrite_partition_oid_
    }
}
/**
 * @brief DO class: A sql alter table modify clustered by.
 */
schema SqlAlterTableModifyClusteredByDO {
    @primary oid_: int
}
impl SqlAlterTableModifyClusteredByDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableModifyClusteredByDO {
    	for (tmp in db.sql_alter_table_modify_clustered_by) {
            yield SqlAlterTableModifyClusteredByDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table optimize partition.
 */
schema SqlAlterTableOptimizePartitionDO {
    @primary oid_: int
}
impl SqlAlterTableOptimizePartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableOptimizePartitionDO {
    	for (tmp in db.sql_alter_table_optimize_partition) {
            yield SqlAlterTableOptimizePartitionDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table partition.
 */
schema SqlAlterTablePartitionDO {
    @primary oid_: int
}
impl SqlAlterTablePartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTablePartitionDO {
    	for (tmp in db.sql_alter_table_partition) {
            yield SqlAlterTablePartitionDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table partition count.
 */
schema SqlAlterTablePartitionCountDO {
    @primary oid_: int,
    count_oid_: int
}
impl SqlAlterTablePartitionCountDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTablePartitionCountDO {
    	for (tmp in db.sql_alter_table_partition_count) {
            yield SqlAlterTablePartitionCountDO {
                oid_ : tmp.oid_,
                count_oid_ : tmp.count_oid_
            }
    	}
    }
    /**
     * @brief gets the count oid of this element.
     * @return int
     */
    pub fn getCountOid(self) -> int {
        return self.count_oid_
    }
}
/**
 * @brief DO class: A sql alter table partition lifecycle.
 */
schema SqlAlterTablePartitionLifecycleDO {
    @primary oid_: int,
    lifecycle_oid_: int
}
impl SqlAlterTablePartitionLifecycleDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTablePartitionLifecycleDO {
    	for (tmp in db.sql_alter_table_partition_lifecycle) {
            yield SqlAlterTablePartitionLifecycleDO {
                oid_ : tmp.oid_,
                lifecycle_oid_ : tmp.lifecycle_oid_
            }
    	}
    }
    /**
     * @brief gets the lifecycle oid of this element.
     * @return int
     */
    pub fn getLifecycleOid(self) -> int {
        return self.lifecycle_oid_
    }
}
/**
 * @brief DO class: A sql alter table partition set properties.
 */
schema SqlAlterTablePartitionSetPropertiesDO {
    @primary oid_: int
}
impl SqlAlterTablePartitionSetPropertiesDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTablePartitionSetPropertiesDO {
    	for (tmp in db.sql_alter_table_partition_set_properties) {
            yield SqlAlterTablePartitionSetPropertiesDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table re organize partition.
 */
schema SqlAlterTableReOrganizePartitionDO {
    @primary oid_: int
}
impl SqlAlterTableReOrganizePartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableReOrganizePartitionDO {
    	for (tmp in db.sql_alter_table_re_organize_partition) {
            yield SqlAlterTableReOrganizePartitionDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table rebuild partition.
 */
schema SqlAlterTableRebuildPartitionDO {
    @primary oid_: int
}
impl SqlAlterTableRebuildPartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableRebuildPartitionDO {
    	for (tmp in db.sql_alter_table_rebuild_partition) {
            yield SqlAlterTableRebuildPartitionDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table recover partitions.
 */
schema SqlAlterTableRecoverPartitionsDO {
    @primary oid_: int
}
impl SqlAlterTableRecoverPartitionsDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableRecoverPartitionsDO {
    	for (tmp in db.sql_alter_table_recover_partitions) {
            yield SqlAlterTableRecoverPartitionsDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table rename.
 */
schema SqlAlterTableRenameDO {
    @primary oid_: int,
    to_name_oid_: int,
    to_oid_: int
}
impl SqlAlterTableRenameDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableRenameDO {
    	for (tmp in db.sql_alter_table_rename) {
            yield SqlAlterTableRenameDO {
                oid_ : tmp.oid_,
                to_name_oid_ : tmp.to_name_oid_,
                to_oid_ : tmp.to_oid_
            }
    	}
    }
    /**
     * @brief gets the to name oid of this element.
     * @return int
     */
    pub fn getToNameOid(self) -> int {
        return self.to_name_oid_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
}
/**
 * @brief DO class: A sql alter table rename column.
 */
schema SqlAlterTableRenameColumnDO {
    @primary oid_: int,
    column_oid_: int,
    to_oid_: int
}
impl SqlAlterTableRenameColumnDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableRenameColumnDO {
    	for (tmp in db.sql_alter_table_rename_column) {
            yield SqlAlterTableRenameColumnDO {
                oid_ : tmp.oid_,
                column_oid_ : tmp.column_oid_,
                to_oid_ : tmp.to_oid_
            }
    	}
    }
    /**
     * @brief gets the column oid of this element.
     * @return int
     */
    pub fn getColumnOid(self) -> int {
        return self.column_oid_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
}
/**
 * @brief DO class: A sql alter table rename index.
 */
schema SqlAlterTableRenameIndexDO {
    @primary oid_: int,
    name_oid_: int,
    to_oid_: int
}
impl SqlAlterTableRenameIndexDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableRenameIndexDO {
    	for (tmp in db.sql_alter_table_rename_index) {
            yield SqlAlterTableRenameIndexDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_,
                to_oid_ : tmp.to_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
}
/**
 * @brief DO class: A sql alter table rename partition.
 */
schema SqlAlterTableRenamePartitionDO {
    @primary oid_: int,
    is_if_not_exists_: int
}
impl SqlAlterTableRenamePartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableRenamePartitionDO {
    	for (tmp in db.sql_alter_table_rename_partition) {
            yield SqlAlterTableRenamePartitionDO {
                oid_ : tmp.oid_,
                is_if_not_exists_ : tmp.is_if_not_exists_
            }
    	}
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
}
/**
 * @brief DO class: A sql alter table repair partition.
 */
schema SqlAlterTableRepairPartitionDO {
    @primary oid_: int
}
impl SqlAlterTableRepairPartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableRepairPartitionDO {
    	for (tmp in db.sql_alter_table_repair_partition) {
            yield SqlAlterTableRepairPartitionDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table replace column.
 */
schema SqlAlterTableReplaceColumnDO {
    @primary oid_: int,
    after_column_oid_: int,
    first_column_oid_: int,
    is_first_: int
}
impl SqlAlterTableReplaceColumnDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableReplaceColumnDO {
    	for (tmp in db.sql_alter_table_replace_column) {
            yield SqlAlterTableReplaceColumnDO {
                oid_ : tmp.oid_,
                after_column_oid_ : tmp.after_column_oid_,
                first_column_oid_ : tmp.first_column_oid_,
                is_first_ : tmp.is_first_
            }
    	}
    }
    /**
     * @brief gets the after column oid of this element.
     * @return int
     */
    pub fn getAfterColumnOid(self) -> int {
        return self.after_column_oid_
    }
    /**
     * @brief gets the first column oid of this element.
     * @return int
     */
    pub fn getFirstColumnOid(self) -> int {
        return self.first_column_oid_
    }
    /**
     * @brief gets the is first of this element.
     * @return int
     */
    pub fn getIsFirst(self) -> int {
        return self.is_first_
    }
}
/**
 * @brief DO class: A sql alter table set comment.
 */
schema SqlAlterTableSetCommentDO {
    @primary oid_: int,
    comment_oid_: int
}
impl SqlAlterTableSetCommentDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableSetCommentDO {
    	for (tmp in db.sql_alter_table_set_comment) {
            yield SqlAlterTableSetCommentDO {
                oid_ : tmp.oid_,
                comment_oid_ : tmp.comment_oid_
            }
    	}
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
}
/**
 * @brief DO class: A sql alter table set lifecycle.
 */
schema SqlAlterTableSetLifecycleDO {
    @primary oid_: int,
    lifecycle_oid_: int
}
impl SqlAlterTableSetLifecycleDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableSetLifecycleDO {
    	for (tmp in db.sql_alter_table_set_lifecycle) {
            yield SqlAlterTableSetLifecycleDO {
                oid_ : tmp.oid_,
                lifecycle_oid_ : tmp.lifecycle_oid_
            }
    	}
    }
    /**
     * @brief gets the lifecycle oid of this element.
     * @return int
     */
    pub fn getLifecycleOid(self) -> int {
        return self.lifecycle_oid_
    }
}
/**
 * @brief DO class: A sql alter table set location.
 */
schema SqlAlterTableSetLocationDO {
    @primary oid_: int,
    location_oid_: int
}
impl SqlAlterTableSetLocationDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableSetLocationDO {
    	for (tmp in db.sql_alter_table_set_location) {
            yield SqlAlterTableSetLocationDO {
                oid_ : tmp.oid_,
                location_oid_ : tmp.location_oid_
            }
    	}
    }
    /**
     * @brief gets the location oid of this element.
     * @return int
     */
    pub fn getLocationOid(self) -> int {
        return self.location_oid_
    }
}
/**
 * @brief DO class: A sql alter table set option.
 */
schema SqlAlterTableSetOptionDO {
    @primary oid_: int,
    on_oid_: int
}
impl SqlAlterTableSetOptionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableSetOptionDO {
    	for (tmp in db.sql_alter_table_set_option) {
            yield SqlAlterTableSetOptionDO {
                oid_ : tmp.oid_,
                on_oid_ : tmp.on_oid_
            }
    	}
    }
    /**
     * @brief gets the on oid of this element.
     * @return int
     */
    pub fn getOnOid(self) -> int {
        return self.on_oid_
    }
}
/**
 * @brief DO class: A sql alter table statement.
 */
schema SqlAlterTableStatementDO {
    @primary oid_: int,
    buckets_: int,
    is_if_exists_: int,
    is_ignore_: int,
    is_invalidate_global_indexes_: int,
    is_merge_small_files_: int,
    is_not_clustered_: int,
    is_offline_: int,
    is_online_: int,
    is_range_: int,
    is_remove_patiting_: int,
    is_update_global_indexes_: int,
    is_upgrade_patiting_: int,
    name_oid_: int,
    partition_oid_: int,
    schema_: string,
    shards_: int,
    table_name_: string,
    table_source_oid_: int
}
impl SqlAlterTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableStatementDO {
    	for (tmp in db.sql_alter_table_statement) {
            yield SqlAlterTableStatementDO {
                oid_ : tmp.oid_,
                buckets_ : tmp.buckets_,
                is_if_exists_ : tmp.is_if_exists_,
                is_ignore_ : tmp.is_ignore_,
                is_invalidate_global_indexes_ : tmp.is_invalidate_global_indexes_,
                is_merge_small_files_ : tmp.is_merge_small_files_,
                is_not_clustered_ : tmp.is_not_clustered_,
                is_offline_ : tmp.is_offline_,
                is_online_ : tmp.is_online_,
                is_range_ : tmp.is_range_,
                is_remove_patiting_ : tmp.is_remove_patiting_,
                is_update_global_indexes_ : tmp.is_update_global_indexes_,
                is_upgrade_patiting_ : tmp.is_upgrade_patiting_,
                name_oid_ : tmp.name_oid_,
                partition_oid_ : tmp.partition_oid_,
                schema_ : tmp.schema_,
                shards_ : tmp.shards_,
                table_name_ : tmp.table_name_,
                table_source_oid_ : tmp.table_source_oid_
            }
    	}
    }
    /**
     * @brief gets the buckets of this element.
     * @return int
     */
    pub fn getBuckets(self) -> int {
        return self.buckets_
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the is ignore of this element.
     * @return int
     */
    pub fn getIsIgnore(self) -> int {
        return self.is_ignore_
    }
    /**
     * @brief gets the is invalidate global indexes of this element.
     * @return int
     */
    pub fn getIsInvalidateGlobalIndexes(self) -> int {
        return self.is_invalidate_global_indexes_
    }
    /**
     * @brief gets the is merge small files of this element.
     * @return int
     */
    pub fn getIsMergeSmallFiles(self) -> int {
        return self.is_merge_small_files_
    }
    /**
     * @brief gets the is not clustered of this element.
     * @return int
     */
    pub fn getIsNotClustered(self) -> int {
        return self.is_not_clustered_
    }
    /**
     * @brief gets the is offline of this element.
     * @return int
     */
    pub fn getIsOffline(self) -> int {
        return self.is_offline_
    }
    /**
     * @brief gets the is online of this element.
     * @return int
     */
    pub fn getIsOnline(self) -> int {
        return self.is_online_
    }
    /**
     * @brief gets the is range of this element.
     * @return int
     */
    pub fn getIsRange(self) -> int {
        return self.is_range_
    }
    /**
     * @brief gets the is remove patiting of this element.
     * @return int
     */
    pub fn getIsRemovePatiting(self) -> int {
        return self.is_remove_patiting_
    }
    /**
     * @brief gets the is update global indexes of this element.
     * @return int
     */
    pub fn getIsUpdateGlobalIndexes(self) -> int {
        return self.is_update_global_indexes_
    }
    /**
     * @brief gets the is upgrade patiting of this element.
     * @return int
     */
    pub fn getIsUpgradePatiting(self) -> int {
        return self.is_upgrade_patiting_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the partition oid of this element.
     * @return int
     */
    pub fn getPartitionOid(self) -> int {
        return self.partition_oid_
    }
    /**
     * @brief gets the schema of this element.
     * @return string
     */
    pub fn getSchema(self) -> string {
        return self.schema_
    }
    /**
     * @brief gets the shards of this element.
     * @return int
     */
    pub fn getShards(self) -> int {
        return self.shards_
    }
    /**
     * @brief gets the table name of this element.
     * @return string
     */
    pub fn getTableName(self) -> string {
        return self.table_name_
    }
    /**
     * @brief gets the table source oid of this element.
     * @return int
     */
    pub fn getTableSourceOid(self) -> int {
        return self.table_source_oid_
    }
}
/**
 * @brief DO class: A sql alter table subpartition available partition num.
 */
schema SqlAlterTableSubpartitionAvailablePartitionNumDO {
    @primary oid_: int,
    number_oid_: int
}
impl SqlAlterTableSubpartitionAvailablePartitionNumDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableSubpartitionAvailablePartitionNumDO {
    	for (tmp in db.sql_alter_table_subpartition_available_partition_num) {
            yield SqlAlterTableSubpartitionAvailablePartitionNumDO {
                oid_ : tmp.oid_,
                number_oid_ : tmp.number_oid_
            }
    	}
    }
    /**
     * @brief gets the number oid of this element.
     * @return int
     */
    pub fn getNumberOid(self) -> int {
        return self.number_oid_
    }
}
/**
 * @brief DO class: A sql alter table subpartition lifecycle.
 */
schema SqlAlterTableSubpartitionLifecycleDO {
    @primary oid_: int
}
impl SqlAlterTableSubpartitionLifecycleDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableSubpartitionLifecycleDO {
    	for (tmp in db.sql_alter_table_subpartition_lifecycle) {
            yield SqlAlterTableSubpartitionLifecycleDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table touch.
 */
schema SqlAlterTableTouchDO {
    @primary oid_: int
}
impl SqlAlterTableTouchDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableTouchDO {
    	for (tmp in db.sql_alter_table_touch) {
            yield SqlAlterTableTouchDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table truncate partition.
 */
schema SqlAlterTableTruncatePartitionDO {
    @primary oid_: int
}
impl SqlAlterTableTruncatePartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableTruncatePartitionDO {
    	for (tmp in db.sql_alter_table_truncate_partition) {
            yield SqlAlterTableTruncatePartitionDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter table unarchive partition.
 */
schema SqlAlterTableUnarchivePartitionDO {
    @primary oid_: int
}
impl SqlAlterTableUnarchivePartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTableUnarchivePartitionDO {
    	for (tmp in db.sql_alter_table_unarchive_partition) {
            yield SqlAlterTableUnarchivePartitionDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql alter type statement.
 */
schema SqlAlterTypeStatementDO {
    @primary oid_: int,
    is_body_: int,
    is_compile_: int,
    is_debug_: int,
    is_reuse_settings_: int,
    name_oid_: int
}
impl SqlAlterTypeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterTypeStatementDO {
    	for (tmp in db.sql_alter_type_statement) {
            yield SqlAlterTypeStatementDO {
                oid_ : tmp.oid_,
                is_body_ : tmp.is_body_,
                is_compile_ : tmp.is_compile_,
                is_debug_ : tmp.is_debug_,
                is_reuse_settings_ : tmp.is_reuse_settings_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is body of this element.
     * @return int
     */
    pub fn getIsBody(self) -> int {
        return self.is_body_
    }
    /**
     * @brief gets the is compile of this element.
     * @return int
     */
    pub fn getIsCompile(self) -> int {
        return self.is_compile_
    }
    /**
     * @brief gets the is debug of this element.
     * @return int
     */
    pub fn getIsDebug(self) -> int {
        return self.is_debug_
    }
    /**
     * @brief gets the is reuse settings of this element.
     * @return int
     */
    pub fn getIsReuseSettings(self) -> int {
        return self.is_reuse_settings_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql alter view rename statement.
 */
schema SqlAlterViewRenameStatementDO {
    @primary oid_: int,
    change_owner_to_oid_: int,
    name_oid_: int,
    to_oid_: int
}
impl SqlAlterViewRenameStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterViewRenameStatementDO {
    	for (tmp in db.sql_alter_view_rename_statement) {
            yield SqlAlterViewRenameStatementDO {
                oid_ : tmp.oid_,
                change_owner_to_oid_ : tmp.change_owner_to_oid_,
                name_oid_ : tmp.name_oid_,
                to_oid_ : tmp.to_oid_
            }
    	}
    }
    /**
     * @brief gets the change owner to oid of this element.
     * @return int
     */
    pub fn getChangeOwnerToOid(self) -> int {
        return self.change_owner_to_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
}
/**
 * @brief DO class: A sql alter view statement.
 */
schema SqlAlterViewStatementDO {
    @primary oid_: int,
    algorithm_: string,
    comment_oid_: int,
    definer_oid_: int,
    is_force_: int,
    is_if_not_exists_: int,
    is_with_cascaded_: int,
    is_with_check_option_: int,
    is_with_local_: int,
    is_with_read_only_: int,
    name_oid_: int,
    schema_: string,
    sql_security_: string,
    sub_query_oid_: int,
    table_source_oid_: int
}
impl SqlAlterViewStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAlterViewStatementDO {
    	for (tmp in db.sql_alter_view_statement) {
            yield SqlAlterViewStatementDO {
                oid_ : tmp.oid_,
                algorithm_ : tmp.algorithm_,
                comment_oid_ : tmp.comment_oid_,
                definer_oid_ : tmp.definer_oid_,
                is_force_ : tmp.is_force_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                is_with_cascaded_ : tmp.is_with_cascaded_,
                is_with_check_option_ : tmp.is_with_check_option_,
                is_with_local_ : tmp.is_with_local_,
                is_with_read_only_ : tmp.is_with_read_only_,
                name_oid_ : tmp.name_oid_,
                schema_ : tmp.schema_,
                sql_security_ : tmp.sql_security_,
                sub_query_oid_ : tmp.sub_query_oid_,
                table_source_oid_ : tmp.table_source_oid_
            }
    	}
    }
    /**
     * @brief gets the algorithm of this element.
     * @return string
     */
    pub fn getAlgorithm(self) -> string {
        return self.algorithm_
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the definer oid of this element.
     * @return int
     */
    pub fn getDefinerOid(self) -> int {
        return self.definer_oid_
    }
    /**
     * @brief gets the is force of this element.
     * @return int
     */
    pub fn getIsForce(self) -> int {
        return self.is_force_
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the is with cascaded of this element.
     * @return int
     */
    pub fn getIsWithCascaded(self) -> int {
        return self.is_with_cascaded_
    }
    /**
     * @brief gets the is with check option of this element.
     * @return int
     */
    pub fn getIsWithCheckOption(self) -> int {
        return self.is_with_check_option_
    }
    /**
     * @brief gets the is with local of this element.
     * @return int
     */
    pub fn getIsWithLocal(self) -> int {
        return self.is_with_local_
    }
    /**
     * @brief gets the is with read only of this element.
     * @return int
     */
    pub fn getIsWithReadOnly(self) -> int {
        return self.is_with_read_only_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the schema of this element.
     * @return string
     */
    pub fn getSchema(self) -> string {
        return self.schema_
    }
    /**
     * @brief gets the sql security of this element.
     * @return string
     */
    pub fn getSqlSecurity(self) -> string {
        return self.sql_security_
    }
    /**
     * @brief gets the sub query oid of this element.
     * @return int
     */
    pub fn getSubQueryOid(self) -> int {
        return self.sub_query_oid_
    }
    /**
     * @brief gets the table source oid of this element.
     * @return int
     */
    pub fn getTableSourceOid(self) -> int {
        return self.table_source_oid_
    }
}
/**
 * @brief DO class: A sql analyze table statement.
 */
schema SqlAnalyzeTableStatementDO {
    @primary oid_: int,
    adb_schema_oid_: int,
    adb_where_oid_: int,
    is_cache_metadata_: int,
    is_compute_statistics_: int,
    is_for_colums_: int,
    is_noscan_: int,
    partition_oid_: int,
    table_oid_: int
}
impl SqlAnalyzeTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAnalyzeTableStatementDO {
    	for (tmp in db.sql_analyze_table_statement) {
            yield SqlAnalyzeTableStatementDO {
                oid_ : tmp.oid_,
                adb_schema_oid_ : tmp.adb_schema_oid_,
                adb_where_oid_ : tmp.adb_where_oid_,
                is_cache_metadata_ : tmp.is_cache_metadata_,
                is_compute_statistics_ : tmp.is_compute_statistics_,
                is_for_colums_ : tmp.is_for_colums_,
                is_noscan_ : tmp.is_noscan_,
                partition_oid_ : tmp.partition_oid_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the adb schema oid of this element.
     * @return int
     */
    pub fn getAdbSchemaOid(self) -> int {
        return self.adb_schema_oid_
    }
    /**
     * @brief gets the adb where oid of this element.
     * @return int
     */
    pub fn getAdbWhereOid(self) -> int {
        return self.adb_where_oid_
    }
    /**
     * @brief gets the is cache metadata of this element.
     * @return int
     */
    pub fn getIsCacheMetadata(self) -> int {
        return self.is_cache_metadata_
    }
    /**
     * @brief gets the is compute statistics of this element.
     * @return int
     */
    pub fn getIsComputeStatistics(self) -> int {
        return self.is_compute_statistics_
    }
    /**
     * @brief gets the is for colums of this element.
     * @return int
     */
    pub fn getIsForColums(self) -> int {
        return self.is_for_colums_
    }
    /**
     * @brief gets the is noscan of this element.
     * @return int
     */
    pub fn getIsNoscan(self) -> int {
        return self.is_noscan_
    }
    /**
     * @brief gets the partition oid of this element.
     * @return int
     */
    pub fn getPartitionOid(self) -> int {
        return self.partition_oid_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: A sql ann index.
 */
schema SqlAnnIndexDO {
    @primary oid_: int,
    distance_: string,
    index_type_: int,
    rt_index_type_: int
}
impl SqlAnnIndexDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAnnIndexDO {
    	for (tmp in db.sql_ann_index) {
            yield SqlAnnIndexDO {
                oid_ : tmp.oid_,
                distance_ : tmp.distance_,
                index_type_ : tmp.index_type_,
                rt_index_type_ : tmp.rt_index_type_
            }
    	}
    }
    /**
     * @brief gets the distance of this element.
     * @return string
     */
    pub fn getDistance(self) -> string {
        return self.distance_
    }
    /**
     * @brief gets the index type of this element.
     * @return int
     */
    pub fn getIndexType(self) -> int {
        return self.index_type_
    }
    /**
     * @brief gets the rt index type of this element.
     * @return int
     */
    pub fn getRtIndexType(self) -> int {
        return self.rt_index_type_
    }
}
/**
 * @brief DO class: A sql any expr.
 */
schema SqlAnyExprDO {
    @primary oid_: int,
    sub_query_oid_: int
}
impl SqlAnyExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAnyExprDO {
    	for (tmp in db.sql_any_expr) {
            yield SqlAnyExprDO {
                oid_ : tmp.oid_,
                sub_query_oid_ : tmp.sub_query_oid_
            }
    	}
    }
    /**
     * @brief gets the sub query oid of this element.
     * @return int
     */
    pub fn getSubQueryOid(self) -> int {
        return self.sub_query_oid_
    }
}
/**
 * @brief DO class: A sql archive table statement.
 */
schema SqlArchiveTableStatementDO {
    @primary oid_: int,
    table_oid_: int,
    type_oid_: int
}
impl SqlArchiveTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlArchiveTableStatementDO {
    	for (tmp in db.sql_archive_table_statement) {
            yield SqlArchiveTableStatementDO {
                oid_ : tmp.oid_,
                table_oid_ : tmp.table_oid_,
                type_oid_ : tmp.type_oid_
            }
    	}
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
    /**
     * @brief gets the type oid of this element.
     * @return int
     */
    pub fn getTypeOid(self) -> int {
        return self.type_oid_
    }
}
/**
 * @brief DO class: A sql argument.
 */
schema SqlArgumentDO {
    @primary oid_: int,
    expr_oid_: int,
    type_: string
}
impl SqlArgumentDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlArgumentDO {
    	for (tmp in db.sql_argument) {
            yield SqlArgumentDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A sql array data type.
 */
schema SqlArrayDataTypeDO {
    @primary oid_: int,
    component_type_oid_: int,
    is_int_: int,
    is_numberic_: int,
    is_string_: int,
    is_with_local_time_zone_: int,
    name_: string,
    with_time_zone_: int
}
impl SqlArrayDataTypeDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlArrayDataTypeDO {
    	for (tmp in db.sql_array_data_type) {
            yield SqlArrayDataTypeDO {
                oid_ : tmp.oid_,
                component_type_oid_ : tmp.component_type_oid_,
                is_int_ : tmp.is_int_,
                is_numberic_ : tmp.is_numberic_,
                is_string_ : tmp.is_string_,
                is_with_local_time_zone_ : tmp.is_with_local_time_zone_,
                name_ : tmp.name_,
                with_time_zone_ : tmp.with_time_zone_
            }
    	}
    }
    /**
     * @brief gets the component type oid of this element.
     * @return int
     */
    pub fn getComponentTypeOid(self) -> int {
        return self.component_type_oid_
    }
    /**
     * @brief gets the is int of this element.
     * @return int
     */
    pub fn getIsInt(self) -> int {
        return self.is_int_
    }
    /**
     * @brief gets the is numberic of this element.
     * @return int
     */
    pub fn getIsNumberic(self) -> int {
        return self.is_numberic_
    }
    /**
     * @brief gets the is string of this element.
     * @return int
     */
    pub fn getIsString(self) -> int {
        return self.is_string_
    }
    /**
     * @brief gets the is with local time zone of this element.
     * @return int
     */
    pub fn getIsWithLocalTimeZone(self) -> int {
        return self.is_with_local_time_zone_
    }
    /**
     * @brief gets the name of this element.
     * @return string
     */
    pub fn getName(self) -> string {
        return self.name_
    }
    /**
     * @brief gets the with time zone of this element.
     * @return int
     */
    pub fn getWithTimeZone(self) -> int {
        return self.with_time_zone_
    }
}
/**
 * @brief DO class: A sql array expr.
 */
schema SqlArrayExprDO {
    @primary oid_: int,
    expr_oid_: int
}
impl SqlArrayExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlArrayExprDO {
    	for (tmp in db.sql_array_expr) {
            yield SqlArrayExprDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
}
/**
 * @brief DO class: A sql assign item.
 */
schema SqlAssignItemDO {
    @primary oid_: int,
    target_oid_: int,
    value_oid_: int
}
impl SqlAssignItemDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlAssignItemDO {
    	for (tmp in db.sql_assign_item) {
            yield SqlAssignItemDO {
                oid_ : tmp.oid_,
                target_oid_ : tmp.target_oid_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the target oid of this element.
     * @return int
     */
    pub fn getTargetOid(self) -> int {
        return self.target_oid_
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A sql backup statement.
 */
schema SqlBackupStatementDO {
    @primary oid_: int,
    action_oid_: int,
    type_oid_: int
}
impl SqlBackupStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlBackupStatementDO {
    	for (tmp in db.sql_backup_statement) {
            yield SqlBackupStatementDO {
                oid_ : tmp.oid_,
                action_oid_ : tmp.action_oid_,
                type_oid_ : tmp.type_oid_
            }
    	}
    }
    /**
     * @brief gets the action oid of this element.
     * @return int
     */
    pub fn getActionOid(self) -> int {
        return self.action_oid_
    }
    /**
     * @brief gets the type oid of this element.
     * @return int
     */
    pub fn getTypeOid(self) -> int {
        return self.type_oid_
    }
}
/**
 * @brief DO class: A sql between expr.
 */
schema SqlBetweenExprDO {
    @primary oid_: int,
    begin_expr_oid_: int,
    end_expr_oid_: int,
    is_not_: int,
    test_expr_oid_: int
}
impl SqlBetweenExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlBetweenExprDO {
    	for (tmp in db.sql_between_expr) {
            yield SqlBetweenExprDO {
                oid_ : tmp.oid_,
                begin_expr_oid_ : tmp.begin_expr_oid_,
                end_expr_oid_ : tmp.end_expr_oid_,
                is_not_ : tmp.is_not_,
                test_expr_oid_ : tmp.test_expr_oid_
            }
    	}
    }
    /**
     * @brief gets the begin expr oid of this element.
     * @return int
     */
    pub fn getBeginExprOid(self) -> int {
        return self.begin_expr_oid_
    }
    /**
     * @brief gets the end expr oid of this element.
     * @return int
     */
    pub fn getEndExprOid(self) -> int {
        return self.end_expr_oid_
    }
    /**
     * @brief gets the is not of this element.
     * @return int
     */
    pub fn getIsNot(self) -> int {
        return self.is_not_
    }
    /**
     * @brief gets the test expr oid of this element.
     * @return int
     */
    pub fn getTestExprOid(self) -> int {
        return self.test_expr_oid_
    }
}
/**
 * @brief DO class: A sql big int expr.
 */
schema SqlBigIntExprDO {
    @primary oid_: int,
    number_: string,
    value_: string
}
impl SqlBigIntExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlBigIntExprDO {
    	for (tmp in db.sql_big_int_expr) {
            yield SqlBigIntExprDO {
                oid_ : tmp.oid_,
                number_ : tmp.number_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the number of this element.
     * @return string
     */
    pub fn getNumber(self) -> string {
        return self.number_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql binary expr.
 */
schema SqlBinaryExprDO {
    @primary oid_: int,
    text_: string,
    value_: string
}
impl SqlBinaryExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlBinaryExprDO {
    	for (tmp in db.sql_binary_expr) {
            yield SqlBinaryExprDO {
                oid_ : tmp.oid_,
                text_ : tmp.text_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the text of this element.
     * @return string
     */
    pub fn getText(self) -> string {
        return self.text_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql binary op expr.
 */
schema SqlBinaryOpExprDO {
    @primary oid_: int,
    is_both_name_: int,
    is_left_function_and_right_literal_: int,
    is_left_literal_and_right_name_: int,
    is_left_name_and_right_literal_: int,
    is_name_and_literal_: int,
    is_parenthesized_: int,
    left_oid_: int,
    operator_: string,
    right_oid_: int
}
impl SqlBinaryOpExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlBinaryOpExprDO {
    	for (tmp in db.sql_binary_op_expr) {
            yield SqlBinaryOpExprDO {
                oid_ : tmp.oid_,
                is_both_name_ : tmp.is_both_name_,
                is_left_function_and_right_literal_ : tmp.is_left_function_and_right_literal_,
                is_left_literal_and_right_name_ : tmp.is_left_literal_and_right_name_,
                is_left_name_and_right_literal_ : tmp.is_left_name_and_right_literal_,
                is_name_and_literal_ : tmp.is_name_and_literal_,
                is_parenthesized_ : tmp.is_parenthesized_,
                left_oid_ : tmp.left_oid_,
                operator_ : tmp.operator_,
                right_oid_ : tmp.right_oid_
            }
    	}
    }
    /**
     * @brief gets the is both name of this element.
     * @return int
     */
    pub fn getIsBothName(self) -> int {
        return self.is_both_name_
    }
    /**
     * @brief gets the is left function and right literal of this element.
     * @return int
     */
    pub fn getIsLeftFunctionAndRightLiteral(self) -> int {
        return self.is_left_function_and_right_literal_
    }
    /**
     * @brief gets the is left literal and right name of this element.
     * @return int
     */
    pub fn getIsLeftLiteralAndRightName(self) -> int {
        return self.is_left_literal_and_right_name_
    }
    /**
     * @brief gets the is left name and right literal of this element.
     * @return int
     */
    pub fn getIsLeftNameAndRightLiteral(self) -> int {
        return self.is_left_name_and_right_literal_
    }
    /**
     * @brief gets the is name and literal of this element.
     * @return int
     */
    pub fn getIsNameAndLiteral(self) -> int {
        return self.is_name_and_literal_
    }
    /**
     * @brief gets the is parenthesized of this element.
     * @return int
     */
    pub fn getIsParenthesized(self) -> int {
        return self.is_parenthesized_
    }
    /**
     * @brief gets the left oid of this element.
     * @return int
     */
    pub fn getLeftOid(self) -> int {
        return self.left_oid_
    }
    /**
     * @brief gets the operator of this element.
     * @return string
     */
    pub fn getOperator(self) -> string {
        return self.operator_
    }
    /**
     * @brief gets the right oid of this element.
     * @return int
     */
    pub fn getRightOid(self) -> int {
        return self.right_oid_
    }
}
/**
 * @brief DO class: A sql binary op expr group.
 */
schema SqlBinaryOpExprGroupDO {
    @primary oid_: int,
    operator_: string
}
impl SqlBinaryOpExprGroupDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlBinaryOpExprGroupDO {
    	for (tmp in db.sql_binary_op_expr_group) {
            yield SqlBinaryOpExprGroupDO {
                oid_ : tmp.oid_,
                operator_ : tmp.operator_
            }
    	}
    }
    /**
     * @brief gets the operator of this element.
     * @return string
     */
    pub fn getOperator(self) -> string {
        return self.operator_
    }
}
/**
 * @brief DO class: A sql block statement.
 */
schema SqlBlockStatementDO {
    @primary oid_: int,
    end_label_: string,
    exception_oid_: int,
    is_end_of_commit_: int,
    label_name_: string
}
impl SqlBlockStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlBlockStatementDO {
    	for (tmp in db.sql_block_statement) {
            yield SqlBlockStatementDO {
                oid_ : tmp.oid_,
                end_label_ : tmp.end_label_,
                exception_oid_ : tmp.exception_oid_,
                is_end_of_commit_ : tmp.is_end_of_commit_,
                label_name_ : tmp.label_name_
            }
    	}
    }
    /**
     * @brief gets the end label of this element.
     * @return string
     */
    pub fn getEndLabel(self) -> string {
        return self.end_label_
    }
    /**
     * @brief gets the exception oid of this element.
     * @return int
     */
    pub fn getExceptionOid(self) -> int {
        return self.exception_oid_
    }
    /**
     * @brief gets the is end of commit of this element.
     * @return int
     */
    pub fn getIsEndOfCommit(self) -> int {
        return self.is_end_of_commit_
    }
    /**
     * @brief gets the label name of this element.
     * @return string
     */
    pub fn getLabelName(self) -> string {
        return self.label_name_
    }
}
/**
 * @brief DO class: A sql boolean expr.
 */
schema SqlBooleanExprDO {
    @primary oid_: int,
    boolean_value_: int,
    value_: int
}
impl SqlBooleanExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlBooleanExprDO {
    	for (tmp in db.sql_boolean_expr) {
            yield SqlBooleanExprDO {
                oid_ : tmp.oid_,
                boolean_value_ : tmp.boolean_value_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the boolean value of this element.
     * @return int
     */
    pub fn getBooleanValue(self) -> int {
        return self.boolean_value_
    }
    /**
     * @brief gets the value of this element.
     * @return int
     */
    pub fn getValue(self) -> int {
        return self.value_
    }
}
/**
 * @brief DO class: A sql build table statement.
 */
schema SqlBuildTableStatementDO {
    @primary oid_: int,
    is_force_: int,
    is_with_split_: int,
    table_oid_: int,
    version_oid_: int
}
impl SqlBuildTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlBuildTableStatementDO {
    	for (tmp in db.sql_build_table_statement) {
            yield SqlBuildTableStatementDO {
                oid_ : tmp.oid_,
                is_force_ : tmp.is_force_,
                is_with_split_ : tmp.is_with_split_,
                table_oid_ : tmp.table_oid_,
                version_oid_ : tmp.version_oid_
            }
    	}
    }
    /**
     * @brief gets the is force of this element.
     * @return int
     */
    pub fn getIsForce(self) -> int {
        return self.is_force_
    }
    /**
     * @brief gets the is with split of this element.
     * @return int
     */
    pub fn getIsWithSplit(self) -> int {
        return self.is_with_split_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
    /**
     * @brief gets the version oid of this element.
     * @return int
     */
    pub fn getVersionOid(self) -> int {
        return self.version_oid_
    }
}
/**
 * @brief DO class: A sql call statement.
 */
schema SqlCallStatementDO {
    @primary oid_: int,
    is_brace_: int,
    out_parameter_oid_: int,
    procedure_name_oid_: int
}
impl SqlCallStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCallStatementDO {
    	for (tmp in db.sql_call_statement) {
            yield SqlCallStatementDO {
                oid_ : tmp.oid_,
                is_brace_ : tmp.is_brace_,
                out_parameter_oid_ : tmp.out_parameter_oid_,
                procedure_name_oid_ : tmp.procedure_name_oid_
            }
    	}
    }
    /**
     * @brief gets the is brace of this element.
     * @return int
     */
    pub fn getIsBrace(self) -> int {
        return self.is_brace_
    }
    /**
     * @brief gets the out parameter oid of this element.
     * @return int
     */
    pub fn getOutParameterOid(self) -> int {
        return self.out_parameter_oid_
    }
    /**
     * @brief gets the procedure name oid of this element.
     * @return int
     */
    pub fn getProcedureNameOid(self) -> int {
        return self.procedure_name_oid_
    }
}
/**
 * @brief DO class: A sql cancel job statement.
 */
schema SqlCancelJobStatementDO {
    @primary oid_: int,
    is_import_: int,
    job_name_oid_: int
}
impl SqlCancelJobStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCancelJobStatementDO {
    	for (tmp in db.sql_cancel_job_statement) {
            yield SqlCancelJobStatementDO {
                oid_ : tmp.oid_,
                is_import_ : tmp.is_import_,
                job_name_oid_ : tmp.job_name_oid_
            }
    	}
    }
    /**
     * @brief gets the is import of this element.
     * @return int
     */
    pub fn getIsImport(self) -> int {
        return self.is_import_
    }
    /**
     * @brief gets the job name oid of this element.
     * @return int
     */
    pub fn getJobNameOid(self) -> int {
        return self.job_name_oid_
    }
}
/**
 * @brief DO class: A sql case expr.
 */
schema SqlCaseExprDO {
    @primary oid_: int,
    else_expr_oid_: int,
    items_: string,
    value_expr_oid_: int
}
impl SqlCaseExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCaseExprDO {
    	for (tmp in db.sql_case_expr) {
            yield SqlCaseExprDO {
                oid_ : tmp.oid_,
                else_expr_oid_ : tmp.else_expr_oid_,
                items_ : tmp.items_,
                value_expr_oid_ : tmp.value_expr_oid_
            }
    	}
    }
    /**
     * @brief gets the else expr oid of this element.
     * @return int
     */
    pub fn getElseExprOid(self) -> int {
        return self.else_expr_oid_
    }
    /**
     * @brief gets the items of this element.
     * @return string
     */
    pub fn getItems(self) -> string {
        return self.items_
    }
    /**
     * @brief gets the value expr oid of this element.
     * @return int
     */
    pub fn getValueExprOid(self) -> int {
        return self.value_expr_oid_
    }
}
/**
 * @brief DO class: A sql case statement.
 */
schema SqlCaseStatementDO {
    @primary oid_: int,
    items_: string,
    value_expr_oid_: int
}
impl SqlCaseStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCaseStatementDO {
    	for (tmp in db.sql_case_statement) {
            yield SqlCaseStatementDO {
                oid_ : tmp.oid_,
                items_ : tmp.items_,
                value_expr_oid_ : tmp.value_expr_oid_
            }
    	}
    }
    /**
     * @brief gets the items of this element.
     * @return string
     */
    pub fn getItems(self) -> string {
        return self.items_
    }
    /**
     * @brief gets the value expr oid of this element.
     * @return int
     */
    pub fn getValueExprOid(self) -> int {
        return self.value_expr_oid_
    }
}
/**
 * @brief DO class: A sql cast expr.
 */
schema SqlCastExprDO {
    @primary oid_: int,
    data_type_oid_: int,
    expr_oid_: int,
    is_try_: int
}
impl SqlCastExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCastExprDO {
    	for (tmp in db.sql_cast_expr) {
            yield SqlCastExprDO {
                oid_ : tmp.oid_,
                data_type_oid_ : tmp.data_type_oid_,
                expr_oid_ : tmp.expr_oid_,
                is_try_ : tmp.is_try_
            }
    	}
    }
    /**
     * @brief gets the data type oid of this element.
     * @return int
     */
    pub fn getDataTypeOid(self) -> int {
        return self.data_type_oid_
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the is try of this element.
     * @return int
     */
    pub fn getIsTry(self) -> int {
        return self.is_try_
    }
}
/**
 * @brief DO class: A sql char expr.
 */
schema SqlCharExprDO {
    @primary oid_: int,
    value_: string
}
impl SqlCharExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCharExprDO {
    	for (tmp in db.sql_char_expr) {
            yield SqlCharExprDO {
                oid_ : tmp.oid_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql character data type.
 */
schema SqlCharacterDataTypeDO {
    @primary oid_: int,
    char_set_name_: string,
    char_type_: string,
    collate_: string,
    is_has_binary_: int,
    length_: int
}
impl SqlCharacterDataTypeDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCharacterDataTypeDO {
    	for (tmp in db.sql_character_data_type) {
            yield SqlCharacterDataTypeDO {
                oid_ : tmp.oid_,
                char_set_name_ : tmp.char_set_name_,
                char_type_ : tmp.char_type_,
                collate_ : tmp.collate_,
                is_has_binary_ : tmp.is_has_binary_,
                length_ : tmp.length_
            }
    	}
    }
    /**
     * @brief gets the char set name of this element.
     * @return string
     */
    pub fn getCharSetName(self) -> string {
        return self.char_set_name_
    }
    /**
     * @brief gets the char type of this element.
     * @return string
     */
    pub fn getCharType(self) -> string {
        return self.char_type_
    }
    /**
     * @brief gets the collate of this element.
     * @return string
     */
    pub fn getCollate(self) -> string {
        return self.collate_
    }
    /**
     * @brief gets the is has binary of this element.
     * @return int
     */
    pub fn getIsHasBinary(self) -> int {
        return self.is_has_binary_
    }
    /**
     * @brief gets the length of this element.
     * @return int
     */
    pub fn getLength(self) -> int {
        return self.length_
    }
}
/**
 * @brief DO class: A sql check.
 */
schema SqlCheckDO {
    @primary oid_: int,
    enforced_: int,
    expr_oid_: int
}
impl SqlCheckDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCheckDO {
    	for (tmp in db.sql_check) {
            yield SqlCheckDO {
                oid_ : tmp.oid_,
                enforced_ : tmp.enforced_,
                expr_oid_ : tmp.expr_oid_
            }
    	}
    }
    /**
     * @brief gets the enforced of this element.
     * @return int
     */
    pub fn getEnforced(self) -> int {
        return self.enforced_
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
}
/**
 * @brief DO class: A sql clone table statement.
 */
schema SqlCloneTableStatementDO {
    @primary oid_: int,
    from_oid_: int,
    is_if_exists_ignore_: int,
    is_if_exists_overwrite_: int,
    to_name_oid_: int,
    to_oid_: int
}
impl SqlCloneTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCloneTableStatementDO {
    	for (tmp in db.sql_clone_table_statement) {
            yield SqlCloneTableStatementDO {
                oid_ : tmp.oid_,
                from_oid_ : tmp.from_oid_,
                is_if_exists_ignore_ : tmp.is_if_exists_ignore_,
                is_if_exists_overwrite_ : tmp.is_if_exists_overwrite_,
                to_name_oid_ : tmp.to_name_oid_,
                to_oid_ : tmp.to_oid_
            }
    	}
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the is if exists ignore of this element.
     * @return int
     */
    pub fn getIsIfExistsIgnore(self) -> int {
        return self.is_if_exists_ignore_
    }
    /**
     * @brief gets the is if exists overwrite of this element.
     * @return int
     */
    pub fn getIsIfExistsOverwrite(self) -> int {
        return self.is_if_exists_overwrite_
    }
    /**
     * @brief gets the to name oid of this element.
     * @return int
     */
    pub fn getToNameOid(self) -> int {
        return self.to_name_oid_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
}
/**
 * @brief DO class: A sql close statement.
 */
schema SqlCloseStatementDO {
    @primary oid_: int,
    cursor_name_oid_: int
}
impl SqlCloseStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCloseStatementDO {
    	for (tmp in db.sql_close_statement) {
            yield SqlCloseStatementDO {
                oid_ : tmp.oid_,
                cursor_name_oid_ : tmp.cursor_name_oid_
            }
    	}
    }
    /**
     * @brief gets the cursor name oid of this element.
     * @return int
     */
    pub fn getCursorNameOid(self) -> int {
        return self.cursor_name_oid_
    }
}
/**
 * @brief DO class: A sql column check.
 */
schema SqlColumnCheckDO {
    @primary oid_: int,
    enforced_: int,
    expr_oid_: int
}
impl SqlColumnCheckDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlColumnCheckDO {
    	for (tmp in db.sql_column_check) {
            yield SqlColumnCheckDO {
                oid_ : tmp.oid_,
                enforced_ : tmp.enforced_,
                expr_oid_ : tmp.expr_oid_
            }
    	}
    }
    /**
     * @brief gets the enforced of this element.
     * @return int
     */
    pub fn getEnforced(self) -> int {
        return self.enforced_
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
}
/**
 * @brief DO class: A sql column definition.
 */
schema SqlColumnDefinitionDO {
    @primary oid_: int,
    ann_index_oid_: int,
    as_expr_oid_: int,
    charset_expr_oid_: int,
    collate_expr_oid_: int,
    column_name_: string,
    comment_oid_: int,
    compression_oid_: int,
    data_type_oid_: int,
    default_expr_oid_: int,
    delimiter_oid_: int,
    delimiter_tokenizer_oid_: int,
    enable_: int,
    encode_oid_: int,
    format_oid_: int,
    generated_alaws_as_oid_: int,
    identity_: string,
    is_auto_increment_: int,
    is_disable_index_: int,
    is_only_primary_key_: int,
    is_partition_by_: int,
    is_pre_sort_: int,
    is_primary_key_: int,
    is_stored_: int,
    is_virtual_: int,
    is_visible_: int,
    json_index_attrs_expr_oid_: int,
    name_oid_: int,
    name_as_string_: string,
    nlp_tokenizer_oid_: int,
    npl_tokenizer_oid_: int,
    on_update_oid_: int,
    pre_sort_order_: int,
    rely_: int,
    sequence_type_: string,
    step_oid_: int,
    storage_oid_: int,
    unit_count_oid_: int,
    unit_index_oid_: int,
    validate_: int,
    value_type_oid_: int
}
impl SqlColumnDefinitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlColumnDefinitionDO {
    	for (tmp in db.sql_column_definition) {
            yield SqlColumnDefinitionDO {
                oid_ : tmp.oid_,
                ann_index_oid_ : tmp.ann_index_oid_,
                as_expr_oid_ : tmp.as_expr_oid_,
                charset_expr_oid_ : tmp.charset_expr_oid_,
                collate_expr_oid_ : tmp.collate_expr_oid_,
                column_name_ : tmp.column_name_,
                comment_oid_ : tmp.comment_oid_,
                compression_oid_ : tmp.compression_oid_,
                data_type_oid_ : tmp.data_type_oid_,
                default_expr_oid_ : tmp.default_expr_oid_,
                delimiter_oid_ : tmp.delimiter_oid_,
                delimiter_tokenizer_oid_ : tmp.delimiter_tokenizer_oid_,
                enable_ : tmp.enable_,
                encode_oid_ : tmp.encode_oid_,
                format_oid_ : tmp.format_oid_,
                generated_alaws_as_oid_ : tmp.generated_alaws_as_oid_,
                identity_ : tmp.identity_,
                is_auto_increment_ : tmp.is_auto_increment_,
                is_disable_index_ : tmp.is_disable_index_,
                is_only_primary_key_ : tmp.is_only_primary_key_,
                is_partition_by_ : tmp.is_partition_by_,
                is_pre_sort_ : tmp.is_pre_sort_,
                is_primary_key_ : tmp.is_primary_key_,
                is_stored_ : tmp.is_stored_,
                is_virtual_ : tmp.is_virtual_,
                is_visible_ : tmp.is_visible_,
                json_index_attrs_expr_oid_ : tmp.json_index_attrs_expr_oid_,
                name_oid_ : tmp.name_oid_,
                name_as_string_ : tmp.name_as_string_,
                nlp_tokenizer_oid_ : tmp.nlp_tokenizer_oid_,
                npl_tokenizer_oid_ : tmp.npl_tokenizer_oid_,
                on_update_oid_ : tmp.on_update_oid_,
                pre_sort_order_ : tmp.pre_sort_order_,
                rely_ : tmp.rely_,
                sequence_type_ : tmp.sequence_type_,
                step_oid_ : tmp.step_oid_,
                storage_oid_ : tmp.storage_oid_,
                unit_count_oid_ : tmp.unit_count_oid_,
                unit_index_oid_ : tmp.unit_index_oid_,
                validate_ : tmp.validate_,
                value_type_oid_ : tmp.value_type_oid_
            }
    	}
    }
    /**
     * @brief gets the ann index oid of this element.
     * @return int
     */
    pub fn getAnnIndexOid(self) -> int {
        return self.ann_index_oid_
    }
    /**
     * @brief gets the as expr oid of this element.
     * @return int
     */
    pub fn getAsExprOid(self) -> int {
        return self.as_expr_oid_
    }
    /**
     * @brief gets the charset expr oid of this element.
     * @return int
     */
    pub fn getCharsetExprOid(self) -> int {
        return self.charset_expr_oid_
    }
    /**
     * @brief gets the collate expr oid of this element.
     * @return int
     */
    pub fn getCollateExprOid(self) -> int {
        return self.collate_expr_oid_
    }
    /**
     * @brief gets the column name of this element.
     * @return string
     */
    pub fn getColumnName(self) -> string {
        return self.column_name_
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the compression oid of this element.
     * @return int
     */
    pub fn getCompressionOid(self) -> int {
        return self.compression_oid_
    }
    /**
     * @brief gets the data type oid of this element.
     * @return int
     */
    pub fn getDataTypeOid(self) -> int {
        return self.data_type_oid_
    }
    /**
     * @brief gets the default expr oid of this element.
     * @return int
     */
    pub fn getDefaultExprOid(self) -> int {
        return self.default_expr_oid_
    }
    /**
     * @brief gets the delimiter oid of this element.
     * @return int
     */
    pub fn getDelimiterOid(self) -> int {
        return self.delimiter_oid_
    }
    /**
     * @brief gets the delimiter tokenizer oid of this element.
     * @return int
     */
    pub fn getDelimiterTokenizerOid(self) -> int {
        return self.delimiter_tokenizer_oid_
    }
    /**
     * @brief gets the enable of this element.
     * @return int
     */
    pub fn getEnable(self) -> int {
        return self.enable_
    }
    /**
     * @brief gets the encode oid of this element.
     * @return int
     */
    pub fn getEncodeOid(self) -> int {
        return self.encode_oid_
    }
    /**
     * @brief gets the format oid of this element.
     * @return int
     */
    pub fn getFormatOid(self) -> int {
        return self.format_oid_
    }
    /**
     * @brief gets the generated alaws as oid of this element.
     * @return int
     */
    pub fn getGeneratedAlawsAsOid(self) -> int {
        return self.generated_alaws_as_oid_
    }
    /**
     * @brief gets the identity of this element.
     * @return string
     */
    pub fn getIdentity(self) -> string {
        return self.identity_
    }
    /**
     * @brief gets the is auto increment of this element.
     * @return int
     */
    pub fn getIsAutoIncrement(self) -> int {
        return self.is_auto_increment_
    }
    /**
     * @brief gets the is disable index of this element.
     * @return int
     */
    pub fn getIsDisableIndex(self) -> int {
        return self.is_disable_index_
    }
    /**
     * @brief gets the is only primary key of this element.
     * @return int
     */
    pub fn getIsOnlyPrimaryKey(self) -> int {
        return self.is_only_primary_key_
    }
    /**
     * @brief gets the is partition by of this element.
     * @return int
     */
    pub fn getIsPartitionBy(self) -> int {
        return self.is_partition_by_
    }
    /**
     * @brief gets the is pre sort of this element.
     * @return int
     */
    pub fn getIsPreSort(self) -> int {
        return self.is_pre_sort_
    }
    /**
     * @brief gets the is primary key of this element.
     * @return int
     */
    pub fn getIsPrimaryKey(self) -> int {
        return self.is_primary_key_
    }
    /**
     * @brief gets the is stored of this element.
     * @return int
     */
    pub fn getIsStored(self) -> int {
        return self.is_stored_
    }
    /**
     * @brief gets the is virtual of this element.
     * @return int
     */
    pub fn getIsVirtual(self) -> int {
        return self.is_virtual_
    }
    /**
     * @brief gets the is visible of this element.
     * @return int
     */
    pub fn getIsVisible(self) -> int {
        return self.is_visible_
    }
    /**
     * @brief gets the json index attrs expr oid of this element.
     * @return int
     */
    pub fn getJsonIndexAttrsExprOid(self) -> int {
        return self.json_index_attrs_expr_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the name as string of this element.
     * @return string
     */
    pub fn getNameAsString(self) -> string {
        return self.name_as_string_
    }
    /**
     * @brief gets the nlp tokenizer oid of this element.
     * @return int
     */
    pub fn getNlpTokenizerOid(self) -> int {
        return self.nlp_tokenizer_oid_
    }
    /**
     * @brief gets the npl tokenizer oid of this element.
     * @return int
     */
    pub fn getNplTokenizerOid(self) -> int {
        return self.npl_tokenizer_oid_
    }
    /**
     * @brief gets the on update oid of this element.
     * @return int
     */
    pub fn getOnUpdateOid(self) -> int {
        return self.on_update_oid_
    }
    /**
     * @brief gets the pre sort order of this element.
     * @return int
     */
    pub fn getPreSortOrder(self) -> int {
        return self.pre_sort_order_
    }
    /**
     * @brief gets the rely of this element.
     * @return int
     */
    pub fn getRely(self) -> int {
        return self.rely_
    }
    /**
     * @brief gets the sequence type of this element.
     * @return string
     */
    pub fn getSequenceType(self) -> string {
        return self.sequence_type_
    }
    /**
     * @brief gets the step oid of this element.
     * @return int
     */
    pub fn getStepOid(self) -> int {
        return self.step_oid_
    }
    /**
     * @brief gets the storage oid of this element.
     * @return int
     */
    pub fn getStorageOid(self) -> int {
        return self.storage_oid_
    }
    /**
     * @brief gets the unit count oid of this element.
     * @return int
     */
    pub fn getUnitCountOid(self) -> int {
        return self.unit_count_oid_
    }
    /**
     * @brief gets the unit index oid of this element.
     * @return int
     */
    pub fn getUnitIndexOid(self) -> int {
        return self.unit_index_oid_
    }
    /**
     * @brief gets the validate of this element.
     * @return int
     */
    pub fn getValidate(self) -> int {
        return self.validate_
    }
    /**
     * @brief gets the value type oid of this element.
     * @return int
     */
    pub fn getValueTypeOid(self) -> int {
        return self.value_type_oid_
    }
}
/**
 * @brief DO class: A sql column primary key.
 */
schema SqlColumnPrimaryKeyDO {
    @primary oid_: int
}
impl SqlColumnPrimaryKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlColumnPrimaryKeyDO {
    	for (tmp in db.sql_column_primary_key) {
            yield SqlColumnPrimaryKeyDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql column reference.
 */
schema SqlColumnReferenceDO {
    @primary oid_: int,
    on_delete_: string,
    on_update_: string,
    reference_match_: string,
    table_oid_: int
}
impl SqlColumnReferenceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlColumnReferenceDO {
    	for (tmp in db.sql_column_reference) {
            yield SqlColumnReferenceDO {
                oid_ : tmp.oid_,
                on_delete_ : tmp.on_delete_,
                on_update_ : tmp.on_update_,
                reference_match_ : tmp.reference_match_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the on delete of this element.
     * @return string
     */
    pub fn getOnDelete(self) -> string {
        return self.on_delete_
    }
    /**
     * @brief gets the on update of this element.
     * @return string
     */
    pub fn getOnUpdate(self) -> string {
        return self.on_update_
    }
    /**
     * @brief gets the reference match of this element.
     * @return string
     */
    pub fn getReferenceMatch(self) -> string {
        return self.reference_match_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: A sql column unique key.
 */
schema SqlColumnUniqueKeyDO {
    @primary oid_: int
}
impl SqlColumnUniqueKeyDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlColumnUniqueKeyDO {
    	for (tmp in db.sql_column_unique_key) {
            yield SqlColumnUniqueKeyDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql comment hint.
 */
schema SqlCommentHintDO {
    @primary oid_: int,
    text_: string
}
impl SqlCommentHintDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCommentHintDO {
    	for (tmp in db.sql_comment_hint) {
            yield SqlCommentHintDO {
                oid_ : tmp.oid_,
                text_ : tmp.text_
            }
    	}
    }
    /**
     * @brief gets the text of this element.
     * @return string
     */
    pub fn getText(self) -> string {
        return self.text_
    }
}
/**
 * @brief DO class: A sql comment statement.
 */
schema SqlCommentStatementDO {
    @primary oid_: int,
    comment_oid_: int,
    on_oid_: int,
    type_: string
}
impl SqlCommentStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCommentStatementDO {
    	for (tmp in db.sql_comment_statement) {
            yield SqlCommentStatementDO {
                oid_ : tmp.oid_,
                comment_oid_ : tmp.comment_oid_,
                on_oid_ : tmp.on_oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the on oid of this element.
     * @return int
     */
    pub fn getOnOid(self) -> int {
        return self.on_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A sql commit statement.
 */
schema SqlCommitStatementDO {
    @primary oid_: int,
    chain_: int,
    delayed_durability_oid_: int,
    immediate_: int,
    is_work_: int,
    is_write_: int,
    release_: int,
    transaction_name_oid_: int,
    wait_: int
}
impl SqlCommitStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCommitStatementDO {
    	for (tmp in db.sql_commit_statement) {
            yield SqlCommitStatementDO {
                oid_ : tmp.oid_,
                chain_ : tmp.chain_,
                delayed_durability_oid_ : tmp.delayed_durability_oid_,
                immediate_ : tmp.immediate_,
                is_work_ : tmp.is_work_,
                is_write_ : tmp.is_write_,
                release_ : tmp.release_,
                transaction_name_oid_ : tmp.transaction_name_oid_,
                wait_ : tmp.wait_
            }
    	}
    }
    /**
     * @brief gets the chain of this element.
     * @return int
     */
    pub fn getChain(self) -> int {
        return self.chain_
    }
    /**
     * @brief gets the delayed durability oid of this element.
     * @return int
     */
    pub fn getDelayedDurabilityOid(self) -> int {
        return self.delayed_durability_oid_
    }
    /**
     * @brief gets the immediate of this element.
     * @return int
     */
    pub fn getImmediate(self) -> int {
        return self.immediate_
    }
    /**
     * @brief gets the is work of this element.
     * @return int
     */
    pub fn getIsWork(self) -> int {
        return self.is_work_
    }
    /**
     * @brief gets the is write of this element.
     * @return int
     */
    pub fn getIsWrite(self) -> int {
        return self.is_write_
    }
    /**
     * @brief gets the release of this element.
     * @return int
     */
    pub fn getRelease(self) -> int {
        return self.release_
    }
    /**
     * @brief gets the transaction name oid of this element.
     * @return int
     */
    pub fn getTransactionNameOid(self) -> int {
        return self.transaction_name_oid_
    }
    /**
     * @brief gets the wait of this element.
     * @return int
     */
    pub fn getWait(self) -> int {
        return self.wait_
    }
}
/**
 * @brief DO class: A sql constraint impl.
 */
schema SqlConstraintImplDO {
    @primary oid_: int,
    comment_oid_: int,
    enable_: int,
    name_oid_: int,
    rely_: int,
    validate_: int
}
impl SqlConstraintImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlConstraintImplDO {
    	for (tmp in db.sql_constraint_impl) {
            yield SqlConstraintImplDO {
                oid_ : tmp.oid_,
                comment_oid_ : tmp.comment_oid_,
                enable_ : tmp.enable_,
                name_oid_ : tmp.name_oid_,
                rely_ : tmp.rely_,
                validate_ : tmp.validate_
            }
    	}
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the enable of this element.
     * @return int
     */
    pub fn getEnable(self) -> int {
        return self.enable_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the rely of this element.
     * @return int
     */
    pub fn getRely(self) -> int {
        return self.rely_
    }
    /**
     * @brief gets the validate of this element.
     * @return int
     */
    pub fn getValidate(self) -> int {
        return self.validate_
    }
}
/**
 * @brief DO class: A sql contains expr.
 */
schema SqlContainsExprDO {
    @primary oid_: int,
    expr_oid_: int,
    is_not_: int
}
impl SqlContainsExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlContainsExprDO {
    	for (tmp in db.sql_contains_expr) {
            yield SqlContainsExprDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_,
                is_not_ : tmp.is_not_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the is not of this element.
     * @return int
     */
    pub fn getIsNot(self) -> int {
        return self.is_not_
    }
}
/**
 * @brief DO class: A sql copy from statement.
 */
schema SqlCopyFromStatementDO {
    @primary oid_: int,
    access_key_id_oid_: int,
    access_key_secret_oid_: int,
    from_oid_: int,
    table_oid_: int
}
impl SqlCopyFromStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCopyFromStatementDO {
    	for (tmp in db.sql_copy_from_statement) {
            yield SqlCopyFromStatementDO {
                oid_ : tmp.oid_,
                access_key_id_oid_ : tmp.access_key_id_oid_,
                access_key_secret_oid_ : tmp.access_key_secret_oid_,
                from_oid_ : tmp.from_oid_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the access key id oid of this element.
     * @return int
     */
    pub fn getAccessKeyIdOid(self) -> int {
        return self.access_key_id_oid_
    }
    /**
     * @brief gets the access key secret oid of this element.
     * @return int
     */
    pub fn getAccessKeySecretOid(self) -> int {
        return self.access_key_secret_oid_
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: A sql create database statement.
 */
schema SqlCreateDatabaseStatementDO {
    @primary oid_: int,
    character_set_: string,
    collate_: string,
    comment_oid_: int,
    database_name_: string,
    is_if_not_exists_: int,
    is_physical_: int,
    location_oid_: int,
    name_oid_: int,
    options_: string,
    password_oid_: int,
    server_: string,
    stored_as_oid_: int,
    stored_by_: string,
    stored_in_oid_: int,
    user_: string
}
impl SqlCreateDatabaseStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCreateDatabaseStatementDO {
    	for (tmp in db.sql_create_database_statement) {
            yield SqlCreateDatabaseStatementDO {
                oid_ : tmp.oid_,
                character_set_ : tmp.character_set_,
                collate_ : tmp.collate_,
                comment_oid_ : tmp.comment_oid_,
                database_name_ : tmp.database_name_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                is_physical_ : tmp.is_physical_,
                location_oid_ : tmp.location_oid_,
                name_oid_ : tmp.name_oid_,
                options_ : tmp.options_,
                password_oid_ : tmp.password_oid_,
                server_ : tmp.server_,
                stored_as_oid_ : tmp.stored_as_oid_,
                stored_by_ : tmp.stored_by_,
                stored_in_oid_ : tmp.stored_in_oid_,
                user_ : tmp.user_
            }
    	}
    }
    /**
     * @brief gets the character set of this element.
     * @return string
     */
    pub fn getCharacterSet(self) -> string {
        return self.character_set_
    }
    /**
     * @brief gets the collate of this element.
     * @return string
     */
    pub fn getCollate(self) -> string {
        return self.collate_
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the database name of this element.
     * @return string
     */
    pub fn getDatabaseName(self) -> string {
        return self.database_name_
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the is physical of this element.
     * @return int
     */
    pub fn getIsPhysical(self) -> int {
        return self.is_physical_
    }
    /**
     * @brief gets the location oid of this element.
     * @return int
     */
    pub fn getLocationOid(self) -> int {
        return self.location_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the options of this element.
     * @return string
     */
    pub fn getOptions(self) -> string {
        return self.options_
    }
    /**
     * @brief gets the password oid of this element.
     * @return int
     */
    pub fn getPasswordOid(self) -> int {
        return self.password_oid_
    }
    /**
     * @brief gets the server of this element.
     * @return string
     */
    pub fn getServer(self) -> string {
        return self.server_
    }
    /**
     * @brief gets the stored as oid of this element.
     * @return int
     */
    pub fn getStoredAsOid(self) -> int {
        return self.stored_as_oid_
    }
    /**
     * @brief gets the stored by of this element.
     * @return string
     */
    pub fn getStoredBy(self) -> string {
        return self.stored_by_
    }
    /**
     * @brief gets the stored in oid of this element.
     * @return int
     */
    pub fn getStoredInOid(self) -> int {
        return self.stored_in_oid_
    }
    /**
     * @brief gets the user of this element.
     * @return string
     */
    pub fn getUser(self) -> string {
        return self.user_
    }
}
/**
 * @brief DO class: A sql create function statement.
 */
schema SqlCreateFunctionStatementDO {
    @primary oid_: int,
    authid_oid_: int,
    block_oid_: int,
    comment_: string,
    data_type_oid_: int,
    definer_oid_: int,
    is_aggregate_: int,
    is_create_: int,
    is_deterministic_: int,
    is_if_not_exists_: int,
    is_or_replace_: int,
    is_parallel_enable_: int,
    is_pipelined_: int,
    is_result_cache_: int,
    is_temporary_: int,
    java_call_spec_: string,
    language_: string,
    name_oid_: int,
    return_data_type_oid_: int,
    schema_: string,
    using_oid_: int,
    wrapped_source_: string
}
impl SqlCreateFunctionStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCreateFunctionStatementDO {
    	for (tmp in db.sql_create_function_statement) {
            yield SqlCreateFunctionStatementDO {
                oid_ : tmp.oid_,
                authid_oid_ : tmp.authid_oid_,
                block_oid_ : tmp.block_oid_,
                comment_ : tmp.comment_,
                data_type_oid_ : tmp.data_type_oid_,
                definer_oid_ : tmp.definer_oid_,
                is_aggregate_ : tmp.is_aggregate_,
                is_create_ : tmp.is_create_,
                is_deterministic_ : tmp.is_deterministic_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                is_or_replace_ : tmp.is_or_replace_,
                is_parallel_enable_ : tmp.is_parallel_enable_,
                is_pipelined_ : tmp.is_pipelined_,
                is_result_cache_ : tmp.is_result_cache_,
                is_temporary_ : tmp.is_temporary_,
                java_call_spec_ : tmp.java_call_spec_,
                language_ : tmp.language_,
                name_oid_ : tmp.name_oid_,
                return_data_type_oid_ : tmp.return_data_type_oid_,
                schema_ : tmp.schema_,
                using_oid_ : tmp.using_oid_,
                wrapped_source_ : tmp.wrapped_source_
            }
    	}
    }
    /**
     * @brief gets the authid oid of this element.
     * @return int
     */
    pub fn getAuthidOid(self) -> int {
        return self.authid_oid_
    }
    /**
     * @brief gets the block oid of this element.
     * @return int
     */
    pub fn getBlockOid(self) -> int {
        return self.block_oid_
    }
    /**
     * @brief gets the comment of this element.
     * @return string
     */
    pub fn getComment(self) -> string {
        return self.comment_
    }
    /**
     * @brief gets the data type oid of this element.
     * @return int
     */
    pub fn getDataTypeOid(self) -> int {
        return self.data_type_oid_
    }
    /**
     * @brief gets the definer oid of this element.
     * @return int
     */
    pub fn getDefinerOid(self) -> int {
        return self.definer_oid_
    }
    /**
     * @brief gets the is aggregate of this element.
     * @return int
     */
    pub fn getIsAggregate(self) -> int {
        return self.is_aggregate_
    }
    /**
     * @brief gets the is create of this element.
     * @return int
     */
    pub fn getIsCreate(self) -> int {
        return self.is_create_
    }
    /**
     * @brief gets the is deterministic of this element.
     * @return int
     */
    pub fn getIsDeterministic(self) -> int {
        return self.is_deterministic_
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the is or replace of this element.
     * @return int
     */
    pub fn getIsOrReplace(self) -> int {
        return self.is_or_replace_
    }
    /**
     * @brief gets the is parallel enable of this element.
     * @return int
     */
    pub fn getIsParallelEnable(self) -> int {
        return self.is_parallel_enable_
    }
    /**
     * @brief gets the is pipelined of this element.
     * @return int
     */
    pub fn getIsPipelined(self) -> int {
        return self.is_pipelined_
    }
    /**
     * @brief gets the is result cache of this element.
     * @return int
     */
    pub fn getIsResultCache(self) -> int {
        return self.is_result_cache_
    }
    /**
     * @brief gets the is temporary of this element.
     * @return int
     */
    pub fn getIsTemporary(self) -> int {
        return self.is_temporary_
    }
    /**
     * @brief gets the java call spec of this element.
     * @return string
     */
    pub fn getJavaCallSpec(self) -> string {
        return self.java_call_spec_
    }
    /**
     * @brief gets the language of this element.
     * @return string
     */
    pub fn getLanguage(self) -> string {
        return self.language_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the return data type oid of this element.
     * @return int
     */
    pub fn getReturnDataTypeOid(self) -> int {
        return self.return_data_type_oid_
    }
    /**
     * @brief gets the schema of this element.
     * @return string
     */
    pub fn getSchema(self) -> string {
        return self.schema_
    }
    /**
     * @brief gets the using oid of this element.
     * @return int
     */
    pub fn getUsingOid(self) -> int {
        return self.using_oid_
    }
    /**
     * @brief gets the wrapped source of this element.
     * @return string
     */
    pub fn getWrappedSource(self) -> string {
        return self.wrapped_source_
    }
}
/**
 * @brief DO class: A sql create index statement.
 */
schema SqlCreateIndexStatementDO {
    @primary oid_: int,
    comment_oid_: int,
    db_partition_by_oid_: int,
    in_oid_: int,
    index_definition_oid_: int,
    is_concurrently_: int,
    is_defered_rebuild_: int,
    is_global_: int,
    is_if_not_exists_: int,
    is_local_: int,
    is_storing_: int,
    name_oid_: int,
    row_format_oid_: int,
    schema_: string,
    stored_as_oid_: int,
    table_oid_: int,
    table_name_: string,
    table_partition_by_oid_: int,
    table_partitions_oid_: int,
    tablespace_oid_: int,
    type_: string,
    using_: string
}
impl SqlCreateIndexStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCreateIndexStatementDO {
    	for (tmp in db.sql_create_index_statement) {
            yield SqlCreateIndexStatementDO {
                oid_ : tmp.oid_,
                comment_oid_ : tmp.comment_oid_,
                db_partition_by_oid_ : tmp.db_partition_by_oid_,
                in_oid_ : tmp.in_oid_,
                index_definition_oid_ : tmp.index_definition_oid_,
                is_concurrently_ : tmp.is_concurrently_,
                is_defered_rebuild_ : tmp.is_defered_rebuild_,
                is_global_ : tmp.is_global_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                is_local_ : tmp.is_local_,
                is_storing_ : tmp.is_storing_,
                name_oid_ : tmp.name_oid_,
                row_format_oid_ : tmp.row_format_oid_,
                schema_ : tmp.schema_,
                stored_as_oid_ : tmp.stored_as_oid_,
                table_oid_ : tmp.table_oid_,
                table_name_ : tmp.table_name_,
                table_partition_by_oid_ : tmp.table_partition_by_oid_,
                table_partitions_oid_ : tmp.table_partitions_oid_,
                tablespace_oid_ : tmp.tablespace_oid_,
                type_ : tmp.type_,
                using_ : tmp.using_
            }
    	}
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the db partition by oid of this element.
     * @return int
     */
    pub fn getDbPartitionByOid(self) -> int {
        return self.db_partition_by_oid_
    }
    /**
     * @brief gets the in oid of this element.
     * @return int
     */
    pub fn getInOid(self) -> int {
        return self.in_oid_
    }
    /**
     * @brief gets the index definition oid of this element.
     * @return int
     */
    pub fn getIndexDefinitionOid(self) -> int {
        return self.index_definition_oid_
    }
    /**
     * @brief gets the is concurrently of this element.
     * @return int
     */
    pub fn getIsConcurrently(self) -> int {
        return self.is_concurrently_
    }
    /**
     * @brief gets the is defered rebuild of this element.
     * @return int
     */
    pub fn getIsDeferedRebuild(self) -> int {
        return self.is_defered_rebuild_
    }
    /**
     * @brief gets the is global of this element.
     * @return int
     */
    pub fn getIsGlobal(self) -> int {
        return self.is_global_
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the is local of this element.
     * @return int
     */
    pub fn getIsLocal(self) -> int {
        return self.is_local_
    }
    /**
     * @brief gets the is storing of this element.
     * @return int
     */
    pub fn getIsStoring(self) -> int {
        return self.is_storing_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the row format oid of this element.
     * @return int
     */
    pub fn getRowFormatOid(self) -> int {
        return self.row_format_oid_
    }
    /**
     * @brief gets the schema of this element.
     * @return string
     */
    pub fn getSchema(self) -> string {
        return self.schema_
    }
    /**
     * @brief gets the stored as oid of this element.
     * @return int
     */
    pub fn getStoredAsOid(self) -> int {
        return self.stored_as_oid_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
    /**
     * @brief gets the table name of this element.
     * @return string
     */
    pub fn getTableName(self) -> string {
        return self.table_name_
    }
    /**
     * @brief gets the table partition by oid of this element.
     * @return int
     */
    pub fn getTablePartitionByOid(self) -> int {
        return self.table_partition_by_oid_
    }
    /**
     * @brief gets the table partitions oid of this element.
     * @return int
     */
    pub fn getTablePartitionsOid(self) -> int {
        return self.table_partitions_oid_
    }
    /**
     * @brief gets the tablespace oid of this element.
     * @return int
     */
    pub fn getTablespaceOid(self) -> int {
        return self.tablespace_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
    /**
     * @brief gets the using of this element.
     * @return string
     */
    pub fn getUsing(self) -> string {
        return self.using_
    }
}
/**
 * @brief DO class: A sql create materialized view statement.
 */
schema SqlCreateMaterializedViewStatementDO {
    @primary oid_: int,
    cache_: int,
    comment_oid_: int,
    compress_: int,
    compress_level_: int,
    distributed_by_type_oid_: int,
    enable_query_rewrite_: int,
    free_lists_: int,
    initrans_: int,
    is_build_deferred_: int,
    is_build_immediate_: int,
    is_compress_for_oltp_: int,
    is_if_not_exists_: int,
    is_refresh_: int,
    is_refresh_complete_: int,
    is_refresh_fast_: int,
    is_refresh_force_: int,
    is_refresh_next_: int,
    is_refresh_on_commit_: int,
    is_refresh_on_demand_: int,
    is_refresh_on_over_write_: int,
    is_refresh_start_with_: int,
    is_with_row_id_: int,
    lify_cycle_oid_: int,
    logging_: int,
    maxtrans_: int,
    name_oid_: int,
    next_oid_: int,
    parallel_: int,
    parallel_value_: int,
    partition_by_oid_: int,
    pctfree_: int,
    pctincrease_: int,
    pctthreshold_: int,
    pctused_: int,
    query_oid_: int,
    start_with_oid_: int,
    storage_: string,
    tablespace_oid_: int
}
impl SqlCreateMaterializedViewStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCreateMaterializedViewStatementDO {
    	for (tmp in db.sql_create_materialized_view_statement) {
            yield SqlCreateMaterializedViewStatementDO {
                oid_ : tmp.oid_,
                cache_ : tmp.cache_,
                comment_oid_ : tmp.comment_oid_,
                compress_ : tmp.compress_,
                compress_level_ : tmp.compress_level_,
                distributed_by_type_oid_ : tmp.distributed_by_type_oid_,
                enable_query_rewrite_ : tmp.enable_query_rewrite_,
                free_lists_ : tmp.free_lists_,
                initrans_ : tmp.initrans_,
                is_build_deferred_ : tmp.is_build_deferred_,
                is_build_immediate_ : tmp.is_build_immediate_,
                is_compress_for_oltp_ : tmp.is_compress_for_oltp_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                is_refresh_ : tmp.is_refresh_,
                is_refresh_complete_ : tmp.is_refresh_complete_,
                is_refresh_fast_ : tmp.is_refresh_fast_,
                is_refresh_force_ : tmp.is_refresh_force_,
                is_refresh_next_ : tmp.is_refresh_next_,
                is_refresh_on_commit_ : tmp.is_refresh_on_commit_,
                is_refresh_on_demand_ : tmp.is_refresh_on_demand_,
                is_refresh_on_over_write_ : tmp.is_refresh_on_over_write_,
                is_refresh_start_with_ : tmp.is_refresh_start_with_,
                is_with_row_id_ : tmp.is_with_row_id_,
                lify_cycle_oid_ : tmp.lify_cycle_oid_,
                logging_ : tmp.logging_,
                maxtrans_ : tmp.maxtrans_,
                name_oid_ : tmp.name_oid_,
                next_oid_ : tmp.next_oid_,
                parallel_ : tmp.parallel_,
                parallel_value_ : tmp.parallel_value_,
                partition_by_oid_ : tmp.partition_by_oid_,
                pctfree_ : tmp.pctfree_,
                pctincrease_ : tmp.pctincrease_,
                pctthreshold_ : tmp.pctthreshold_,
                pctused_ : tmp.pctused_,
                query_oid_ : tmp.query_oid_,
                start_with_oid_ : tmp.start_with_oid_,
                storage_ : tmp.storage_,
                tablespace_oid_ : tmp.tablespace_oid_
            }
    	}
    }
    /**
     * @brief gets the cache of this element.
     * @return int
     */
    pub fn getCache(self) -> int {
        return self.cache_
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the compress of this element.
     * @return int
     */
    pub fn getCompress(self) -> int {
        return self.compress_
    }
    /**
     * @brief gets the compress level of this element.
     * @return int
     */
    pub fn getCompressLevel(self) -> int {
        return self.compress_level_
    }
    /**
     * @brief gets the distributed by type oid of this element.
     * @return int
     */
    pub fn getDistributedByTypeOid(self) -> int {
        return self.distributed_by_type_oid_
    }
    /**
     * @brief gets the enable query rewrite of this element.
     * @return int
     */
    pub fn getEnableQueryRewrite(self) -> int {
        return self.enable_query_rewrite_
    }
    /**
     * @brief gets the free lists of this element.
     * @return int
     */
    pub fn getFreeLists(self) -> int {
        return self.free_lists_
    }
    /**
     * @brief gets the initrans of this element.
     * @return int
     */
    pub fn getInitrans(self) -> int {
        return self.initrans_
    }
    /**
     * @brief gets the is build deferred of this element.
     * @return int
     */
    pub fn getIsBuildDeferred(self) -> int {
        return self.is_build_deferred_
    }
    /**
     * @brief gets the is build immediate of this element.
     * @return int
     */
    pub fn getIsBuildImmediate(self) -> int {
        return self.is_build_immediate_
    }
    /**
     * @brief gets the is compress for oltp of this element.
     * @return int
     */
    pub fn getIsCompressForOltp(self) -> int {
        return self.is_compress_for_oltp_
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the is refresh of this element.
     * @return int
     */
    pub fn getIsRefresh(self) -> int {
        return self.is_refresh_
    }
    /**
     * @brief gets the is refresh complete of this element.
     * @return int
     */
    pub fn getIsRefreshComplete(self) -> int {
        return self.is_refresh_complete_
    }
    /**
     * @brief gets the is refresh fast of this element.
     * @return int
     */
    pub fn getIsRefreshFast(self) -> int {
        return self.is_refresh_fast_
    }
    /**
     * @brief gets the is refresh force of this element.
     * @return int
     */
    pub fn getIsRefreshForce(self) -> int {
        return self.is_refresh_force_
    }
    /**
     * @brief gets the is refresh next of this element.
     * @return int
     */
    pub fn getIsRefreshNext(self) -> int {
        return self.is_refresh_next_
    }
    /**
     * @brief gets the is refresh on commit of this element.
     * @return int
     */
    pub fn getIsRefreshOnCommit(self) -> int {
        return self.is_refresh_on_commit_
    }
    /**
     * @brief gets the is refresh on demand of this element.
     * @return int
     */
    pub fn getIsRefreshOnDemand(self) -> int {
        return self.is_refresh_on_demand_
    }
    /**
     * @brief gets the is refresh on over write of this element.
     * @return int
     */
    pub fn getIsRefreshOnOverWrite(self) -> int {
        return self.is_refresh_on_over_write_
    }
    /**
     * @brief gets the is refresh start with of this element.
     * @return int
     */
    pub fn getIsRefreshStartWith(self) -> int {
        return self.is_refresh_start_with_
    }
    /**
     * @brief gets the is with row id of this element.
     * @return int
     */
    pub fn getIsWithRowId(self) -> int {
        return self.is_with_row_id_
    }
    /**
     * @brief gets the lify cycle oid of this element.
     * @return int
     */
    pub fn getLifyCycleOid(self) -> int {
        return self.lify_cycle_oid_
    }
    /**
     * @brief gets the logging of this element.
     * @return int
     */
    pub fn getLogging(self) -> int {
        return self.logging_
    }
    /**
     * @brief gets the maxtrans of this element.
     * @return int
     */
    pub fn getMaxtrans(self) -> int {
        return self.maxtrans_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the next oid of this element.
     * @return int
     */
    pub fn getNextOid(self) -> int {
        return self.next_oid_
    }
    /**
     * @brief gets the parallel of this element.
     * @return int
     */
    pub fn getParallel(self) -> int {
        return self.parallel_
    }
    /**
     * @brief gets the parallel value of this element.
     * @return int
     */
    pub fn getParallelValue(self) -> int {
        return self.parallel_value_
    }
    /**
     * @brief gets the partition by oid of this element.
     * @return int
     */
    pub fn getPartitionByOid(self) -> int {
        return self.partition_by_oid_
    }
    /**
     * @brief gets the pctfree of this element.
     * @return int
     */
    pub fn getPctfree(self) -> int {
        return self.pctfree_
    }
    /**
     * @brief gets the pctincrease of this element.
     * @return int
     */
    pub fn getPctincrease(self) -> int {
        return self.pctincrease_
    }
    /**
     * @brief gets the pctthreshold of this element.
     * @return int
     */
    pub fn getPctthreshold(self) -> int {
        return self.pctthreshold_
    }
    /**
     * @brief gets the pctused of this element.
     * @return int
     */
    pub fn getPctused(self) -> int {
        return self.pctused_
    }
    /**
     * @brief gets the query oid of this element.
     * @return int
     */
    pub fn getQueryOid(self) -> int {
        return self.query_oid_
    }
    /**
     * @brief gets the start with oid of this element.
     * @return int
     */
    pub fn getStartWithOid(self) -> int {
        return self.start_with_oid_
    }
    /**
     * @brief gets the storage of this element.
     * @return string
     */
    pub fn getStorage(self) -> string {
        return self.storage_
    }
    /**
     * @brief gets the tablespace oid of this element.
     * @return int
     */
    pub fn getTablespaceOid(self) -> int {
        return self.tablespace_oid_
    }
}
/**
 * @brief DO class: A sql create outline statement.
 */
schema SqlCreateOutlineStatementDO {
    @primary oid_: int,
    name_oid_: int,
    on_oid_: int,
    to_oid_: int,
    where_oid_: int
}
impl SqlCreateOutlineStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCreateOutlineStatementDO {
    	for (tmp in db.sql_create_outline_statement) {
            yield SqlCreateOutlineStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_,
                on_oid_ : tmp.on_oid_,
                to_oid_ : tmp.to_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the on oid of this element.
     * @return int
     */
    pub fn getOnOid(self) -> int {
        return self.on_oid_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A sql create procedure statement.
 */
schema SqlCreateProcedureStatementDO {
    @primary oid_: int,
    authid_oid_: int,
    block_oid_: int,
    comment_oid_: int,
    definer_oid_: int,
    is_contains_sql_: int,
    is_create_: int,
    is_deterministic_: int,
    is_language_sql_: int,
    is_modifies_sql_data_: int,
    is_no_sql_: int,
    is_or_replace_: int,
    is_read_sql_data_: int,
    java_call_spec_: string,
    name_oid_: int,
    wrapped_source_: string
}
impl SqlCreateProcedureStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCreateProcedureStatementDO {
    	for (tmp in db.sql_create_procedure_statement) {
            yield SqlCreateProcedureStatementDO {
                oid_ : tmp.oid_,
                authid_oid_ : tmp.authid_oid_,
                block_oid_ : tmp.block_oid_,
                comment_oid_ : tmp.comment_oid_,
                definer_oid_ : tmp.definer_oid_,
                is_contains_sql_ : tmp.is_contains_sql_,
                is_create_ : tmp.is_create_,
                is_deterministic_ : tmp.is_deterministic_,
                is_language_sql_ : tmp.is_language_sql_,
                is_modifies_sql_data_ : tmp.is_modifies_sql_data_,
                is_no_sql_ : tmp.is_no_sql_,
                is_or_replace_ : tmp.is_or_replace_,
                is_read_sql_data_ : tmp.is_read_sql_data_,
                java_call_spec_ : tmp.java_call_spec_,
                name_oid_ : tmp.name_oid_,
                wrapped_source_ : tmp.wrapped_source_
            }
    	}
    }
    /**
     * @brief gets the authid oid of this element.
     * @return int
     */
    pub fn getAuthidOid(self) -> int {
        return self.authid_oid_
    }
    /**
     * @brief gets the block oid of this element.
     * @return int
     */
    pub fn getBlockOid(self) -> int {
        return self.block_oid_
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the definer oid of this element.
     * @return int
     */
    pub fn getDefinerOid(self) -> int {
        return self.definer_oid_
    }
    /**
     * @brief gets the is contains sql of this element.
     * @return int
     */
    pub fn getIsContainsSql(self) -> int {
        return self.is_contains_sql_
    }
    /**
     * @brief gets the is create of this element.
     * @return int
     */
    pub fn getIsCreate(self) -> int {
        return self.is_create_
    }
    /**
     * @brief gets the is deterministic of this element.
     * @return int
     */
    pub fn getIsDeterministic(self) -> int {
        return self.is_deterministic_
    }
    /**
     * @brief gets the is language sql of this element.
     * @return int
     */
    pub fn getIsLanguageSql(self) -> int {
        return self.is_language_sql_
    }
    /**
     * @brief gets the is modifies sql data of this element.
     * @return int
     */
    pub fn getIsModifiesSqlData(self) -> int {
        return self.is_modifies_sql_data_
    }
    /**
     * @brief gets the is no sql of this element.
     * @return int
     */
    pub fn getIsNoSql(self) -> int {
        return self.is_no_sql_
    }
    /**
     * @brief gets the is or replace of this element.
     * @return int
     */
    pub fn getIsOrReplace(self) -> int {
        return self.is_or_replace_
    }
    /**
     * @brief gets the is read sql data of this element.
     * @return int
     */
    pub fn getIsReadSqlData(self) -> int {
        return self.is_read_sql_data_
    }
    /**
     * @brief gets the java call spec of this element.
     * @return string
     */
    pub fn getJavaCallSpec(self) -> string {
        return self.java_call_spec_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the wrapped source of this element.
     * @return string
     */
    pub fn getWrappedSource(self) -> string {
        return self.wrapped_source_
    }
}
/**
 * @brief DO class: A sql create resource group statement.
 */
schema SqlCreateResourceGroupStatementDO {
    @primary oid_: int,
    enable_: int,
    name_oid_: int,
    properties_: string
}
impl SqlCreateResourceGroupStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCreateResourceGroupStatementDO {
    	for (tmp in db.sql_create_resource_group_statement) {
            yield SqlCreateResourceGroupStatementDO {
                oid_ : tmp.oid_,
                enable_ : tmp.enable_,
                name_oid_ : tmp.name_oid_,
                properties_ : tmp.properties_
            }
    	}
    }
    /**
     * @brief gets the enable of this element.
     * @return int
     */
    pub fn getEnable(self) -> int {
        return self.enable_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the properties of this element.
     * @return string
     */
    pub fn getProperties(self) -> string {
        return self.properties_
    }
}
/**
 * @brief DO class: A sql create role statement.
 */
schema SqlCreateRoleStatementDO {
    @primary oid_: int,
    is_if_not_exists_: int,
    name_oid_: int
}
impl SqlCreateRoleStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCreateRoleStatementDO {
    	for (tmp in db.sql_create_role_statement) {
            yield SqlCreateRoleStatementDO {
                oid_ : tmp.oid_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql create sequence statement.
 */
schema SqlCreateSequenceStatementDO {
    @primary oid_: int,
    cache_: int,
    cache_value_oid_: int,
    cycle_: int,
    increment_by_oid_: int,
    is_group_: int,
    is_no_max_value_: int,
    is_no_min_value_: int,
    is_simple_: int,
    is_time_: int,
    max_value_oid_: int,
    min_value_oid_: int,
    name_oid_: int,
    order_: int,
    schema_: string,
    start_with_oid_: int,
    step_oid_: int,
    unit_count_oid_: int,
    unit_index_oid_: int,
    with_cache_: int
}
impl SqlCreateSequenceStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCreateSequenceStatementDO {
    	for (tmp in db.sql_create_sequence_statement) {
            yield SqlCreateSequenceStatementDO {
                oid_ : tmp.oid_,
                cache_ : tmp.cache_,
                cache_value_oid_ : tmp.cache_value_oid_,
                cycle_ : tmp.cycle_,
                increment_by_oid_ : tmp.increment_by_oid_,
                is_group_ : tmp.is_group_,
                is_no_max_value_ : tmp.is_no_max_value_,
                is_no_min_value_ : tmp.is_no_min_value_,
                is_simple_ : tmp.is_simple_,
                is_time_ : tmp.is_time_,
                max_value_oid_ : tmp.max_value_oid_,
                min_value_oid_ : tmp.min_value_oid_,
                name_oid_ : tmp.name_oid_,
                order_ : tmp.order_,
                schema_ : tmp.schema_,
                start_with_oid_ : tmp.start_with_oid_,
                step_oid_ : tmp.step_oid_,
                unit_count_oid_ : tmp.unit_count_oid_,
                unit_index_oid_ : tmp.unit_index_oid_,
                with_cache_ : tmp.with_cache_
            }
    	}
    }
    /**
     * @brief gets the cache of this element.
     * @return int
     */
    pub fn getCache(self) -> int {
        return self.cache_
    }
    /**
     * @brief gets the cache value oid of this element.
     * @return int
     */
    pub fn getCacheValueOid(self) -> int {
        return self.cache_value_oid_
    }
    /**
     * @brief gets the cycle of this element.
     * @return int
     */
    pub fn getCycle(self) -> int {
        return self.cycle_
    }
    /**
     * @brief gets the increment by oid of this element.
     * @return int
     */
    pub fn getIncrementByOid(self) -> int {
        return self.increment_by_oid_
    }
    /**
     * @brief gets the is group of this element.
     * @return int
     */
    pub fn getIsGroup(self) -> int {
        return self.is_group_
    }
    /**
     * @brief gets the is no max value of this element.
     * @return int
     */
    pub fn getIsNoMaxValue(self) -> int {
        return self.is_no_max_value_
    }
    /**
     * @brief gets the is no min value of this element.
     * @return int
     */
    pub fn getIsNoMinValue(self) -> int {
        return self.is_no_min_value_
    }
    /**
     * @brief gets the is simple of this element.
     * @return int
     */
    pub fn getIsSimple(self) -> int {
        return self.is_simple_
    }
    /**
     * @brief gets the is time of this element.
     * @return int
     */
    pub fn getIsTime(self) -> int {
        return self.is_time_
    }
    /**
     * @brief gets the max value oid of this element.
     * @return int
     */
    pub fn getMaxValueOid(self) -> int {
        return self.max_value_oid_
    }
    /**
     * @brief gets the min value oid of this element.
     * @return int
     */
    pub fn getMinValueOid(self) -> int {
        return self.min_value_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the order of this element.
     * @return int
     */
    pub fn getOrder(self) -> int {
        return self.order_
    }
    /**
     * @brief gets the schema of this element.
     * @return string
     */
    pub fn getSchema(self) -> string {
        return self.schema_
    }
    /**
     * @brief gets the start with oid of this element.
     * @return int
     */
    pub fn getStartWithOid(self) -> int {
        return self.start_with_oid_
    }
    /**
     * @brief gets the step oid of this element.
     * @return int
     */
    pub fn getStepOid(self) -> int {
        return self.step_oid_
    }
    /**
     * @brief gets the unit count oid of this element.
     * @return int
     */
    pub fn getUnitCountOid(self) -> int {
        return self.unit_count_oid_
    }
    /**
     * @brief gets the unit index oid of this element.
     * @return int
     */
    pub fn getUnitIndexOid(self) -> int {
        return self.unit_index_oid_
    }
    /**
     * @brief gets the with cache of this element.
     * @return int
     */
    pub fn getWithCache(self) -> int {
        return self.with_cache_
    }
}
/**
 * @brief DO class: A sql create table group statement.
 */
schema SqlCreateTableGroupStatementDO {
    @primary oid_: int,
    is_if_not_exists_: int,
    name_oid_: int,
    partition_num_oid_: int,
    schema_name_: string,
    table_group_name_: string
}
impl SqlCreateTableGroupStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCreateTableGroupStatementDO {
    	for (tmp in db.sql_create_table_group_statement) {
            yield SqlCreateTableGroupStatementDO {
                oid_ : tmp.oid_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                name_oid_ : tmp.name_oid_,
                partition_num_oid_ : tmp.partition_num_oid_,
                schema_name_ : tmp.schema_name_,
                table_group_name_ : tmp.table_group_name_
            }
    	}
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the partition num oid of this element.
     * @return int
     */
    pub fn getPartitionNumOid(self) -> int {
        return self.partition_num_oid_
    }
    /**
     * @brief gets the schema name of this element.
     * @return string
     */
    pub fn getSchemaName(self) -> string {
        return self.schema_name_
    }
    /**
     * @brief gets the table group name of this element.
     * @return string
     */
    pub fn getTableGroupName(self) -> string {
        return self.table_group_name_
    }
}
/**
 * @brief DO class: A sql create table statement.
 */
schema SqlCreateTableStatementDO {
    @primary oid_: int,
    body_before_comments_direct_: string,
    buckets_: int,
    catalog_: string,
    clustering_type_: string,
    column_comments_: string,
    comment_oid_: int,
    compress_: int,
    engine_oid_: int,
    inherits_oid_: int,
    is_dimension_: int,
    is_external_: int,
    is_if_not_exists_: int,
    is_ignore_: int,
    is_on_commit_preserve_rows_: int,
    is_replace_: int,
    is_single_: int,
    like_oid_: int,
    local_partitioning_oid_: int,
    location_oid_: int,
    logging_: int,
    name_oid_: int,
    partitioning_oid_: int,
    primary_key_names_: string,
    row_format_oid_: int,
    schema_: string,
    select_oid_: int,
    shards_: int,
    stored_as_oid_: int,
    table_name_: string,
    table_source_oid_: int,
    tablespace_oid_: int,
    type_: string
}
impl SqlCreateTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCreateTableStatementDO {
    	for (tmp in db.sql_create_table_statement) {
            yield SqlCreateTableStatementDO {
                oid_ : tmp.oid_,
                body_before_comments_direct_ : tmp.body_before_comments_direct_,
                buckets_ : tmp.buckets_,
                catalog_ : tmp.catalog_,
                clustering_type_ : tmp.clustering_type_,
                column_comments_ : tmp.column_comments_,
                comment_oid_ : tmp.comment_oid_,
                compress_ : tmp.compress_,
                engine_oid_ : tmp.engine_oid_,
                inherits_oid_ : tmp.inherits_oid_,
                is_dimension_ : tmp.is_dimension_,
                is_external_ : tmp.is_external_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                is_ignore_ : tmp.is_ignore_,
                is_on_commit_preserve_rows_ : tmp.is_on_commit_preserve_rows_,
                is_replace_ : tmp.is_replace_,
                is_single_ : tmp.is_single_,
                like_oid_ : tmp.like_oid_,
                local_partitioning_oid_ : tmp.local_partitioning_oid_,
                location_oid_ : tmp.location_oid_,
                logging_ : tmp.logging_,
                name_oid_ : tmp.name_oid_,
                partitioning_oid_ : tmp.partitioning_oid_,
                primary_key_names_ : tmp.primary_key_names_,
                row_format_oid_ : tmp.row_format_oid_,
                schema_ : tmp.schema_,
                select_oid_ : tmp.select_oid_,
                shards_ : tmp.shards_,
                stored_as_oid_ : tmp.stored_as_oid_,
                table_name_ : tmp.table_name_,
                table_source_oid_ : tmp.table_source_oid_,
                tablespace_oid_ : tmp.tablespace_oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the body before comments direct of this element.
     * @return string
     */
    pub fn getBodyBeforeCommentsDirect(self) -> string {
        return self.body_before_comments_direct_
    }
    /**
     * @brief gets the buckets of this element.
     * @return int
     */
    pub fn getBuckets(self) -> int {
        return self.buckets_
    }
    /**
     * @brief gets the catalog of this element.
     * @return string
     */
    pub fn getCatalog(self) -> string {
        return self.catalog_
    }
    /**
     * @brief gets the clustering type of this element.
     * @return string
     */
    pub fn getClusteringType(self) -> string {
        return self.clustering_type_
    }
    /**
     * @brief gets the column comments of this element.
     * @return string
     */
    pub fn getColumnComments(self) -> string {
        return self.column_comments_
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the compress of this element.
     * @return int
     */
    pub fn getCompress(self) -> int {
        return self.compress_
    }
    /**
     * @brief gets the engine oid of this element.
     * @return int
     */
    pub fn getEngineOid(self) -> int {
        return self.engine_oid_
    }
    /**
     * @brief gets the inherits oid of this element.
     * @return int
     */
    pub fn getInheritsOid(self) -> int {
        return self.inherits_oid_
    }
    /**
     * @brief gets the is dimension of this element.
     * @return int
     */
    pub fn getIsDimension(self) -> int {
        return self.is_dimension_
    }
    /**
     * @brief gets the is external of this element.
     * @return int
     */
    pub fn getIsExternal(self) -> int {
        return self.is_external_
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the is ignore of this element.
     * @return int
     */
    pub fn getIsIgnore(self) -> int {
        return self.is_ignore_
    }
    /**
     * @brief gets the is on commit preserve rows of this element.
     * @return int
     */
    pub fn getIsOnCommitPreserveRows(self) -> int {
        return self.is_on_commit_preserve_rows_
    }
    /**
     * @brief gets the is replace of this element.
     * @return int
     */
    pub fn getIsReplace(self) -> int {
        return self.is_replace_
    }
    /**
     * @brief gets the is single of this element.
     * @return int
     */
    pub fn getIsSingle(self) -> int {
        return self.is_single_
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the local partitioning oid of this element.
     * @return int
     */
    pub fn getLocalPartitioningOid(self) -> int {
        return self.local_partitioning_oid_
    }
    /**
     * @brief gets the location oid of this element.
     * @return int
     */
    pub fn getLocationOid(self) -> int {
        return self.location_oid_
    }
    /**
     * @brief gets the logging of this element.
     * @return int
     */
    pub fn getLogging(self) -> int {
        return self.logging_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the partitioning oid of this element.
     * @return int
     */
    pub fn getPartitioningOid(self) -> int {
        return self.partitioning_oid_
    }
    /**
     * @brief gets the primary key names of this element.
     * @return string
     */
    pub fn getPrimaryKeyNames(self) -> string {
        return self.primary_key_names_
    }
    /**
     * @brief gets the row format oid of this element.
     * @return int
     */
    pub fn getRowFormatOid(self) -> int {
        return self.row_format_oid_
    }
    /**
     * @brief gets the schema of this element.
     * @return string
     */
    pub fn getSchema(self) -> string {
        return self.schema_
    }
    /**
     * @brief gets the select oid of this element.
     * @return int
     */
    pub fn getSelectOid(self) -> int {
        return self.select_oid_
    }
    /**
     * @brief gets the shards of this element.
     * @return int
     */
    pub fn getShards(self) -> int {
        return self.shards_
    }
    /**
     * @brief gets the stored as oid of this element.
     * @return int
     */
    pub fn getStoredAsOid(self) -> int {
        return self.stored_as_oid_
    }
    /**
     * @brief gets the table name of this element.
     * @return string
     */
    pub fn getTableName(self) -> string {
        return self.table_name_
    }
    /**
     * @brief gets the table source oid of this element.
     * @return int
     */
    pub fn getTableSourceOid(self) -> int {
        return self.table_source_oid_
    }
    /**
     * @brief gets the tablespace oid of this element.
     * @return int
     */
    pub fn getTablespaceOid(self) -> int {
        return self.tablespace_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A sql create trigger statement.
 */
schema SqlCreateTriggerStatementDO {
    @primary oid_: int,
    body_oid_: int,
    definer_oid_: int,
    is_delete_: int,
    is_for_each_row_: int,
    is_insert_: int,
    is_or_replace_: int,
    is_update_: int,
    name_oid_: int,
    on_oid_: int,
    trigger_events_: string,
    trigger_type_: string,
    when_oid_: int
}
impl SqlCreateTriggerStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCreateTriggerStatementDO {
    	for (tmp in db.sql_create_trigger_statement) {
            yield SqlCreateTriggerStatementDO {
                oid_ : tmp.oid_,
                body_oid_ : tmp.body_oid_,
                definer_oid_ : tmp.definer_oid_,
                is_delete_ : tmp.is_delete_,
                is_for_each_row_ : tmp.is_for_each_row_,
                is_insert_ : tmp.is_insert_,
                is_or_replace_ : tmp.is_or_replace_,
                is_update_ : tmp.is_update_,
                name_oid_ : tmp.name_oid_,
                on_oid_ : tmp.on_oid_,
                trigger_events_ : tmp.trigger_events_,
                trigger_type_ : tmp.trigger_type_,
                when_oid_ : tmp.when_oid_
            }
    	}
    }
    /**
     * @brief gets the body oid of this element.
     * @return int
     */
    pub fn getBodyOid(self) -> int {
        return self.body_oid_
    }
    /**
     * @brief gets the definer oid of this element.
     * @return int
     */
    pub fn getDefinerOid(self) -> int {
        return self.definer_oid_
    }
    /**
     * @brief gets the is delete of this element.
     * @return int
     */
    pub fn getIsDelete(self) -> int {
        return self.is_delete_
    }
    /**
     * @brief gets the is for each row of this element.
     * @return int
     */
    pub fn getIsForEachRow(self) -> int {
        return self.is_for_each_row_
    }
    /**
     * @brief gets the is insert of this element.
     * @return int
     */
    pub fn getIsInsert(self) -> int {
        return self.is_insert_
    }
    /**
     * @brief gets the is or replace of this element.
     * @return int
     */
    pub fn getIsOrReplace(self) -> int {
        return self.is_or_replace_
    }
    /**
     * @brief gets the is update of this element.
     * @return int
     */
    pub fn getIsUpdate(self) -> int {
        return self.is_update_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the on oid of this element.
     * @return int
     */
    pub fn getOnOid(self) -> int {
        return self.on_oid_
    }
    /**
     * @brief gets the trigger events of this element.
     * @return string
     */
    pub fn getTriggerEvents(self) -> string {
        return self.trigger_events_
    }
    /**
     * @brief gets the trigger type of this element.
     * @return string
     */
    pub fn getTriggerType(self) -> string {
        return self.trigger_type_
    }
    /**
     * @brief gets the when oid of this element.
     * @return int
     */
    pub fn getWhenOid(self) -> int {
        return self.when_oid_
    }
}
/**
 * @brief DO class: A sql create user statement.
 */
schema SqlCreateUserStatementDO {
    @primary oid_: int,
    password_oid_: int,
    user_oid_: int
}
impl SqlCreateUserStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCreateUserStatementDO {
    	for (tmp in db.sql_create_user_statement) {
            yield SqlCreateUserStatementDO {
                oid_ : tmp.oid_,
                password_oid_ : tmp.password_oid_,
                user_oid_ : tmp.user_oid_
            }
    	}
    }
    /**
     * @brief gets the password oid of this element.
     * @return int
     */
    pub fn getPasswordOid(self) -> int {
        return self.password_oid_
    }
    /**
     * @brief gets the user oid of this element.
     * @return int
     */
    pub fn getUserOid(self) -> int {
        return self.user_oid_
    }
}
/**
 * @brief DO class: A sql create view statement.
 */
schema SqlCreateViewStatementDO {
    @primary oid_: int,
    algorithm_: string,
    comment_oid_: int,
    definer_oid_: int,
    is_force_: int,
    is_if_not_exists_: int,
    is_on_cluster_: int,
    is_or_replace_: int,
    is_with_cascaded_: int,
    is_with_check_option_: int,
    is_with_local_: int,
    is_with_read_only_: int,
    name_oid_: int,
    returns_data_type_oid_: int,
    returns_oid_: int,
    schema_: string,
    script_oid_: int,
    sql_security_: string,
    sub_query_oid_: int,
    table_source_oid_: int,
    to_oid_: int
}
impl SqlCreateViewStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCreateViewStatementDO {
    	for (tmp in db.sql_create_view_statement) {
            yield SqlCreateViewStatementDO {
                oid_ : tmp.oid_,
                algorithm_ : tmp.algorithm_,
                comment_oid_ : tmp.comment_oid_,
                definer_oid_ : tmp.definer_oid_,
                is_force_ : tmp.is_force_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                is_on_cluster_ : tmp.is_on_cluster_,
                is_or_replace_ : tmp.is_or_replace_,
                is_with_cascaded_ : tmp.is_with_cascaded_,
                is_with_check_option_ : tmp.is_with_check_option_,
                is_with_local_ : tmp.is_with_local_,
                is_with_read_only_ : tmp.is_with_read_only_,
                name_oid_ : tmp.name_oid_,
                returns_data_type_oid_ : tmp.returns_data_type_oid_,
                returns_oid_ : tmp.returns_oid_,
                schema_ : tmp.schema_,
                script_oid_ : tmp.script_oid_,
                sql_security_ : tmp.sql_security_,
                sub_query_oid_ : tmp.sub_query_oid_,
                table_source_oid_ : tmp.table_source_oid_,
                to_oid_ : tmp.to_oid_
            }
    	}
    }
    /**
     * @brief gets the algorithm of this element.
     * @return string
     */
    pub fn getAlgorithm(self) -> string {
        return self.algorithm_
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the definer oid of this element.
     * @return int
     */
    pub fn getDefinerOid(self) -> int {
        return self.definer_oid_
    }
    /**
     * @brief gets the is force of this element.
     * @return int
     */
    pub fn getIsForce(self) -> int {
        return self.is_force_
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the is on cluster of this element.
     * @return int
     */
    pub fn getIsOnCluster(self) -> int {
        return self.is_on_cluster_
    }
    /**
     * @brief gets the is or replace of this element.
     * @return int
     */
    pub fn getIsOrReplace(self) -> int {
        return self.is_or_replace_
    }
    /**
     * @brief gets the is with cascaded of this element.
     * @return int
     */
    pub fn getIsWithCascaded(self) -> int {
        return self.is_with_cascaded_
    }
    /**
     * @brief gets the is with check option of this element.
     * @return int
     */
    pub fn getIsWithCheckOption(self) -> int {
        return self.is_with_check_option_
    }
    /**
     * @brief gets the is with local of this element.
     * @return int
     */
    pub fn getIsWithLocal(self) -> int {
        return self.is_with_local_
    }
    /**
     * @brief gets the is with read only of this element.
     * @return int
     */
    pub fn getIsWithReadOnly(self) -> int {
        return self.is_with_read_only_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the returns data type oid of this element.
     * @return int
     */
    pub fn getReturnsDataTypeOid(self) -> int {
        return self.returns_data_type_oid_
    }
    /**
     * @brief gets the returns oid of this element.
     * @return int
     */
    pub fn getReturnsOid(self) -> int {
        return self.returns_oid_
    }
    /**
     * @brief gets the schema of this element.
     * @return string
     */
    pub fn getSchema(self) -> string {
        return self.schema_
    }
    /**
     * @brief gets the script oid of this element.
     * @return int
     */
    pub fn getScriptOid(self) -> int {
        return self.script_oid_
    }
    /**
     * @brief gets the sql security of this element.
     * @return string
     */
    pub fn getSqlSecurity(self) -> string {
        return self.sql_security_
    }
    /**
     * @brief gets the sub query oid of this element.
     * @return int
     */
    pub fn getSubQueryOid(self) -> int {
        return self.sub_query_oid_
    }
    /**
     * @brief gets the table source oid of this element.
     * @return int
     */
    pub fn getTableSourceOid(self) -> int {
        return self.table_source_oid_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
}
/**
 * @brief DO class: A sql current of cursor expr.
 */
schema SqlCurrentOfCursorExprDO {
    @primary oid_: int,
    cursor_name_oid_: int
}
impl SqlCurrentOfCursorExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCurrentOfCursorExprDO {
    	for (tmp in db.sql_current_of_cursor_expr) {
            yield SqlCurrentOfCursorExprDO {
                oid_ : tmp.oid_,
                cursor_name_oid_ : tmp.cursor_name_oid_
            }
    	}
    }
    /**
     * @brief gets the cursor name oid of this element.
     * @return int
     */
    pub fn getCursorNameOid(self) -> int {
        return self.cursor_name_oid_
    }
}
/**
 * @brief DO class: A sql current time expr.
 */
schema SqlCurrentTimeExprDO {
    @primary oid_: int,
    type_: string
}
impl SqlCurrentTimeExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCurrentTimeExprDO {
    	for (tmp in db.sql_current_time_expr) {
            yield SqlCurrentTimeExprDO {
                oid_ : tmp.oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A sql current user expr.
 */
schema SqlCurrentUserExprDO {
    @primary oid_: int
}
impl SqlCurrentUserExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlCurrentUserExprDO {
    	for (tmp in db.sql_current_user_expr) {
            yield SqlCurrentUserExprDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql data type impl.
 */
schema SqlDataTypeImplDO {
    @primary oid_: int,
    index_by_oid_: int,
    is_int_: int,
    is_numberic_: int,
    is_string_: int,
    is_unsigned_: int,
    is_with_local_time_zone_: int,
    is_zerofill_: int,
    name_: string,
    with_time_zone_: int
}
impl SqlDataTypeImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDataTypeImplDO {
    	for (tmp in db.sql_data_type_impl) {
            yield SqlDataTypeImplDO {
                oid_ : tmp.oid_,
                index_by_oid_ : tmp.index_by_oid_,
                is_int_ : tmp.is_int_,
                is_numberic_ : tmp.is_numberic_,
                is_string_ : tmp.is_string_,
                is_unsigned_ : tmp.is_unsigned_,
                is_with_local_time_zone_ : tmp.is_with_local_time_zone_,
                is_zerofill_ : tmp.is_zerofill_,
                name_ : tmp.name_,
                with_time_zone_ : tmp.with_time_zone_
            }
    	}
    }
    /**
     * @brief gets the index by oid of this element.
     * @return int
     */
    pub fn getIndexByOid(self) -> int {
        return self.index_by_oid_
    }
    /**
     * @brief gets the is int of this element.
     * @return int
     */
    pub fn getIsInt(self) -> int {
        return self.is_int_
    }
    /**
     * @brief gets the is numberic of this element.
     * @return int
     */
    pub fn getIsNumberic(self) -> int {
        return self.is_numberic_
    }
    /**
     * @brief gets the is string of this element.
     * @return int
     */
    pub fn getIsString(self) -> int {
        return self.is_string_
    }
    /**
     * @brief gets the is unsigned of this element.
     * @return int
     */
    pub fn getIsUnsigned(self) -> int {
        return self.is_unsigned_
    }
    /**
     * @brief gets the is with local time zone of this element.
     * @return int
     */
    pub fn getIsWithLocalTimeZone(self) -> int {
        return self.is_with_local_time_zone_
    }
    /**
     * @brief gets the is zerofill of this element.
     * @return int
     */
    pub fn getIsZerofill(self) -> int {
        return self.is_zerofill_
    }
    /**
     * @brief gets the name of this element.
     * @return string
     */
    pub fn getName(self) -> string {
        return self.name_
    }
    /**
     * @brief gets the with time zone of this element.
     * @return int
     */
    pub fn getWithTimeZone(self) -> int {
        return self.with_time_zone_
    }
}
/**
 * @brief DO class: A sql data type ref expr.
 */
schema SqlDataTypeRefExprDO {
    @primary oid_: int,
    data_type_oid_: int
}
impl SqlDataTypeRefExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDataTypeRefExprDO {
    	for (tmp in db.sql_data_type_ref_expr) {
            yield SqlDataTypeRefExprDO {
                oid_ : tmp.oid_,
                data_type_oid_ : tmp.data_type_oid_
            }
    	}
    }
    /**
     * @brief gets the data type oid of this element.
     * @return int
     */
    pub fn getDataTypeOid(self) -> int {
        return self.data_type_oid_
    }
}
/**
 * @brief DO class: A sql date expr.
 */
schema SqlDateExprDO {
    @primary oid_: int,
    date_: string,
    literal_: string,
    value_: string
}
impl SqlDateExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDateExprDO {
    	for (tmp in db.sql_date_expr) {
            yield SqlDateExprDO {
                oid_ : tmp.oid_,
                date_ : tmp.date_,
                literal_ : tmp.literal_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the date of this element.
     * @return string
     */
    pub fn getDate(self) -> string {
        return self.date_
    }
    /**
     * @brief gets the literal of this element.
     * @return string
     */
    pub fn getLiteral(self) -> string {
        return self.literal_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql date time expr.
 */
schema SqlDateTimeExprDO {
    @primary oid_: int,
    literal_oid_: int,
    value_: string
}
impl SqlDateTimeExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDateTimeExprDO {
    	for (tmp in db.sql_date_time_expr) {
            yield SqlDateTimeExprDO {
                oid_ : tmp.oid_,
                literal_oid_ : tmp.literal_oid_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the literal oid of this element.
     * @return int
     */
    pub fn getLiteralOid(self) -> int {
        return self.literal_oid_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql db link expr.
 */
schema SqlDbLinkExprDO {
    @primary oid_: int,
    db_link_: string,
    expr_oid_: int,
    resolved_column_oid_: int,
    simple_name_: string
}
impl SqlDbLinkExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDbLinkExprDO {
    	for (tmp in db.sql_db_link_expr) {
            yield SqlDbLinkExprDO {
                oid_ : tmp.oid_,
                db_link_ : tmp.db_link_,
                expr_oid_ : tmp.expr_oid_,
                resolved_column_oid_ : tmp.resolved_column_oid_,
                simple_name_ : tmp.simple_name_
            }
    	}
    }
    /**
     * @brief gets the db link of this element.
     * @return string
     */
    pub fn getDbLink(self) -> string {
        return self.db_link_
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the resolved column oid of this element.
     * @return int
     */
    pub fn getResolvedColumnOid(self) -> int {
        return self.resolved_column_oid_
    }
    /**
     * @brief gets the simple name of this element.
     * @return string
     */
    pub fn getSimpleName(self) -> string {
        return self.simple_name_
    }
}
/**
 * @brief DO class: A sql decimal expr.
 */
schema SqlDecimalExprDO {
    @primary oid_: int,
    literal_: string,
    number_: string,
    value_: string
}
impl SqlDecimalExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDecimalExprDO {
    	for (tmp in db.sql_decimal_expr) {
            yield SqlDecimalExprDO {
                oid_ : tmp.oid_,
                literal_ : tmp.literal_,
                number_ : tmp.number_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the literal of this element.
     * @return string
     */
    pub fn getLiteral(self) -> string {
        return self.literal_
    }
    /**
     * @brief gets the number of this element.
     * @return string
     */
    pub fn getNumber(self) -> string {
        return self.number_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql declare item.
 */
schema SqlDeclareItemDO {
    @primary oid_: int,
    data_type_oid_: int,
    name_oid_: int,
    resolved_object_: string,
    type_: string,
    value_oid_: int
}
impl SqlDeclareItemDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDeclareItemDO {
    	for (tmp in db.sql_declare_item) {
            yield SqlDeclareItemDO {
                oid_ : tmp.oid_,
                data_type_oid_ : tmp.data_type_oid_,
                name_oid_ : tmp.name_oid_,
                resolved_object_ : tmp.resolved_object_,
                type_ : tmp.type_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the data type oid of this element.
     * @return int
     */
    pub fn getDataTypeOid(self) -> int {
        return self.data_type_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the resolved object of this element.
     * @return string
     */
    pub fn getResolvedObject(self) -> string {
        return self.resolved_object_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A sql declare statement.
 */
schema SqlDeclareStatementDO {
    @primary oid_: int
}
impl SqlDeclareStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDeclareStatementDO {
    	for (tmp in db.sql_declare_statement) {
            yield SqlDeclareStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql default.
 */
schema SqlDefaultDO {
    @primary oid_: int,
    column_oid_: int,
    expr_oid_: int,
    is_with_values_: int
}
impl SqlDefaultDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDefaultDO {
    	for (tmp in db.sql_default) {
            yield SqlDefaultDO {
                oid_ : tmp.oid_,
                column_oid_ : tmp.column_oid_,
                expr_oid_ : tmp.expr_oid_,
                is_with_values_ : tmp.is_with_values_
            }
    	}
    }
    /**
     * @brief gets the column oid of this element.
     * @return int
     */
    pub fn getColumnOid(self) -> int {
        return self.column_oid_
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the is with values of this element.
     * @return int
     */
    pub fn getIsWithValues(self) -> int {
        return self.is_with_values_
    }
}
/**
 * @brief DO class: A sql default expr.
 */
schema SqlDefaultExprDO {
    @primary oid_: int
}
impl SqlDefaultExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDefaultExprDO {
    	for (tmp in db.sql_default_expr) {
            yield SqlDefaultExprDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql delete statement.
 */
schema SqlDeleteStatementDO {
    @primary oid_: int,
    alias_: string,
    expr_table_source_oid_: int,
    from_oid_: int,
    is_only_: int,
    table_name_oid_: int,
    table_source_oid_: int,
    using_oid_: int,
    where_oid_: int,
    with_oid_: int
}
impl SqlDeleteStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDeleteStatementDO {
    	for (tmp in db.sql_delete_statement) {
            yield SqlDeleteStatementDO {
                oid_ : tmp.oid_,
                alias_ : tmp.alias_,
                expr_table_source_oid_ : tmp.expr_table_source_oid_,
                from_oid_ : tmp.from_oid_,
                is_only_ : tmp.is_only_,
                table_name_oid_ : tmp.table_name_oid_,
                table_source_oid_ : tmp.table_source_oid_,
                using_oid_ : tmp.using_oid_,
                where_oid_ : tmp.where_oid_,
                with_oid_ : tmp.with_oid_
            }
    	}
    }
    /**
     * @brief gets the alias of this element.
     * @return string
     */
    pub fn getAlias(self) -> string {
        return self.alias_
    }
    /**
     * @brief gets the expr table source oid of this element.
     * @return int
     */
    pub fn getExprTableSourceOid(self) -> int {
        return self.expr_table_source_oid_
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the is only of this element.
     * @return int
     */
    pub fn getIsOnly(self) -> int {
        return self.is_only_
    }
    /**
     * @brief gets the table name oid of this element.
     * @return int
     */
    pub fn getTableNameOid(self) -> int {
        return self.table_name_oid_
    }
    /**
     * @brief gets the table source oid of this element.
     * @return int
     */
    pub fn getTableSourceOid(self) -> int {
        return self.table_source_oid_
    }
    /**
     * @brief gets the using oid of this element.
     * @return int
     */
    pub fn getUsingOid(self) -> int {
        return self.using_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
    /**
     * @brief gets the with oid of this element.
     * @return int
     */
    pub fn getWithOid(self) -> int {
        return self.with_oid_
    }
}
/**
 * @brief DO class: A sql describe statement.
 */
schema SqlDescribeStatementDO {
    @primary oid_: int,
    column_oid_: int,
    is_extended_: int,
    is_formatted_: int,
    object_oid_: int,
    object_type_: string
}
impl SqlDescribeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDescribeStatementDO {
    	for (tmp in db.sql_describe_statement) {
            yield SqlDescribeStatementDO {
                oid_ : tmp.oid_,
                column_oid_ : tmp.column_oid_,
                is_extended_ : tmp.is_extended_,
                is_formatted_ : tmp.is_formatted_,
                object_oid_ : tmp.object_oid_,
                object_type_ : tmp.object_type_
            }
    	}
    }
    /**
     * @brief gets the column oid of this element.
     * @return int
     */
    pub fn getColumnOid(self) -> int {
        return self.column_oid_
    }
    /**
     * @brief gets the is extended of this element.
     * @return int
     */
    pub fn getIsExtended(self) -> int {
        return self.is_extended_
    }
    /**
     * @brief gets the is formatted of this element.
     * @return int
     */
    pub fn getIsFormatted(self) -> int {
        return self.is_formatted_
    }
    /**
     * @brief gets the object oid of this element.
     * @return int
     */
    pub fn getObjectOid(self) -> int {
        return self.object_oid_
    }
    /**
     * @brief gets the object type of this element.
     * @return string
     */
    pub fn getObjectType(self) -> string {
        return self.object_type_
    }
}
/**
 * @brief DO class: A sql double expr.
 */
schema SqlDoubleExprDO {
    @primary oid_: int,
    number_: string,
    value_: string
}
impl SqlDoubleExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDoubleExprDO {
    	for (tmp in db.sql_double_expr) {
            yield SqlDoubleExprDO {
                oid_ : tmp.oid_,
                number_ : tmp.number_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the number of this element.
     * @return string
     */
    pub fn getNumber(self) -> string {
        return self.number_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql drop catalog statement.
 */
schema SqlDropCatalogStatementDO {
    @primary oid_: int,
    is_external_: int,
    is_if_exists_: int,
    name_oid_: int
}
impl SqlDropCatalogStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropCatalogStatementDO {
    	for (tmp in db.sql_drop_catalog_statement) {
            yield SqlDropCatalogStatementDO {
                oid_ : tmp.oid_,
                is_external_ : tmp.is_external_,
                is_if_exists_ : tmp.is_if_exists_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is external of this element.
     * @return int
     */
    pub fn getIsExternal(self) -> int {
        return self.is_external_
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql drop database statement.
 */
schema SqlDropDatabaseStatementDO {
    @primary oid_: int,
    database_oid_: int,
    database_name_: string,
    is_cascade_: int,
    is_if_exists_: int,
    is_physical_: int,
    is_restrict_: int,
    name_oid_: int,
    restrict_: int,
    server_: string
}
impl SqlDropDatabaseStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropDatabaseStatementDO {
    	for (tmp in db.sql_drop_database_statement) {
            yield SqlDropDatabaseStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_,
                database_name_ : tmp.database_name_,
                is_cascade_ : tmp.is_cascade_,
                is_if_exists_ : tmp.is_if_exists_,
                is_physical_ : tmp.is_physical_,
                is_restrict_ : tmp.is_restrict_,
                name_oid_ : tmp.name_oid_,
                restrict_ : tmp.restrict_,
                server_ : tmp.server_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
    /**
     * @brief gets the database name of this element.
     * @return string
     */
    pub fn getDatabaseName(self) -> string {
        return self.database_name_
    }
    /**
     * @brief gets the is cascade of this element.
     * @return int
     */
    pub fn getIsCascade(self) -> int {
        return self.is_cascade_
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the is physical of this element.
     * @return int
     */
    pub fn getIsPhysical(self) -> int {
        return self.is_physical_
    }
    /**
     * @brief gets the is restrict of this element.
     * @return int
     */
    pub fn getIsRestrict(self) -> int {
        return self.is_restrict_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the restrict of this element.
     * @return int
     */
    pub fn getRestrict(self) -> int {
        return self.restrict_
    }
    /**
     * @brief gets the server of this element.
     * @return string
     */
    pub fn getServer(self) -> string {
        return self.server_
    }
}
/**
 * @brief DO class: A sql drop event statement.
 */
schema SqlDropEventStatementDO {
    @primary oid_: int,
    is_if_exists_: int,
    name_oid_: int
}
impl SqlDropEventStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropEventStatementDO {
    	for (tmp in db.sql_drop_event_statement) {
            yield SqlDropEventStatementDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql drop function statement.
 */
schema SqlDropFunctionStatementDO {
    @primary oid_: int,
    is_if_exists_: int,
    is_temporary_: int,
    name_oid_: int
}
impl SqlDropFunctionStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropFunctionStatementDO {
    	for (tmp in db.sql_drop_function_statement) {
            yield SqlDropFunctionStatementDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_,
                is_temporary_ : tmp.is_temporary_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the is temporary of this element.
     * @return int
     */
    pub fn getIsTemporary(self) -> int {
        return self.is_temporary_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql drop index statement.
 */
schema SqlDropIndexStatementDO {
    @primary oid_: int,
    algorithm_oid_: int,
    index_name_oid_: int,
    is_if_exists_: int,
    lock_option_oid_: int,
    table_name_oid_: int
}
impl SqlDropIndexStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropIndexStatementDO {
    	for (tmp in db.sql_drop_index_statement) {
            yield SqlDropIndexStatementDO {
                oid_ : tmp.oid_,
                algorithm_oid_ : tmp.algorithm_oid_,
                index_name_oid_ : tmp.index_name_oid_,
                is_if_exists_ : tmp.is_if_exists_,
                lock_option_oid_ : tmp.lock_option_oid_,
                table_name_oid_ : tmp.table_name_oid_
            }
    	}
    }
    /**
     * @brief gets the algorithm oid of this element.
     * @return int
     */
    pub fn getAlgorithmOid(self) -> int {
        return self.algorithm_oid_
    }
    /**
     * @brief gets the index name oid of this element.
     * @return int
     */
    pub fn getIndexNameOid(self) -> int {
        return self.index_name_oid_
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the lock option oid of this element.
     * @return int
     */
    pub fn getLockOptionOid(self) -> int {
        return self.lock_option_oid_
    }
    /**
     * @brief gets the table name oid of this element.
     * @return int
     */
    pub fn getTableNameOid(self) -> int {
        return self.table_name_oid_
    }
}
/**
 * @brief DO class: A sql drop log file group statement.
 */
schema SqlDropLogFileGroupStatementDO {
    @primary oid_: int,
    engine_oid_: int,
    name_oid_: int
}
impl SqlDropLogFileGroupStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropLogFileGroupStatementDO {
    	for (tmp in db.sql_drop_log_file_group_statement) {
            yield SqlDropLogFileGroupStatementDO {
                oid_ : tmp.oid_,
                engine_oid_ : tmp.engine_oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the engine oid of this element.
     * @return int
     */
    pub fn getEngineOid(self) -> int {
        return self.engine_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql drop materialized view statement.
 */
schema SqlDropMaterializedViewStatementDO {
    @primary oid_: int,
    is_if_exists_: int,
    name_oid_: int
}
impl SqlDropMaterializedViewStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropMaterializedViewStatementDO {
    	for (tmp in db.sql_drop_materialized_view_statement) {
            yield SqlDropMaterializedViewStatementDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql drop outline statement.
 */
schema SqlDropOutlineStatementDO {
    @primary oid_: int,
    is_if_exists_: int,
    name_oid_: int
}
impl SqlDropOutlineStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropOutlineStatementDO {
    	for (tmp in db.sql_drop_outline_statement) {
            yield SqlDropOutlineStatementDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql drop procedure statement.
 */
schema SqlDropProcedureStatementDO {
    @primary oid_: int,
    is_if_exists_: int,
    name_oid_: int
}
impl SqlDropProcedureStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropProcedureStatementDO {
    	for (tmp in db.sql_drop_procedure_statement) {
            yield SqlDropProcedureStatementDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql drop resource group statement.
 */
schema SqlDropResourceGroupStatementDO {
    @primary oid_: int,
    is_if_exists_: int,
    name_oid_: int
}
impl SqlDropResourceGroupStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropResourceGroupStatementDO {
    	for (tmp in db.sql_drop_resource_group_statement) {
            yield SqlDropResourceGroupStatementDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql drop resource statement.
 */
schema SqlDropResourceStatementDO {
    @primary oid_: int,
    is_if_exists_: int,
    name_oid_: int
}
impl SqlDropResourceStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropResourceStatementDO {
    	for (tmp in db.sql_drop_resource_statement) {
            yield SqlDropResourceStatementDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql drop role statement.
 */
schema SqlDropRoleStatementDO {
    @primary oid_: int,
    is_if_not_exists_: int,
    name_oid_: int
}
impl SqlDropRoleStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropRoleStatementDO {
    	for (tmp in db.sql_drop_role_statement) {
            yield SqlDropRoleStatementDO {
                oid_ : tmp.oid_,
                is_if_not_exists_ : tmp.is_if_not_exists_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is if not exists of this element.
     * @return int
     */
    pub fn getIsIfNotExists(self) -> int {
        return self.is_if_not_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql drop sequence statement.
 */
schema SqlDropSequenceStatementDO {
    @primary oid_: int,
    is_if_exists_: int,
    name_oid_: int,
    schema_: string
}
impl SqlDropSequenceStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropSequenceStatementDO {
    	for (tmp in db.sql_drop_sequence_statement) {
            yield SqlDropSequenceStatementDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_,
                name_oid_ : tmp.name_oid_,
                schema_ : tmp.schema_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the schema of this element.
     * @return string
     */
    pub fn getSchema(self) -> string {
        return self.schema_
    }
}
/**
 * @brief DO class: A sql drop server statement.
 */
schema SqlDropServerStatementDO {
    @primary oid_: int,
    is_if_exists_: int,
    name_oid_: int
}
impl SqlDropServerStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropServerStatementDO {
    	for (tmp in db.sql_drop_server_statement) {
            yield SqlDropServerStatementDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql drop synonym statement.
 */
schema SqlDropSynonymStatementDO {
    @primary oid_: int,
    is_force_: int,
    is_if_exists_: int,
    is_public_: int,
    name_oid_: int,
    schema_: string
}
impl SqlDropSynonymStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropSynonymStatementDO {
    	for (tmp in db.sql_drop_synonym_statement) {
            yield SqlDropSynonymStatementDO {
                oid_ : tmp.oid_,
                is_force_ : tmp.is_force_,
                is_if_exists_ : tmp.is_if_exists_,
                is_public_ : tmp.is_public_,
                name_oid_ : tmp.name_oid_,
                schema_ : tmp.schema_
            }
    	}
    }
    /**
     * @brief gets the is force of this element.
     * @return int
     */
    pub fn getIsForce(self) -> int {
        return self.is_force_
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the is public of this element.
     * @return int
     */
    pub fn getIsPublic(self) -> int {
        return self.is_public_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the schema of this element.
     * @return string
     */
    pub fn getSchema(self) -> string {
        return self.schema_
    }
}
/**
 * @brief DO class: A sql drop table group statement.
 */
schema SqlDropTableGroupStatementDO {
    @primary oid_: int,
    is_if_exists_: int,
    name_oid_: int,
    table_group_name_: string
}
impl SqlDropTableGroupStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropTableGroupStatementDO {
    	for (tmp in db.sql_drop_table_group_statement) {
            yield SqlDropTableGroupStatementDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_,
                name_oid_ : tmp.name_oid_,
                table_group_name_ : tmp.table_group_name_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the table group name of this element.
     * @return string
     */
    pub fn getTableGroupName(self) -> string {
        return self.table_group_name_
    }
}
/**
 * @brief DO class: A sql drop table space statement.
 */
schema SqlDropTableSpaceStatementDO {
    @primary oid_: int,
    engine_oid_: int,
    is_if_exists_: int,
    name_oid_: int,
    table_space_name_: string
}
impl SqlDropTableSpaceStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropTableSpaceStatementDO {
    	for (tmp in db.sql_drop_table_space_statement) {
            yield SqlDropTableSpaceStatementDO {
                oid_ : tmp.oid_,
                engine_oid_ : tmp.engine_oid_,
                is_if_exists_ : tmp.is_if_exists_,
                name_oid_ : tmp.name_oid_,
                table_space_name_ : tmp.table_space_name_
            }
    	}
    }
    /**
     * @brief gets the engine oid of this element.
     * @return int
     */
    pub fn getEngineOid(self) -> int {
        return self.engine_oid_
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the table space name of this element.
     * @return string
     */
    pub fn getTableSpaceName(self) -> string {
        return self.table_space_name_
    }
}
/**
 * @brief DO class: A sql drop table statement.
 */
schema SqlDropTableStatementDO {
    @primary oid_: int,
    is_cascade_: int,
    is_drop_partition_: int,
    is_external_: int,
    is_if_exists_: int,
    is_purge_: int,
    is_restrict_: int,
    is_temporary_: int,
    where_oid_: int
}
impl SqlDropTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropTableStatementDO {
    	for (tmp in db.sql_drop_table_statement) {
            yield SqlDropTableStatementDO {
                oid_ : tmp.oid_,
                is_cascade_ : tmp.is_cascade_,
                is_drop_partition_ : tmp.is_drop_partition_,
                is_external_ : tmp.is_external_,
                is_if_exists_ : tmp.is_if_exists_,
                is_purge_ : tmp.is_purge_,
                is_restrict_ : tmp.is_restrict_,
                is_temporary_ : tmp.is_temporary_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the is cascade of this element.
     * @return int
     */
    pub fn getIsCascade(self) -> int {
        return self.is_cascade_
    }
    /**
     * @brief gets the is drop partition of this element.
     * @return int
     */
    pub fn getIsDropPartition(self) -> int {
        return self.is_drop_partition_
    }
    /**
     * @brief gets the is external of this element.
     * @return int
     */
    pub fn getIsExternal(self) -> int {
        return self.is_external_
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the is purge of this element.
     * @return int
     */
    pub fn getIsPurge(self) -> int {
        return self.is_purge_
    }
    /**
     * @brief gets the is restrict of this element.
     * @return int
     */
    pub fn getIsRestrict(self) -> int {
        return self.is_restrict_
    }
    /**
     * @brief gets the is temporary of this element.
     * @return int
     */
    pub fn getIsTemporary(self) -> int {
        return self.is_temporary_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A sql drop trigger statement.
 */
schema SqlDropTriggerStatementDO {
    @primary oid_: int,
    is_if_exists_: int,
    name_oid_: int
}
impl SqlDropTriggerStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropTriggerStatementDO {
    	for (tmp in db.sql_drop_trigger_statement) {
            yield SqlDropTriggerStatementDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql drop type statement.
 */
schema SqlDropTypeStatementDO {
    @primary oid_: int,
    is_if_exists_: int,
    name_oid_: int
}
impl SqlDropTypeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropTypeStatementDO {
    	for (tmp in db.sql_drop_type_statement) {
            yield SqlDropTypeStatementDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql drop user statement.
 */
schema SqlDropUserStatementDO {
    @primary oid_: int,
    is_if_exists_: int
}
impl SqlDropUserStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropUserStatementDO {
    	for (tmp in db.sql_drop_user_statement) {
            yield SqlDropUserStatementDO {
                oid_ : tmp.oid_,
                is_if_exists_ : tmp.is_if_exists_
            }
    	}
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
}
/**
 * @brief DO class: A sql drop view statement.
 */
schema SqlDropViewStatementDO {
    @primary oid_: int,
    is_cascade_: int,
    is_if_exists_: int,
    is_restrict_: int
}
impl SqlDropViewStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDropViewStatementDO {
    	for (tmp in db.sql_drop_view_statement) {
            yield SqlDropViewStatementDO {
                oid_ : tmp.oid_,
                is_cascade_ : tmp.is_cascade_,
                is_if_exists_ : tmp.is_if_exists_,
                is_restrict_ : tmp.is_restrict_
            }
    	}
    }
    /**
     * @brief gets the is cascade of this element.
     * @return int
     */
    pub fn getIsCascade(self) -> int {
        return self.is_cascade_
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the is restrict of this element.
     * @return int
     */
    pub fn getIsRestrict(self) -> int {
        return self.is_restrict_
    }
}
/**
 * @brief DO class: A sql dump statement.
 */
schema SqlDumpStatementDO {
    @primary oid_: int,
    into_oid_: int,
    is_overwrite_: int,
    select_oid_: int
}
impl SqlDumpStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlDumpStatementDO {
    	for (tmp in db.sql_dump_statement) {
            yield SqlDumpStatementDO {
                oid_ : tmp.oid_,
                into_oid_ : tmp.into_oid_,
                is_overwrite_ : tmp.is_overwrite_,
                select_oid_ : tmp.select_oid_
            }
    	}
    }
    /**
     * @brief gets the into oid of this element.
     * @return int
     */
    pub fn getIntoOid(self) -> int {
        return self.into_oid_
    }
    /**
     * @brief gets the is overwrite of this element.
     * @return int
     */
    pub fn getIsOverwrite(self) -> int {
        return self.is_overwrite_
    }
    /**
     * @brief gets the select oid of this element.
     * @return int
     */
    pub fn getSelectOid(self) -> int {
        return self.select_oid_
    }
}
/**
 * @brief DO class: A sql error logging clause.
 */
schema SqlErrorLoggingClauseDO {
    @primary oid_: int,
    into_oid_: int,
    limit_oid_: int,
    simple_expression_oid_: int
}
impl SqlErrorLoggingClauseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlErrorLoggingClauseDO {
    	for (tmp in db.sql_error_logging_clause) {
            yield SqlErrorLoggingClauseDO {
                oid_ : tmp.oid_,
                into_oid_ : tmp.into_oid_,
                limit_oid_ : tmp.limit_oid_,
                simple_expression_oid_ : tmp.simple_expression_oid_
            }
    	}
    }
    /**
     * @brief gets the into oid of this element.
     * @return int
     */
    pub fn getIntoOid(self) -> int {
        return self.into_oid_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the simple expression oid of this element.
     * @return int
     */
    pub fn getSimpleExpressionOid(self) -> int {
        return self.simple_expression_oid_
    }
}
/**
 * @brief DO class: A sql exists expr.
 */
schema SqlExistsExprDO {
    @primary oid_: int,
    is_not_: int,
    sub_query_oid_: int
}
impl SqlExistsExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlExistsExprDO {
    	for (tmp in db.sql_exists_expr) {
            yield SqlExistsExprDO {
                oid_ : tmp.oid_,
                is_not_ : tmp.is_not_,
                sub_query_oid_ : tmp.sub_query_oid_
            }
    	}
    }
    /**
     * @brief gets the is not of this element.
     * @return int
     */
    pub fn getIsNot(self) -> int {
        return self.is_not_
    }
    /**
     * @brief gets the sub query oid of this element.
     * @return int
     */
    pub fn getSubQueryOid(self) -> int {
        return self.sub_query_oid_
    }
}
/**
 * @brief DO class: A sql explain analyze statement.
 */
schema SqlExplainAnalyzeStatementDO {
    @primary oid_: int,
    select_oid_: int
}
impl SqlExplainAnalyzeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlExplainAnalyzeStatementDO {
    	for (tmp in db.sql_explain_analyze_statement) {
            yield SqlExplainAnalyzeStatementDO {
                oid_ : tmp.oid_,
                select_oid_ : tmp.select_oid_
            }
    	}
    }
    /**
     * @brief gets the select oid of this element.
     * @return int
     */
    pub fn getSelectOid(self) -> int {
        return self.select_oid_
    }
}
/**
 * @brief DO class: A sql explain statement.
 */
schema SqlExplainStatementDO {
    @primary oid_: int,
    format_: string,
    is_authorization_: int,
    is_dependency_: int,
    is_extended_: int,
    is_optimizer_: int,
    is_parenthesis_: int,
    statement_oid_: int,
    type_: string
}
impl SqlExplainStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlExplainStatementDO {
    	for (tmp in db.sql_explain_statement) {
            yield SqlExplainStatementDO {
                oid_ : tmp.oid_,
                format_ : tmp.format_,
                is_authorization_ : tmp.is_authorization_,
                is_dependency_ : tmp.is_dependency_,
                is_extended_ : tmp.is_extended_,
                is_optimizer_ : tmp.is_optimizer_,
                is_parenthesis_ : tmp.is_parenthesis_,
                statement_oid_ : tmp.statement_oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the format of this element.
     * @return string
     */
    pub fn getFormat(self) -> string {
        return self.format_
    }
    /**
     * @brief gets the is authorization of this element.
     * @return int
     */
    pub fn getIsAuthorization(self) -> int {
        return self.is_authorization_
    }
    /**
     * @brief gets the is dependency of this element.
     * @return int
     */
    pub fn getIsDependency(self) -> int {
        return self.is_dependency_
    }
    /**
     * @brief gets the is extended of this element.
     * @return int
     */
    pub fn getIsExtended(self) -> int {
        return self.is_extended_
    }
    /**
     * @brief gets the is optimizer of this element.
     * @return int
     */
    pub fn getIsOptimizer(self) -> int {
        return self.is_optimizer_
    }
    /**
     * @brief gets the is parenthesis of this element.
     * @return int
     */
    pub fn getIsParenthesis(self) -> int {
        return self.is_parenthesis_
    }
    /**
     * @brief gets the statement oid of this element.
     * @return int
     */
    pub fn getStatementOid(self) -> int {
        return self.statement_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A sql export database statement.
 */
schema SqlExportDatabaseStatementDO {
    @primary oid_: int,
    db_oid_: int,
    is_realtime_: int
}
impl SqlExportDatabaseStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlExportDatabaseStatementDO {
    	for (tmp in db.sql_export_database_statement) {
            yield SqlExportDatabaseStatementDO {
                oid_ : tmp.oid_,
                db_oid_ : tmp.db_oid_,
                is_realtime_ : tmp.is_realtime_
            }
    	}
    }
    /**
     * @brief gets the db oid of this element.
     * @return int
     */
    pub fn getDbOid(self) -> int {
        return self.db_oid_
    }
    /**
     * @brief gets the is realtime of this element.
     * @return int
     */
    pub fn getIsRealtime(self) -> int {
        return self.is_realtime_
    }
}
/**
 * @brief DO class: A sql export table statement.
 */
schema SqlExportTableStatementDO {
    @primary oid_: int,
    for_replication_oid_: int,
    table_oid_: int,
    to_oid_: int
}
impl SqlExportTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlExportTableStatementDO {
    	for (tmp in db.sql_export_table_statement) {
            yield SqlExportTableStatementDO {
                oid_ : tmp.oid_,
                for_replication_oid_ : tmp.for_replication_oid_,
                table_oid_ : tmp.table_oid_,
                to_oid_ : tmp.to_oid_
            }
    	}
    }
    /**
     * @brief gets the for replication oid of this element.
     * @return int
     */
    pub fn getForReplicationOid(self) -> int {
        return self.for_replication_oid_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
}
/**
 * @brief DO class: A sql expr hint.
 */
schema SqlExprHintDO {
    @primary oid_: int,
    expr_oid_: int
}
impl SqlExprHintDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlExprHintDO {
    	for (tmp in db.sql_expr_hint) {
            yield SqlExprHintDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
}
/**
 * @brief DO class: A sql expr impl.
 */
schema SqlExprImplDO {
    @primary oid_: int
}
impl SqlExprImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlExprImplDO {
    	for (tmp in db.sql_expr_impl) {
            yield SqlExprImplDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql expr statement.
 */
schema SqlExprStatementDO {
    @primary oid_: int,
    expr_oid_: int
}
impl SqlExprStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlExprStatementDO {
    	for (tmp in db.sql_expr_statement) {
            yield SqlExprStatementDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
}
/**
 * @brief DO class: A sql expr table source.
 */
schema SqlExprTableSourceDO {
    @primary oid_: int,
    catalog_: string,
    expr_oid_: int,
    name_oid_: int,
    partition_size_: int,
    sampling_oid_: int,
    schema_: string,
    schema_object_: string,
    table_name_: string
}
impl SqlExprTableSourceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlExprTableSourceDO {
    	for (tmp in db.sql_expr_table_source) {
            yield SqlExprTableSourceDO {
                oid_ : tmp.oid_,
                catalog_ : tmp.catalog_,
                expr_oid_ : tmp.expr_oid_,
                name_oid_ : tmp.name_oid_,
                partition_size_ : tmp.partition_size_,
                sampling_oid_ : tmp.sampling_oid_,
                schema_ : tmp.schema_,
                schema_object_ : tmp.schema_object_,
                table_name_ : tmp.table_name_
            }
    	}
    }
    /**
     * @brief gets the catalog of this element.
     * @return string
     */
    pub fn getCatalog(self) -> string {
        return self.catalog_
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the partition size of this element.
     * @return int
     */
    pub fn getPartitionSize(self) -> int {
        return self.partition_size_
    }
    /**
     * @brief gets the sampling oid of this element.
     * @return int
     */
    pub fn getSamplingOid(self) -> int {
        return self.sampling_oid_
    }
    /**
     * @brief gets the schema of this element.
     * @return string
     */
    pub fn getSchema(self) -> string {
        return self.schema_
    }
    /**
     * @brief gets the schema object of this element.
     * @return string
     */
    pub fn getSchemaObject(self) -> string {
        return self.schema_object_
    }
    /**
     * @brief gets the table name of this element.
     * @return string
     */
    pub fn getTableName(self) -> string {
        return self.table_name_
    }
}
/**
 * @brief DO class: A sql external record format.
 */
schema SqlExternalRecordFormatDO {
    @primary oid_: int,
    badfile_: int,
    collection_items_terminated_by_oid_: int,
    delimited_by_oid_: int,
    escaped_by_oid_: int,
    is_ltrim_: int,
    is_missing_field_values_are_null_: int,
    is_reject_rows_with_all_null_fields_: int,
    lines_terminated_by_oid_: int,
    logfile_: int,
    map_keys_terminated_by_oid_: int,
    null_defined_as_oid_: int,
    serde_oid_: int,
    terminated_by_oid_: int
}
impl SqlExternalRecordFormatDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlExternalRecordFormatDO {
    	for (tmp in db.sql_external_record_format) {
            yield SqlExternalRecordFormatDO {
                oid_ : tmp.oid_,
                badfile_ : tmp.badfile_,
                collection_items_terminated_by_oid_ : tmp.collection_items_terminated_by_oid_,
                delimited_by_oid_ : tmp.delimited_by_oid_,
                escaped_by_oid_ : tmp.escaped_by_oid_,
                is_ltrim_ : tmp.is_ltrim_,
                is_missing_field_values_are_null_ : tmp.is_missing_field_values_are_null_,
                is_reject_rows_with_all_null_fields_ : tmp.is_reject_rows_with_all_null_fields_,
                lines_terminated_by_oid_ : tmp.lines_terminated_by_oid_,
                logfile_ : tmp.logfile_,
                map_keys_terminated_by_oid_ : tmp.map_keys_terminated_by_oid_,
                null_defined_as_oid_ : tmp.null_defined_as_oid_,
                serde_oid_ : tmp.serde_oid_,
                terminated_by_oid_ : tmp.terminated_by_oid_
            }
    	}
    }
    /**
     * @brief gets the badfile of this element.
     * @return int
     */
    pub fn getBadfile(self) -> int {
        return self.badfile_
    }
    /**
     * @brief gets the collection items terminated by oid of this element.
     * @return int
     */
    pub fn getCollectionItemsTerminatedByOid(self) -> int {
        return self.collection_items_terminated_by_oid_
    }
    /**
     * @brief gets the delimited by oid of this element.
     * @return int
     */
    pub fn getDelimitedByOid(self) -> int {
        return self.delimited_by_oid_
    }
    /**
     * @brief gets the escaped by oid of this element.
     * @return int
     */
    pub fn getEscapedByOid(self) -> int {
        return self.escaped_by_oid_
    }
    /**
     * @brief gets the is ltrim of this element.
     * @return int
     */
    pub fn getIsLtrim(self) -> int {
        return self.is_ltrim_
    }
    /**
     * @brief gets the is missing field values are null of this element.
     * @return int
     */
    pub fn getIsMissingFieldValuesAreNull(self) -> int {
        return self.is_missing_field_values_are_null_
    }
    /**
     * @brief gets the is reject rows with all null fields of this element.
     * @return int
     */
    pub fn getIsRejectRowsWithAllNullFields(self) -> int {
        return self.is_reject_rows_with_all_null_fields_
    }
    /**
     * @brief gets the lines terminated by oid of this element.
     * @return int
     */
    pub fn getLinesTerminatedByOid(self) -> int {
        return self.lines_terminated_by_oid_
    }
    /**
     * @brief gets the logfile of this element.
     * @return int
     */
    pub fn getLogfile(self) -> int {
        return self.logfile_
    }
    /**
     * @brief gets the map keys terminated by oid of this element.
     * @return int
     */
    pub fn getMapKeysTerminatedByOid(self) -> int {
        return self.map_keys_terminated_by_oid_
    }
    /**
     * @brief gets the null defined as oid of this element.
     * @return int
     */
    pub fn getNullDefinedAsOid(self) -> int {
        return self.null_defined_as_oid_
    }
    /**
     * @brief gets the serde oid of this element.
     * @return int
     */
    pub fn getSerdeOid(self) -> int {
        return self.serde_oid_
    }
    /**
     * @brief gets the terminated by oid of this element.
     * @return int
     */
    pub fn getTerminatedByOid(self) -> int {
        return self.terminated_by_oid_
    }
}
/**
 * @brief DO class: A sql extract expr.
 */
schema SqlExtractExprDO {
    @primary oid_: int,
    unit_: string,
    value_oid_: int
}
impl SqlExtractExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlExtractExprDO {
    	for (tmp in db.sql_extract_expr) {
            yield SqlExtractExprDO {
                oid_ : tmp.oid_,
                unit_ : tmp.unit_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the unit of this element.
     * @return string
     */
    pub fn getUnit(self) -> string {
        return self.unit_
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A sql fetch statement.
 */
schema SqlFetchStatementDO {
    @primary oid_: int,
    cursor_name_oid_: int,
    is_bulk_collect_: int,
    limit_oid_: int
}
impl SqlFetchStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlFetchStatementDO {
    	for (tmp in db.sql_fetch_statement) {
            yield SqlFetchStatementDO {
                oid_ : tmp.oid_,
                cursor_name_oid_ : tmp.cursor_name_oid_,
                is_bulk_collect_ : tmp.is_bulk_collect_,
                limit_oid_ : tmp.limit_oid_
            }
    	}
    }
    /**
     * @brief gets the cursor name oid of this element.
     * @return int
     */
    pub fn getCursorNameOid(self) -> int {
        return self.cursor_name_oid_
    }
    /**
     * @brief gets the is bulk collect of this element.
     * @return int
     */
    pub fn getIsBulkCollect(self) -> int {
        return self.is_bulk_collect_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
}
/**
 * @brief DO class: A sql flashback expr.
 */
schema SqlFlashbackExprDO {
    @primary oid_: int,
    expr_oid_: int,
    type_: string
}
impl SqlFlashbackExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlFlashbackExprDO {
    	for (tmp in db.sql_flashback_expr) {
            yield SqlFlashbackExprDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A sql float expr.
 */
schema SqlFloatExprDO {
    @primary oid_: int,
    number_: string,
    value_: string
}
impl SqlFloatExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlFloatExprDO {
    	for (tmp in db.sql_float_expr) {
            yield SqlFloatExprDO {
                oid_ : tmp.oid_,
                number_ : tmp.number_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the number of this element.
     * @return string
     */
    pub fn getNumber(self) -> string {
        return self.number_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql for statement.
 */
schema SqlForStatementDO {
    @primary oid_: int,
    index_oid_: int,
    range_oid_: int
}
impl SqlForStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlForStatementDO {
    	for (tmp in db.sql_for_statement) {
            yield SqlForStatementDO {
                oid_ : tmp.oid_,
                index_oid_ : tmp.index_oid_,
                range_oid_ : tmp.range_oid_
            }
    	}
    }
    /**
     * @brief gets the index oid of this element.
     * @return int
     */
    pub fn getIndexOid(self) -> int {
        return self.index_oid_
    }
    /**
     * @brief gets the range oid of this element.
     * @return int
     */
    pub fn getRangeOid(self) -> int {
        return self.range_oid_
    }
}
/**
 * @brief DO class: A sql foreign key impl.
 */
schema SqlForeignKeyImplDO {
    @primary oid_: int,
    is_disable_novalidate_: int,
    is_on_delete_cascade_: int,
    is_on_delete_set_null_: int,
    referenced_table_name_oid_: int,
    referenced_table_oid_: int
}
impl SqlForeignKeyImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlForeignKeyImplDO {
    	for (tmp in db.sql_foreign_key_impl) {
            yield SqlForeignKeyImplDO {
                oid_ : tmp.oid_,
                is_disable_novalidate_ : tmp.is_disable_novalidate_,
                is_on_delete_cascade_ : tmp.is_on_delete_cascade_,
                is_on_delete_set_null_ : tmp.is_on_delete_set_null_,
                referenced_table_name_oid_ : tmp.referenced_table_name_oid_,
                referenced_table_oid_ : tmp.referenced_table_oid_
            }
    	}
    }
    /**
     * @brief gets the is disable novalidate of this element.
     * @return int
     */
    pub fn getIsDisableNovalidate(self) -> int {
        return self.is_disable_novalidate_
    }
    /**
     * @brief gets the is on delete cascade of this element.
     * @return int
     */
    pub fn getIsOnDeleteCascade(self) -> int {
        return self.is_on_delete_cascade_
    }
    /**
     * @brief gets the is on delete set null of this element.
     * @return int
     */
    pub fn getIsOnDeleteSetNull(self) -> int {
        return self.is_on_delete_set_null_
    }
    /**
     * @brief gets the referenced table name oid of this element.
     * @return int
     */
    pub fn getReferencedTableNameOid(self) -> int {
        return self.referenced_table_name_oid_
    }
    /**
     * @brief gets the referenced table oid of this element.
     * @return int
     */
    pub fn getReferencedTableOid(self) -> int {
        return self.referenced_table_oid_
    }
}
/**
 * @brief DO class: A sql grant statement.
 */
schema SqlGrantStatementDO {
    @primary oid_: int,
    identified_by_oid_: int,
    identified_by_password_: string,
    is_admin_option_: int,
    max_connections_per_hour_oid_: int,
    max_queries_per_hour_oid_: int,
    max_updates_per_hour_oid_: int,
    max_user_connections_oid_: int,
    resource_type_: string,
    with_grant_option_: int
}
impl SqlGrantStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlGrantStatementDO {
    	for (tmp in db.sql_grant_statement) {
            yield SqlGrantStatementDO {
                oid_ : tmp.oid_,
                identified_by_oid_ : tmp.identified_by_oid_,
                identified_by_password_ : tmp.identified_by_password_,
                is_admin_option_ : tmp.is_admin_option_,
                max_connections_per_hour_oid_ : tmp.max_connections_per_hour_oid_,
                max_queries_per_hour_oid_ : tmp.max_queries_per_hour_oid_,
                max_updates_per_hour_oid_ : tmp.max_updates_per_hour_oid_,
                max_user_connections_oid_ : tmp.max_user_connections_oid_,
                resource_type_ : tmp.resource_type_,
                with_grant_option_ : tmp.with_grant_option_
            }
    	}
    }
    /**
     * @brief gets the identified by oid of this element.
     * @return int
     */
    pub fn getIdentifiedByOid(self) -> int {
        return self.identified_by_oid_
    }
    /**
     * @brief gets the identified by password of this element.
     * @return string
     */
    pub fn getIdentifiedByPassword(self) -> string {
        return self.identified_by_password_
    }
    /**
     * @brief gets the is admin option of this element.
     * @return int
     */
    pub fn getIsAdminOption(self) -> int {
        return self.is_admin_option_
    }
    /**
     * @brief gets the max connections per hour oid of this element.
     * @return int
     */
    pub fn getMaxConnectionsPerHourOid(self) -> int {
        return self.max_connections_per_hour_oid_
    }
    /**
     * @brief gets the max queries per hour oid of this element.
     * @return int
     */
    pub fn getMaxQueriesPerHourOid(self) -> int {
        return self.max_queries_per_hour_oid_
    }
    /**
     * @brief gets the max updates per hour oid of this element.
     * @return int
     */
    pub fn getMaxUpdatesPerHourOid(self) -> int {
        return self.max_updates_per_hour_oid_
    }
    /**
     * @brief gets the max user connections oid of this element.
     * @return int
     */
    pub fn getMaxUserConnectionsOid(self) -> int {
        return self.max_user_connections_oid_
    }
    /**
     * @brief gets the resource type of this element.
     * @return string
     */
    pub fn getResourceType(self) -> string {
        return self.resource_type_
    }
    /**
     * @brief gets the with grant option of this element.
     * @return int
     */
    pub fn getWithGrantOption(self) -> int {
        return self.with_grant_option_
    }
}
/**
 * @brief DO class: A sql grouping set expr.
 */
schema SqlGroupingSetExprDO {
    @primary oid_: int
}
impl SqlGroupingSetExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlGroupingSetExprDO {
    	for (tmp in db.sql_grouping_set_expr) {
            yield SqlGroupingSetExprDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql hex expr.
 */
schema SqlHexExprDO {
    @primary oid_: int,
    hex_: string,
    value_: string
}
impl SqlHexExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlHexExprDO {
    	for (tmp in db.sql_hex_expr) {
            yield SqlHexExprDO {
                oid_ : tmp.oid_,
                hex_ : tmp.hex_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the hex of this element.
     * @return string
     */
    pub fn getHex(self) -> string {
        return self.hex_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql identifier expr.
 */
schema SqlIdentifierExprDO {
    @primary oid_: int,
    lower_name_: string,
    name_: string,
    resolved_column_object_: string,
    resolved_column_oid_: int,
    resolved_declare_item_oid_: int,
    resolved_owner_object_: string,
    resolved_parameter_oid_: int,
    resolved_select_item_oid_: int,
    resolved_table_source_oid_: int,
    simple_name_: string
}
impl SqlIdentifierExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlIdentifierExprDO {
    	for (tmp in db.sql_identifier_expr) {
            yield SqlIdentifierExprDO {
                oid_ : tmp.oid_,
                lower_name_ : tmp.lower_name_,
                name_ : tmp.name_,
                resolved_column_object_ : tmp.resolved_column_object_,
                resolved_column_oid_ : tmp.resolved_column_oid_,
                resolved_declare_item_oid_ : tmp.resolved_declare_item_oid_,
                resolved_owner_object_ : tmp.resolved_owner_object_,
                resolved_parameter_oid_ : tmp.resolved_parameter_oid_,
                resolved_select_item_oid_ : tmp.resolved_select_item_oid_,
                resolved_table_source_oid_ : tmp.resolved_table_source_oid_,
                simple_name_ : tmp.simple_name_
            }
    	}
    }
    /**
     * @brief gets the lower name of this element.
     * @return string
     */
    pub fn getLowerName(self) -> string {
        return self.lower_name_
    }
    /**
     * @brief gets the name of this element.
     * @return string
     */
    pub fn getName(self) -> string {
        return self.name_
    }
    /**
     * @brief gets the resolved column object of this element.
     * @return string
     */
    pub fn getResolvedColumnObject(self) -> string {
        return self.resolved_column_object_
    }
    /**
     * @brief gets the resolved column oid of this element.
     * @return int
     */
    pub fn getResolvedColumnOid(self) -> int {
        return self.resolved_column_oid_
    }
    /**
     * @brief gets the resolved declare item oid of this element.
     * @return int
     */
    pub fn getResolvedDeclareItemOid(self) -> int {
        return self.resolved_declare_item_oid_
    }
    /**
     * @brief gets the resolved owner object of this element.
     * @return string
     */
    pub fn getResolvedOwnerObject(self) -> string {
        return self.resolved_owner_object_
    }
    /**
     * @brief gets the resolved parameter oid of this element.
     * @return int
     */
    pub fn getResolvedParameterOid(self) -> int {
        return self.resolved_parameter_oid_
    }
    /**
     * @brief gets the resolved select item oid of this element.
     * @return int
     */
    pub fn getResolvedSelectItemOid(self) -> int {
        return self.resolved_select_item_oid_
    }
    /**
     * @brief gets the resolved table source oid of this element.
     * @return int
     */
    pub fn getResolvedTableSourceOid(self) -> int {
        return self.resolved_table_source_oid_
    }
    /**
     * @brief gets the simple name of this element.
     * @return string
     */
    pub fn getSimpleName(self) -> string {
        return self.simple_name_
    }
}
/**
 * @brief DO class: A sql if statement.
 */
schema SqlIfStatementDO {
    @primary oid_: int,
    condition_oid_: int,
    else_if_list_: string,
    else_item_: string
}
impl SqlIfStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlIfStatementDO {
    	for (tmp in db.sql_if_statement) {
            yield SqlIfStatementDO {
                oid_ : tmp.oid_,
                condition_oid_ : tmp.condition_oid_,
                else_if_list_ : tmp.else_if_list_,
                else_item_ : tmp.else_item_
            }
    	}
    }
    /**
     * @brief gets the condition oid of this element.
     * @return int
     */
    pub fn getConditionOid(self) -> int {
        return self.condition_oid_
    }
    /**
     * @brief gets the else if list of this element.
     * @return string
     */
    pub fn getElseIfList(self) -> string {
        return self.else_if_list_
    }
    /**
     * @brief gets the else item of this element.
     * @return string
     */
    pub fn getElseItem(self) -> string {
        return self.else_item_
    }
}
/**
 * @brief DO class: A sql import database statement.
 */
schema SqlImportDatabaseStatementDO {
    @primary oid_: int,
    db_oid_: int,
    status_oid_: int
}
impl SqlImportDatabaseStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlImportDatabaseStatementDO {
    	for (tmp in db.sql_import_database_statement) {
            yield SqlImportDatabaseStatementDO {
                oid_ : tmp.oid_,
                db_oid_ : tmp.db_oid_,
                status_oid_ : tmp.status_oid_
            }
    	}
    }
    /**
     * @brief gets the db oid of this element.
     * @return int
     */
    pub fn getDbOid(self) -> int {
        return self.db_oid_
    }
    /**
     * @brief gets the status oid of this element.
     * @return int
     */
    pub fn getStatusOid(self) -> int {
        return self.status_oid_
    }
}
/**
 * @brief DO class: A sql import table statement.
 */
schema SqlImportTableStatementDO {
    @primary oid_: int,
    from_oid_: int,
    is_extenal_: int,
    is_using_build_: int,
    location_oid_: int,
    table_oid_: int,
    version_oid_: int
}
impl SqlImportTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlImportTableStatementDO {
    	for (tmp in db.sql_import_table_statement) {
            yield SqlImportTableStatementDO {
                oid_ : tmp.oid_,
                from_oid_ : tmp.from_oid_,
                is_extenal_ : tmp.is_extenal_,
                is_using_build_ : tmp.is_using_build_,
                location_oid_ : tmp.location_oid_,
                table_oid_ : tmp.table_oid_,
                version_oid_ : tmp.version_oid_
            }
    	}
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the is extenal of this element.
     * @return int
     */
    pub fn getIsExtenal(self) -> int {
        return self.is_extenal_
    }
    /**
     * @brief gets the is using build of this element.
     * @return int
     */
    pub fn getIsUsingBuild(self) -> int {
        return self.is_using_build_
    }
    /**
     * @brief gets the location oid of this element.
     * @return int
     */
    pub fn getLocationOid(self) -> int {
        return self.location_oid_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
    /**
     * @brief gets the version oid of this element.
     * @return int
     */
    pub fn getVersionOid(self) -> int {
        return self.version_oid_
    }
}
/**
 * @brief DO class: A sql in list expr.
 */
schema SqlInListExprDO {
    @primary oid_: int,
    expr_oid_: int,
    hint_oid_: int,
    is_not_: int
}
impl SqlInListExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlInListExprDO {
    	for (tmp in db.sql_in_list_expr) {
            yield SqlInListExprDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_,
                hint_oid_ : tmp.hint_oid_,
                is_not_ : tmp.is_not_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the hint oid of this element.
     * @return int
     */
    pub fn getHintOid(self) -> int {
        return self.hint_oid_
    }
    /**
     * @brief gets the is not of this element.
     * @return int
     */
    pub fn getIsNot(self) -> int {
        return self.is_not_
    }
}
/**
 * @brief DO class: A sql in sub query expr.
 */
schema SqlInSubQueryExprDO {
    @primary oid_: int,
    expr_oid_: int,
    hint_oid_: int,
    is_global_: int,
    is_not_: int,
    sub_query_oid_: int
}
impl SqlInSubQueryExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlInSubQueryExprDO {
    	for (tmp in db.sql_in_sub_query_expr) {
            yield SqlInSubQueryExprDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_,
                hint_oid_ : tmp.hint_oid_,
                is_global_ : tmp.is_global_,
                is_not_ : tmp.is_not_,
                sub_query_oid_ : tmp.sub_query_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the hint oid of this element.
     * @return int
     */
    pub fn getHintOid(self) -> int {
        return self.hint_oid_
    }
    /**
     * @brief gets the is global of this element.
     * @return int
     */
    pub fn getIsGlobal(self) -> int {
        return self.is_global_
    }
    /**
     * @brief gets the is not of this element.
     * @return int
     */
    pub fn getIsNot(self) -> int {
        return self.is_not_
    }
    /**
     * @brief gets the sub query oid of this element.
     * @return int
     */
    pub fn getSubQueryOid(self) -> int {
        return self.sub_query_oid_
    }
}
/**
 * @brief DO class: A sql index definition.
 */
schema SqlIndexDefinitionDO {
    @primary oid_: int,
    algorithm_: string,
    analyzer_name_oid_: int,
    db_partition_by_oid_: int,
    distance_measure_: string,
    index_analyzer_name_oid_: int,
    is_global_: int,
    is_hash_map_type_: int,
    is_hash_type_: int,
    is_index_: int,
    is_key_: int,
    is_local_: int,
    name_oid_: int,
    options_oid_: int,
    query_analyzer_name_oid_: int,
    symbol_oid_: int,
    table_oid_: int,
    tb_partition_by_oid_: int,
    tb_partitions_oid_: int,
    type_: string,
    with_dic_name_oid_: int
}
impl SqlIndexDefinitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlIndexDefinitionDO {
    	for (tmp in db.sql_index_definition) {
            yield SqlIndexDefinitionDO {
                oid_ : tmp.oid_,
                algorithm_ : tmp.algorithm_,
                analyzer_name_oid_ : tmp.analyzer_name_oid_,
                db_partition_by_oid_ : tmp.db_partition_by_oid_,
                distance_measure_ : tmp.distance_measure_,
                index_analyzer_name_oid_ : tmp.index_analyzer_name_oid_,
                is_global_ : tmp.is_global_,
                is_hash_map_type_ : tmp.is_hash_map_type_,
                is_hash_type_ : tmp.is_hash_type_,
                is_index_ : tmp.is_index_,
                is_key_ : tmp.is_key_,
                is_local_ : tmp.is_local_,
                name_oid_ : tmp.name_oid_,
                options_oid_ : tmp.options_oid_,
                query_analyzer_name_oid_ : tmp.query_analyzer_name_oid_,
                symbol_oid_ : tmp.symbol_oid_,
                table_oid_ : tmp.table_oid_,
                tb_partition_by_oid_ : tmp.tb_partition_by_oid_,
                tb_partitions_oid_ : tmp.tb_partitions_oid_,
                type_ : tmp.type_,
                with_dic_name_oid_ : tmp.with_dic_name_oid_
            }
    	}
    }
    /**
     * @brief gets the algorithm of this element.
     * @return string
     */
    pub fn getAlgorithm(self) -> string {
        return self.algorithm_
    }
    /**
     * @brief gets the analyzer name oid of this element.
     * @return int
     */
    pub fn getAnalyzerNameOid(self) -> int {
        return self.analyzer_name_oid_
    }
    /**
     * @brief gets the db partition by oid of this element.
     * @return int
     */
    pub fn getDbPartitionByOid(self) -> int {
        return self.db_partition_by_oid_
    }
    /**
     * @brief gets the distance measure of this element.
     * @return string
     */
    pub fn getDistanceMeasure(self) -> string {
        return self.distance_measure_
    }
    /**
     * @brief gets the index analyzer name oid of this element.
     * @return int
     */
    pub fn getIndexAnalyzerNameOid(self) -> int {
        return self.index_analyzer_name_oid_
    }
    /**
     * @brief gets the is global of this element.
     * @return int
     */
    pub fn getIsGlobal(self) -> int {
        return self.is_global_
    }
    /**
     * @brief gets the is hash map type of this element.
     * @return int
     */
    pub fn getIsHashMapType(self) -> int {
        return self.is_hash_map_type_
    }
    /**
     * @brief gets the is hash type of this element.
     * @return int
     */
    pub fn getIsHashType(self) -> int {
        return self.is_hash_type_
    }
    /**
     * @brief gets the is index of this element.
     * @return int
     */
    pub fn getIsIndex(self) -> int {
        return self.is_index_
    }
    /**
     * @brief gets the is key of this element.
     * @return int
     */
    pub fn getIsKey(self) -> int {
        return self.is_key_
    }
    /**
     * @brief gets the is local of this element.
     * @return int
     */
    pub fn getIsLocal(self) -> int {
        return self.is_local_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the options oid of this element.
     * @return int
     */
    pub fn getOptionsOid(self) -> int {
        return self.options_oid_
    }
    /**
     * @brief gets the query analyzer name oid of this element.
     * @return int
     */
    pub fn getQueryAnalyzerNameOid(self) -> int {
        return self.query_analyzer_name_oid_
    }
    /**
     * @brief gets the symbol oid of this element.
     * @return int
     */
    pub fn getSymbolOid(self) -> int {
        return self.symbol_oid_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
    /**
     * @brief gets the tb partition by oid of this element.
     * @return int
     */
    pub fn getTbPartitionByOid(self) -> int {
        return self.tb_partition_by_oid_
    }
    /**
     * @brief gets the tb partitions oid of this element.
     * @return int
     */
    pub fn getTbPartitionsOid(self) -> int {
        return self.tb_partitions_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
    /**
     * @brief gets the with dic name oid of this element.
     * @return int
     */
    pub fn getWithDicNameOid(self) -> int {
        return self.with_dic_name_oid_
    }
}
/**
 * @brief DO class: A sql index options.
 */
schema SqlIndexOptionsDO {
    @primary oid_: int,
    algorithm_: string,
    comment_oid_: int,
    index_type_: string,
    is_global_: int,
    is_invisible_: int,
    is_local_: int,
    is_visible_: int,
    key_block_size_oid_: int,
    lock_: string,
    parser_name_: string
}
impl SqlIndexOptionsDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlIndexOptionsDO {
    	for (tmp in db.sql_index_options) {
            yield SqlIndexOptionsDO {
                oid_ : tmp.oid_,
                algorithm_ : tmp.algorithm_,
                comment_oid_ : tmp.comment_oid_,
                index_type_ : tmp.index_type_,
                is_global_ : tmp.is_global_,
                is_invisible_ : tmp.is_invisible_,
                is_local_ : tmp.is_local_,
                is_visible_ : tmp.is_visible_,
                key_block_size_oid_ : tmp.key_block_size_oid_,
                lock_ : tmp.lock_,
                parser_name_ : tmp.parser_name_
            }
    	}
    }
    /**
     * @brief gets the algorithm of this element.
     * @return string
     */
    pub fn getAlgorithm(self) -> string {
        return self.algorithm_
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the index type of this element.
     * @return string
     */
    pub fn getIndexType(self) -> string {
        return self.index_type_
    }
    /**
     * @brief gets the is global of this element.
     * @return int
     */
    pub fn getIsGlobal(self) -> int {
        return self.is_global_
    }
    /**
     * @brief gets the is invisible of this element.
     * @return int
     */
    pub fn getIsInvisible(self) -> int {
        return self.is_invisible_
    }
    /**
     * @brief gets the is local of this element.
     * @return int
     */
    pub fn getIsLocal(self) -> int {
        return self.is_local_
    }
    /**
     * @brief gets the is visible of this element.
     * @return int
     */
    pub fn getIsVisible(self) -> int {
        return self.is_visible_
    }
    /**
     * @brief gets the key block size oid of this element.
     * @return int
     */
    pub fn getKeyBlockSizeOid(self) -> int {
        return self.key_block_size_oid_
    }
    /**
     * @brief gets the lock of this element.
     * @return string
     */
    pub fn getLock(self) -> string {
        return self.lock_
    }
    /**
     * @brief gets the parser name of this element.
     * @return string
     */
    pub fn getParserName(self) -> string {
        return self.parser_name_
    }
}
/**
 * @brief DO class: A sql insert into.
 */
schema SqlInsertIntoDO {
    @primary oid_: int,
    alias_: string,
    columns_string_: string,
    columns_string_hash_: string,
    hint_oid_: int,
    insert_before_comments_direct_: string,
    is_overwrite_: int,
    query_oid_: int,
    table_name_oid_: int,
    table_source_oid_: int,
    values_: string,
    values_list_: string
}
impl SqlInsertIntoDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlInsertIntoDO {
    	for (tmp in db.sql_insert_into) {
            yield SqlInsertIntoDO {
                oid_ : tmp.oid_,
                alias_ : tmp.alias_,
                columns_string_ : tmp.columns_string_,
                columns_string_hash_ : tmp.columns_string_hash_,
                hint_oid_ : tmp.hint_oid_,
                insert_before_comments_direct_ : tmp.insert_before_comments_direct_,
                is_overwrite_ : tmp.is_overwrite_,
                query_oid_ : tmp.query_oid_,
                table_name_oid_ : tmp.table_name_oid_,
                table_source_oid_ : tmp.table_source_oid_,
                values_ : tmp.values_,
                values_list_ : tmp.values_list_
            }
    	}
    }
    /**
     * @brief gets the alias of this element.
     * @return string
     */
    pub fn getAlias(self) -> string {
        return self.alias_
    }
    /**
     * @brief gets the columns string of this element.
     * @return string
     */
    pub fn getColumnsString(self) -> string {
        return self.columns_string_
    }
    /**
     * @brief gets the columns string hash of this element.
     * @return string
     */
    pub fn getColumnsStringHash(self) -> string {
        return self.columns_string_hash_
    }
    /**
     * @brief gets the hint oid of this element.
     * @return int
     */
    pub fn getHintOid(self) -> int {
        return self.hint_oid_
    }
    /**
     * @brief gets the insert before comments direct of this element.
     * @return string
     */
    pub fn getInsertBeforeCommentsDirect(self) -> string {
        return self.insert_before_comments_direct_
    }
    /**
     * @brief gets the is overwrite of this element.
     * @return int
     */
    pub fn getIsOverwrite(self) -> int {
        return self.is_overwrite_
    }
    /**
     * @brief gets the query oid of this element.
     * @return int
     */
    pub fn getQueryOid(self) -> int {
        return self.query_oid_
    }
    /**
     * @brief gets the table name oid of this element.
     * @return int
     */
    pub fn getTableNameOid(self) -> int {
        return self.table_name_oid_
    }
    /**
     * @brief gets the table source oid of this element.
     * @return int
     */
    pub fn getTableSourceOid(self) -> int {
        return self.table_source_oid_
    }
    /**
     * @brief gets the values of this element.
     * @return string
     */
    pub fn getValues(self) -> string {
        return self.values_
    }
    /**
     * @brief gets the values list of this element.
     * @return string
     */
    pub fn getValuesList(self) -> string {
        return self.values_list_
    }
}
/**
 * @brief DO class: A sql insert statement.
 */
schema SqlInsertStatementDO {
    @primary oid_: int,
    is_after_semi_: int,
    is_upsert_: int,
    with_oid_: int
}
impl SqlInsertStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlInsertStatementDO {
    	for (tmp in db.sql_insert_statement) {
            yield SqlInsertStatementDO {
                oid_ : tmp.oid_,
                is_after_semi_ : tmp.is_after_semi_,
                is_upsert_ : tmp.is_upsert_,
                with_oid_ : tmp.with_oid_
            }
    	}
    }
    /**
     * @brief gets the is after semi of this element.
     * @return int
     */
    pub fn getIsAfterSemi(self) -> int {
        return self.is_after_semi_
    }
    /**
     * @brief gets the is upsert of this element.
     * @return int
     */
    pub fn getIsUpsert(self) -> int {
        return self.is_upsert_
    }
    /**
     * @brief gets the with oid of this element.
     * @return int
     */
    pub fn getWithOid(self) -> int {
        return self.with_oid_
    }
}
/**
 * @brief DO class: A sql integer expr.
 */
schema SqlIntegerExprDO {
    @primary oid_: int,
    number_: string,
    type_: string,
    value_: string
}
impl SqlIntegerExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlIntegerExprDO {
    	for (tmp in db.sql_integer_expr) {
            yield SqlIntegerExprDO {
                oid_ : tmp.oid_,
                number_ : tmp.number_,
                type_ : tmp.type_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the number of this element.
     * @return string
     */
    pub fn getNumber(self) -> string {
        return self.number_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql interval expr.
 */
schema SqlIntervalExprDO {
    @primary oid_: int,
    unit_: string,
    value_oid_: int
}
impl SqlIntervalExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlIntervalExprDO {
    	for (tmp in db.sql_interval_expr) {
            yield SqlIntervalExprDO {
                oid_ : tmp.oid_,
                unit_ : tmp.unit_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the unit of this element.
     * @return string
     */
    pub fn getUnit(self) -> string {
        return self.unit_
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A sql join table source.
 */
schema SqlJoinTableSourceDO {
    @primary oid_: int,
    condition_oid_: int,
    is_asof_: int,
    is_global_: int,
    is_natural_: int,
    join_type_: string,
    left_oid_: int,
    right_oid_: int,
    udj_: string
}
impl SqlJoinTableSourceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlJoinTableSourceDO {
    	for (tmp in db.sql_join_table_source) {
            yield SqlJoinTableSourceDO {
                oid_ : tmp.oid_,
                condition_oid_ : tmp.condition_oid_,
                is_asof_ : tmp.is_asof_,
                is_global_ : tmp.is_global_,
                is_natural_ : tmp.is_natural_,
                join_type_ : tmp.join_type_,
                left_oid_ : tmp.left_oid_,
                right_oid_ : tmp.right_oid_,
                udj_ : tmp.udj_
            }
    	}
    }
    /**
     * @brief gets the condition oid of this element.
     * @return int
     */
    pub fn getConditionOid(self) -> int {
        return self.condition_oid_
    }
    /**
     * @brief gets the is asof of this element.
     * @return int
     */
    pub fn getIsAsof(self) -> int {
        return self.is_asof_
    }
    /**
     * @brief gets the is global of this element.
     * @return int
     */
    pub fn getIsGlobal(self) -> int {
        return self.is_global_
    }
    /**
     * @brief gets the is natural of this element.
     * @return int
     */
    pub fn getIsNatural(self) -> int {
        return self.is_natural_
    }
    /**
     * @brief gets the join type of this element.
     * @return string
     */
    pub fn getJoinType(self) -> string {
        return self.join_type_
    }
    /**
     * @brief gets the left oid of this element.
     * @return int
     */
    pub fn getLeftOid(self) -> int {
        return self.left_oid_
    }
    /**
     * @brief gets the right oid of this element.
     * @return int
     */
    pub fn getRightOid(self) -> int {
        return self.right_oid_
    }
    /**
     * @brief gets the udj of this element.
     * @return string
     */
    pub fn getUdj(self) -> string {
        return self.udj_
    }
}
/**
 * @brief DO class: A sql keep.
 */
schema SqlKeepDO {
    @primary oid_: int,
    dense_rank_: string,
    order_by_oid_: int
}
impl SqlKeepDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlKeepDO {
    	for (tmp in db.sql_keep) {
            yield SqlKeepDO {
                oid_ : tmp.oid_,
                dense_rank_ : tmp.dense_rank_,
                order_by_oid_ : tmp.order_by_oid_
            }
    	}
    }
    /**
     * @brief gets the dense rank of this element.
     * @return string
     */
    pub fn getDenseRank(self) -> string {
        return self.dense_rank_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
}
/**
 * @brief DO class: A sql lateral view table source.
 */
schema SqlLateralViewTableSourceDO {
    @primary oid_: int,
    is_outer_: int,
    method_oid_: int,
    on_oid_: int,
    table_source_oid_: int
}
impl SqlLateralViewTableSourceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlLateralViewTableSourceDO {
    	for (tmp in db.sql_lateral_view_table_source) {
            yield SqlLateralViewTableSourceDO {
                oid_ : tmp.oid_,
                is_outer_ : tmp.is_outer_,
                method_oid_ : tmp.method_oid_,
                on_oid_ : tmp.on_oid_,
                table_source_oid_ : tmp.table_source_oid_
            }
    	}
    }
    /**
     * @brief gets the is outer of this element.
     * @return int
     */
    pub fn getIsOuter(self) -> int {
        return self.is_outer_
    }
    /**
     * @brief gets the method oid of this element.
     * @return int
     */
    pub fn getMethodOid(self) -> int {
        return self.method_oid_
    }
    /**
     * @brief gets the on oid of this element.
     * @return int
     */
    pub fn getOnOid(self) -> int {
        return self.on_oid_
    }
    /**
     * @brief gets the table source oid of this element.
     * @return int
     */
    pub fn getTableSourceOid(self) -> int {
        return self.table_source_oid_
    }
}
/**
 * @brief DO class: A sql limit.
 */
schema SqlLimitDO {
    @primary oid_: int,
    offset_oid_: int,
    row_count_oid_: int
}
impl SqlLimitDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlLimitDO {
    	for (tmp in db.sql_limit) {
            yield SqlLimitDO {
                oid_ : tmp.oid_,
                offset_oid_ : tmp.offset_oid_,
                row_count_oid_ : tmp.row_count_oid_
            }
    	}
    }
    /**
     * @brief gets the offset oid of this element.
     * @return int
     */
    pub fn getOffsetOid(self) -> int {
        return self.offset_oid_
    }
    /**
     * @brief gets the row count oid of this element.
     * @return int
     */
    pub fn getRowCountOid(self) -> int {
        return self.row_count_oid_
    }
}
/**
 * @brief DO class: A sql list expr.
 */
schema SqlListExprDO {
    @primary oid_: int
}
impl SqlListExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlListExprDO {
    	for (tmp in db.sql_list_expr) {
            yield SqlListExprDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql list resource group statement.
 */
schema SqlListResourceGroupStatementDO {
    @primary oid_: int
}
impl SqlListResourceGroupStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlListResourceGroupStatementDO {
    	for (tmp in db.sql_list_resource_group_statement) {
            yield SqlListResourceGroupStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql loop statement.
 */
schema SqlLoopStatementDO {
    @primary oid_: int,
    label_name_: string
}
impl SqlLoopStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlLoopStatementDO {
    	for (tmp in db.sql_loop_statement) {
            yield SqlLoopStatementDO {
                oid_ : tmp.oid_,
                label_name_ : tmp.label_name_
            }
    	}
    }
    /**
     * @brief gets the label name of this element.
     * @return string
     */
    pub fn getLabelName(self) -> string {
        return self.label_name_
    }
}
/**
 * @brief DO class: A sql map data type.
 */
schema SqlMapDataTypeDO {
    @primary oid_: int,
    is_int_: int,
    is_numberic_: int,
    is_string_: int,
    is_with_local_time_zone_: int,
    key_type_oid_: int,
    name_: string,
    value_type_oid_: int,
    with_time_zone_: int
}
impl SqlMapDataTypeDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlMapDataTypeDO {
    	for (tmp in db.sql_map_data_type) {
            yield SqlMapDataTypeDO {
                oid_ : tmp.oid_,
                is_int_ : tmp.is_int_,
                is_numberic_ : tmp.is_numberic_,
                is_string_ : tmp.is_string_,
                is_with_local_time_zone_ : tmp.is_with_local_time_zone_,
                key_type_oid_ : tmp.key_type_oid_,
                name_ : tmp.name_,
                value_type_oid_ : tmp.value_type_oid_,
                with_time_zone_ : tmp.with_time_zone_
            }
    	}
    }
    /**
     * @brief gets the is int of this element.
     * @return int
     */
    pub fn getIsInt(self) -> int {
        return self.is_int_
    }
    /**
     * @brief gets the is numberic of this element.
     * @return int
     */
    pub fn getIsNumberic(self) -> int {
        return self.is_numberic_
    }
    /**
     * @brief gets the is string of this element.
     * @return int
     */
    pub fn getIsString(self) -> int {
        return self.is_string_
    }
    /**
     * @brief gets the is with local time zone of this element.
     * @return int
     */
    pub fn getIsWithLocalTimeZone(self) -> int {
        return self.is_with_local_time_zone_
    }
    /**
     * @brief gets the key type oid of this element.
     * @return int
     */
    pub fn getKeyTypeOid(self) -> int {
        return self.key_type_oid_
    }
    /**
     * @brief gets the name of this element.
     * @return string
     */
    pub fn getName(self) -> string {
        return self.name_
    }
    /**
     * @brief gets the value type oid of this element.
     * @return int
     */
    pub fn getValueTypeOid(self) -> int {
        return self.value_type_oid_
    }
    /**
     * @brief gets the with time zone of this element.
     * @return int
     */
    pub fn getWithTimeZone(self) -> int {
        return self.with_time_zone_
    }
}
/**
 * @brief DO class: A sql match against expr.
 */
schema SqlMatchAgainstExprDO {
    @primary oid_: int,
    against_oid_: int,
    search_modifier_: string
}
impl SqlMatchAgainstExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlMatchAgainstExprDO {
    	for (tmp in db.sql_match_against_expr) {
            yield SqlMatchAgainstExprDO {
                oid_ : tmp.oid_,
                against_oid_ : tmp.against_oid_,
                search_modifier_ : tmp.search_modifier_
            }
    	}
    }
    /**
     * @brief gets the against oid of this element.
     * @return int
     */
    pub fn getAgainstOid(self) -> int {
        return self.against_oid_
    }
    /**
     * @brief gets the search modifier of this element.
     * @return string
     */
    pub fn getSearchModifier(self) -> string {
        return self.search_modifier_
    }
}
/**
 * @brief DO class: A sql merge statement.
 */
schema SqlMergeStatementDO {
    @primary oid_: int,
    alias_: string,
    error_logging_clause_oid_: int,
    insert_clause_: string,
    into_oid_: int,
    on_oid_: int,
    update_clause_: string,
    using_oid_: int
}
impl SqlMergeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlMergeStatementDO {
    	for (tmp in db.sql_merge_statement) {
            yield SqlMergeStatementDO {
                oid_ : tmp.oid_,
                alias_ : tmp.alias_,
                error_logging_clause_oid_ : tmp.error_logging_clause_oid_,
                insert_clause_ : tmp.insert_clause_,
                into_oid_ : tmp.into_oid_,
                on_oid_ : tmp.on_oid_,
                update_clause_ : tmp.update_clause_,
                using_oid_ : tmp.using_oid_
            }
    	}
    }
    /**
     * @brief gets the alias of this element.
     * @return string
     */
    pub fn getAlias(self) -> string {
        return self.alias_
    }
    /**
     * @brief gets the error logging clause oid of this element.
     * @return int
     */
    pub fn getErrorLoggingClauseOid(self) -> int {
        return self.error_logging_clause_oid_
    }
    /**
     * @brief gets the insert clause of this element.
     * @return string
     */
    pub fn getInsertClause(self) -> string {
        return self.insert_clause_
    }
    /**
     * @brief gets the into oid of this element.
     * @return int
     */
    pub fn getIntoOid(self) -> int {
        return self.into_oid_
    }
    /**
     * @brief gets the on oid of this element.
     * @return int
     */
    pub fn getOnOid(self) -> int {
        return self.on_oid_
    }
    /**
     * @brief gets the update clause of this element.
     * @return string
     */
    pub fn getUpdateClause(self) -> string {
        return self.update_clause_
    }
    /**
     * @brief gets the using oid of this element.
     * @return int
     */
    pub fn getUsingOid(self) -> int {
        return self.using_oid_
    }
}
/**
 * @brief DO class: A sql method invoke expr.
 */
schema SqlMethodInvokeExprDO {
    @primary oid_: int,
    for_oid_: int,
    from_oid_: int,
    method_name_: string,
    owner_oid_: int,
    resolved_return_data_type_oid_: int,
    trim_option_: string,
    using_oid_: int
}
impl SqlMethodInvokeExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlMethodInvokeExprDO {
    	for (tmp in db.sql_method_invoke_expr) {
            yield SqlMethodInvokeExprDO {
                oid_ : tmp.oid_,
                for_oid_ : tmp.for_oid_,
                from_oid_ : tmp.from_oid_,
                method_name_ : tmp.method_name_,
                owner_oid_ : tmp.owner_oid_,
                resolved_return_data_type_oid_ : tmp.resolved_return_data_type_oid_,
                trim_option_ : tmp.trim_option_,
                using_oid_ : tmp.using_oid_
            }
    	}
    }
    /**
     * @brief gets the for oid of this element.
     * @return int
     */
    pub fn getForOid(self) -> int {
        return self.for_oid_
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the method name of this element.
     * @return string
     */
    pub fn getMethodName(self) -> string {
        return self.method_name_
    }
    /**
     * @brief gets the owner oid of this element.
     * @return int
     */
    pub fn getOwnerOid(self) -> int {
        return self.owner_oid_
    }
    /**
     * @brief gets the resolved return data type oid of this element.
     * @return int
     */
    pub fn getResolvedReturnDataTypeOid(self) -> int {
        return self.resolved_return_data_type_oid_
    }
    /**
     * @brief gets the trim option of this element.
     * @return string
     */
    pub fn getTrimOption(self) -> string {
        return self.trim_option_
    }
    /**
     * @brief gets the using oid of this element.
     * @return int
     */
    pub fn getUsingOid(self) -> int {
        return self.using_oid_
    }
}
/**
 * @brief DO class: A sql not expr.
 */
schema SqlNotExprDO {
    @primary oid_: int,
    expr_oid_: int
}
impl SqlNotExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlNotExprDO {
    	for (tmp in db.sql_not_expr) {
            yield SqlNotExprDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
}
/**
 * @brief DO class: A sql not null constraint.
 */
schema SqlNotNullConstraintDO {
    @primary oid_: int
}
impl SqlNotNullConstraintDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlNotNullConstraintDO {
    	for (tmp in db.sql_not_null_constraint) {
            yield SqlNotNullConstraintDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql null constraint.
 */
schema SqlNullConstraintDO {
    @primary oid_: int
}
impl SqlNullConstraintDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlNullConstraintDO {
    	for (tmp in db.sql_null_constraint) {
            yield SqlNullConstraintDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql null expr.
 */
schema SqlNullExprDO {
    @primary oid_: int,
    value_: string
}
impl SqlNullExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlNullExprDO {
    	for (tmp in db.sql_null_expr) {
            yield SqlNullExprDO {
                oid_ : tmp.oid_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql number expr.
 */
schema SqlNumberExprDO {
    @primary oid_: int,
    literal_: string,
    number_: string,
    value_: string
}
impl SqlNumberExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlNumberExprDO {
    	for (tmp in db.sql_number_expr) {
            yield SqlNumberExprDO {
                oid_ : tmp.oid_,
                literal_ : tmp.literal_,
                number_ : tmp.number_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the literal of this element.
     * @return string
     */
    pub fn getLiteral(self) -> string {
        return self.literal_
    }
    /**
     * @brief gets the number of this element.
     * @return string
     */
    pub fn getNumber(self) -> string {
        return self.number_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql numeric literal expr.
 */
schema SqlNumericLiteralExprDO {
    @primary oid_: int
}
impl SqlNumericLiteralExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlNumericLiteralExprDO {
    	for (tmp in db.sql_numeric_literal_expr) {
            yield SqlNumericLiteralExprDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql object.
 */
schema SqlObjectDO {
    @primary oid_: int,
    parent_oid_: int,
    location_oid_: int,
    node_type_: string,
    index_in_parent_: int,
    after_comments_direct_: string,
    before_comments_direct_: string,
    db_type_: string,
    printable_text: string
}
impl SqlObjectDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlObjectDO {
    	for (tmp in db.sql_object) {
            yield SqlObjectDO {
                oid_ : tmp.oid_,
                parent_oid_ : tmp.parent_oid_,
                location_oid_ : tmp.location_oid_,
                node_type_ : tmp.node_type_,
                index_in_parent_ : tmp.index_in_parent_,
                after_comments_direct_ : tmp.after_comments_direct_,
                before_comments_direct_ : tmp.before_comments_direct_,
                db_type_ : tmp.db_type_,
                printable_text : tmp.printable_text
            }
    	}
    }
    /**
     * @brief gets the parent oid of this element.
     * @return int
     */
    pub fn getParentOid(self) -> int {
        return self.parent_oid_
    }
    /**
     * @brief gets the location oid of this element.
     * @return int
     */
    pub fn getLocationOid(self) -> int {
        return self.location_oid_
    }
    /**
     * @brief gets the node type of this element.
     * @return string
     */
    pub fn getNodeType(self) -> string {
        return self.node_type_
    }
    /**
     * @brief gets the index in parent of this element.
     * @return int
     */
    pub fn getIndexInParent(self) -> int {
        return self.index_in_parent_
    }
    /**
     * @brief gets the after comments direct of this element.
     * @return string
     */
    pub fn getAfterCommentsDirect(self) -> string {
        return self.after_comments_direct_
    }
    /**
     * @brief gets the before comments direct of this element.
     * @return string
     */
    pub fn getBeforeCommentsDirect(self) -> string {
        return self.before_comments_direct_
    }
    /**
     * @brief gets the db type of this element.
     * @return string
     */
    pub fn getDbType(self) -> string {
        return self.db_type_
    }
    /**
     * @brief gets a printed representation of this element, including its structure where applicable.
     * @return string.
     */
    pub fn getPrintableText(self) -> string {
        return self.printable_text
    }
}
/**
 * @brief DO class: A sql open statement.
 */
schema SqlOpenStatementDO {
    @primary oid_: int,
    cursor_name_oid_: int,
    for_oid_: int
}
impl SqlOpenStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlOpenStatementDO {
    	for (tmp in db.sql_open_statement) {
            yield SqlOpenStatementDO {
                oid_ : tmp.oid_,
                cursor_name_oid_ : tmp.cursor_name_oid_,
                for_oid_ : tmp.for_oid_
            }
    	}
    }
    /**
     * @brief gets the cursor name oid of this element.
     * @return int
     */
    pub fn getCursorNameOid(self) -> int {
        return self.cursor_name_oid_
    }
    /**
     * @brief gets the for oid of this element.
     * @return int
     */
    pub fn getForOid(self) -> int {
        return self.for_oid_
    }
}
/**
 * @brief DO class: A sql optimize statement.
 */
schema SqlOptimizeStatementDO {
    @primary oid_: int,
    cluster_oid_: int,
    deduplicate_by_oid_: int,
    is_deduplicate_: int,
    is_final_: int
}
impl SqlOptimizeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlOptimizeStatementDO {
    	for (tmp in db.sql_optimize_statement) {
            yield SqlOptimizeStatementDO {
                oid_ : tmp.oid_,
                cluster_oid_ : tmp.cluster_oid_,
                deduplicate_by_oid_ : tmp.deduplicate_by_oid_,
                is_deduplicate_ : tmp.is_deduplicate_,
                is_final_ : tmp.is_final_
            }
    	}
    }
    /**
     * @brief gets the cluster oid of this element.
     * @return int
     */
    pub fn getClusterOid(self) -> int {
        return self.cluster_oid_
    }
    /**
     * @brief gets the deduplicate by oid of this element.
     * @return int
     */
    pub fn getDeduplicateByOid(self) -> int {
        return self.deduplicate_by_oid_
    }
    /**
     * @brief gets the is deduplicate of this element.
     * @return int
     */
    pub fn getIsDeduplicate(self) -> int {
        return self.is_deduplicate_
    }
    /**
     * @brief gets the is final of this element.
     * @return int
     */
    pub fn getIsFinal(self) -> int {
        return self.is_final_
    }
}
/**
 * @brief DO class: A sql order by.
 */
schema SqlOrderByDO {
    @primary oid_: int,
    is_siblings_: int
}
impl SqlOrderByDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlOrderByDO {
    	for (tmp in db.sql_order_by) {
            yield SqlOrderByDO {
                oid_ : tmp.oid_,
                is_siblings_ : tmp.is_siblings_
            }
    	}
    }
    /**
     * @brief gets the is siblings of this element.
     * @return int
     */
    pub fn getIsSiblings(self) -> int {
        return self.is_siblings_
    }
}
/**
 * @brief DO class: A sql over.
 */
schema SqlOverDO {
    @primary oid_: int,
    cluster_by_oid_: int,
    distribute_by_oid_: int,
    is_exclude_current_row_: int,
    is_windowing_between_end_following_: int,
    is_windowing_between_end_preceding_: int,
    is_windowing_preceding_: int,
    of_oid_: int,
    order_by_oid_: int,
    sort_by_oid_: int,
    windowing_between_begin_oid_: int,
    windowing_between_begin_bound_: string,
    windowing_between_end_oid_: int,
    windowing_between_end_bound_: string,
    windowing_type_: string
}
impl SqlOverDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlOverDO {
    	for (tmp in db.sql_over) {
            yield SqlOverDO {
                oid_ : tmp.oid_,
                cluster_by_oid_ : tmp.cluster_by_oid_,
                distribute_by_oid_ : tmp.distribute_by_oid_,
                is_exclude_current_row_ : tmp.is_exclude_current_row_,
                is_windowing_between_end_following_ : tmp.is_windowing_between_end_following_,
                is_windowing_between_end_preceding_ : tmp.is_windowing_between_end_preceding_,
                is_windowing_preceding_ : tmp.is_windowing_preceding_,
                of_oid_ : tmp.of_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                sort_by_oid_ : tmp.sort_by_oid_,
                windowing_between_begin_oid_ : tmp.windowing_between_begin_oid_,
                windowing_between_begin_bound_ : tmp.windowing_between_begin_bound_,
                windowing_between_end_oid_ : tmp.windowing_between_end_oid_,
                windowing_between_end_bound_ : tmp.windowing_between_end_bound_,
                windowing_type_ : tmp.windowing_type_
            }
    	}
    }
    /**
     * @brief gets the cluster by oid of this element.
     * @return int
     */
    pub fn getClusterByOid(self) -> int {
        return self.cluster_by_oid_
    }
    /**
     * @brief gets the distribute by oid of this element.
     * @return int
     */
    pub fn getDistributeByOid(self) -> int {
        return self.distribute_by_oid_
    }
    /**
     * @brief gets the is exclude current row of this element.
     * @return int
     */
    pub fn getIsExcludeCurrentRow(self) -> int {
        return self.is_exclude_current_row_
    }
    /**
     * @brief gets the is windowing between end following of this element.
     * @return int
     */
    pub fn getIsWindowingBetweenEndFollowing(self) -> int {
        return self.is_windowing_between_end_following_
    }
    /**
     * @brief gets the is windowing between end preceding of this element.
     * @return int
     */
    pub fn getIsWindowingBetweenEndPreceding(self) -> int {
        return self.is_windowing_between_end_preceding_
    }
    /**
     * @brief gets the is windowing preceding of this element.
     * @return int
     */
    pub fn getIsWindowingPreceding(self) -> int {
        return self.is_windowing_preceding_
    }
    /**
     * @brief gets the of oid of this element.
     * @return int
     */
    pub fn getOfOid(self) -> int {
        return self.of_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the sort by oid of this element.
     * @return int
     */
    pub fn getSortByOid(self) -> int {
        return self.sort_by_oid_
    }
    /**
     * @brief gets the windowing between begin oid of this element.
     * @return int
     */
    pub fn getWindowingBetweenBeginOid(self) -> int {
        return self.windowing_between_begin_oid_
    }
    /**
     * @brief gets the windowing between begin bound of this element.
     * @return string
     */
    pub fn getWindowingBetweenBeginBound(self) -> string {
        return self.windowing_between_begin_bound_
    }
    /**
     * @brief gets the windowing between end oid of this element.
     * @return int
     */
    pub fn getWindowingBetweenEndOid(self) -> int {
        return self.windowing_between_end_oid_
    }
    /**
     * @brief gets the windowing between end bound of this element.
     * @return string
     */
    pub fn getWindowingBetweenEndBound(self) -> string {
        return self.windowing_between_end_bound_
    }
    /**
     * @brief gets the windowing type of this element.
     * @return string
     */
    pub fn getWindowingType(self) -> string {
        return self.windowing_type_
    }
}
/**
 * @brief DO class: A sql parameter.
 */
schema SqlParameterDO {
    @primary oid_: int,
    cursor_name_oid_: int,
    data_type_oid_: int,
    default_value_oid_: int,
    is_constant_: int,
    is_map_: int,
    is_member_: int,
    is_no_copy_: int,
    is_order_: int,
    name_oid_: int,
    param_type_: string
}
impl SqlParameterDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlParameterDO {
    	for (tmp in db.sql_parameter) {
            yield SqlParameterDO {
                oid_ : tmp.oid_,
                cursor_name_oid_ : tmp.cursor_name_oid_,
                data_type_oid_ : tmp.data_type_oid_,
                default_value_oid_ : tmp.default_value_oid_,
                is_constant_ : tmp.is_constant_,
                is_map_ : tmp.is_map_,
                is_member_ : tmp.is_member_,
                is_no_copy_ : tmp.is_no_copy_,
                is_order_ : tmp.is_order_,
                name_oid_ : tmp.name_oid_,
                param_type_ : tmp.param_type_
            }
    	}
    }
    /**
     * @brief gets the cursor name oid of this element.
     * @return int
     */
    pub fn getCursorNameOid(self) -> int {
        return self.cursor_name_oid_
    }
    /**
     * @brief gets the data type oid of this element.
     * @return int
     */
    pub fn getDataTypeOid(self) -> int {
        return self.data_type_oid_
    }
    /**
     * @brief gets the default value oid of this element.
     * @return int
     */
    pub fn getDefaultValueOid(self) -> int {
        return self.default_value_oid_
    }
    /**
     * @brief gets the is constant of this element.
     * @return int
     */
    pub fn getIsConstant(self) -> int {
        return self.is_constant_
    }
    /**
     * @brief gets the is map of this element.
     * @return int
     */
    pub fn getIsMap(self) -> int {
        return self.is_map_
    }
    /**
     * @brief gets the is member of this element.
     * @return int
     */
    pub fn getIsMember(self) -> int {
        return self.is_member_
    }
    /**
     * @brief gets the is no copy of this element.
     * @return int
     */
    pub fn getIsNoCopy(self) -> int {
        return self.is_no_copy_
    }
    /**
     * @brief gets the is order of this element.
     * @return int
     */
    pub fn getIsOrder(self) -> int {
        return self.is_order_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the param type of this element.
     * @return string
     */
    pub fn getParamType(self) -> string {
        return self.param_type_
    }
}
/**
 * @brief DO class: A sql partition.
 */
schema SqlPartitionDO {
    @primary oid_: int,
    comment_oid_: int,
    data_directory_oid_: int,
    engine_oid_: int,
    index_directory_oid_: int,
    is_segment_creation_deferred_: int,
    is_segment_creation_immediate_: int,
    lob_storage_: string,
    locality_oid_: int,
    max_rows_oid_: int,
    min_rows_oid_: int,
    name_oid_: int,
    sub_partitions_count_oid_: int,
    values_oid_: int
}
impl SqlPartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPartitionDO {
    	for (tmp in db.sql_partition) {
            yield SqlPartitionDO {
                oid_ : tmp.oid_,
                comment_oid_ : tmp.comment_oid_,
                data_directory_oid_ : tmp.data_directory_oid_,
                engine_oid_ : tmp.engine_oid_,
                index_directory_oid_ : tmp.index_directory_oid_,
                is_segment_creation_deferred_ : tmp.is_segment_creation_deferred_,
                is_segment_creation_immediate_ : tmp.is_segment_creation_immediate_,
                lob_storage_ : tmp.lob_storage_,
                locality_oid_ : tmp.locality_oid_,
                max_rows_oid_ : tmp.max_rows_oid_,
                min_rows_oid_ : tmp.min_rows_oid_,
                name_oid_ : tmp.name_oid_,
                sub_partitions_count_oid_ : tmp.sub_partitions_count_oid_,
                values_oid_ : tmp.values_oid_
            }
    	}
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the data directory oid of this element.
     * @return int
     */
    pub fn getDataDirectoryOid(self) -> int {
        return self.data_directory_oid_
    }
    /**
     * @brief gets the engine oid of this element.
     * @return int
     */
    pub fn getEngineOid(self) -> int {
        return self.engine_oid_
    }
    /**
     * @brief gets the index directory oid of this element.
     * @return int
     */
    pub fn getIndexDirectoryOid(self) -> int {
        return self.index_directory_oid_
    }
    /**
     * @brief gets the is segment creation deferred of this element.
     * @return int
     */
    pub fn getIsSegmentCreationDeferred(self) -> int {
        return self.is_segment_creation_deferred_
    }
    /**
     * @brief gets the is segment creation immediate of this element.
     * @return int
     */
    pub fn getIsSegmentCreationImmediate(self) -> int {
        return self.is_segment_creation_immediate_
    }
    /**
     * @brief gets the lob storage of this element.
     * @return string
     */
    pub fn getLobStorage(self) -> string {
        return self.lob_storage_
    }
    /**
     * @brief gets the locality oid of this element.
     * @return int
     */
    pub fn getLocalityOid(self) -> int {
        return self.locality_oid_
    }
    /**
     * @brief gets the max rows oid of this element.
     * @return int
     */
    pub fn getMaxRowsOid(self) -> int {
        return self.max_rows_oid_
    }
    /**
     * @brief gets the min rows oid of this element.
     * @return int
     */
    pub fn getMinRowsOid(self) -> int {
        return self.min_rows_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the sub partitions count oid of this element.
     * @return int
     */
    pub fn getSubPartitionsCountOid(self) -> int {
        return self.sub_partitions_count_oid_
    }
    /**
     * @brief gets the values oid of this element.
     * @return int
     */
    pub fn getValuesOid(self) -> int {
        return self.values_oid_
    }
}
/**
 * @brief DO class: A sql partition by.
 */
schema SqlPartitionByDO {
    @primary oid_: int,
    is_linear_: int,
    lifecycle_oid_: int,
    partitions_count_oid_: int,
    sub_partition_by_oid_: int
}
impl SqlPartitionByDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPartitionByDO {
    	for (tmp in db.sql_partition_by) {
            yield SqlPartitionByDO {
                oid_ : tmp.oid_,
                is_linear_ : tmp.is_linear_,
                lifecycle_oid_ : tmp.lifecycle_oid_,
                partitions_count_oid_ : tmp.partitions_count_oid_,
                sub_partition_by_oid_ : tmp.sub_partition_by_oid_
            }
    	}
    }
    /**
     * @brief gets the is linear of this element.
     * @return int
     */
    pub fn getIsLinear(self) -> int {
        return self.is_linear_
    }
    /**
     * @brief gets the lifecycle oid of this element.
     * @return int
     */
    pub fn getLifecycleOid(self) -> int {
        return self.lifecycle_oid_
    }
    /**
     * @brief gets the partitions count oid of this element.
     * @return int
     */
    pub fn getPartitionsCountOid(self) -> int {
        return self.partitions_count_oid_
    }
    /**
     * @brief gets the sub partition by oid of this element.
     * @return int
     */
    pub fn getSubPartitionByOid(self) -> int {
        return self.sub_partition_by_oid_
    }
}
/**
 * @brief DO class: A sql partition by hash.
 */
schema SqlPartitionByHashDO {
    @primary oid_: int,
    is_key_: int,
    is_unique_: int
}
impl SqlPartitionByHashDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPartitionByHashDO {
    	for (tmp in db.sql_partition_by_hash) {
            yield SqlPartitionByHashDO {
                oid_ : tmp.oid_,
                is_key_ : tmp.is_key_,
                is_unique_ : tmp.is_unique_
            }
    	}
    }
    /**
     * @brief gets the is key of this element.
     * @return int
     */
    pub fn getIsKey(self) -> int {
        return self.is_key_
    }
    /**
     * @brief gets the is unique of this element.
     * @return int
     */
    pub fn getIsUnique(self) -> int {
        return self.is_unique_
    }
}
/**
 * @brief DO class: A sql partition by list.
 */
schema SqlPartitionByListDO {
    @primary oid_: int
}
impl SqlPartitionByListDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPartitionByListDO {
    	for (tmp in db.sql_partition_by_list) {
            yield SqlPartitionByListDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql partition by range.
 */
schema SqlPartitionByRangeDO {
    @primary oid_: int,
    expire_after_oid_: int,
    interval_oid_: int,
    is_columns_: int,
    is_disable_schedule_: int,
    pivot_date_expr_oid_: int,
    pre_allocate_oid_: int,
    start_with_oid_: int
}
impl SqlPartitionByRangeDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPartitionByRangeDO {
    	for (tmp in db.sql_partition_by_range) {
            yield SqlPartitionByRangeDO {
                oid_ : tmp.oid_,
                expire_after_oid_ : tmp.expire_after_oid_,
                interval_oid_ : tmp.interval_oid_,
                is_columns_ : tmp.is_columns_,
                is_disable_schedule_ : tmp.is_disable_schedule_,
                pivot_date_expr_oid_ : tmp.pivot_date_expr_oid_,
                pre_allocate_oid_ : tmp.pre_allocate_oid_,
                start_with_oid_ : tmp.start_with_oid_
            }
    	}
    }
    /**
     * @brief gets the expire after oid of this element.
     * @return int
     */
    pub fn getExpireAfterOid(self) -> int {
        return self.expire_after_oid_
    }
    /**
     * @brief gets the interval oid of this element.
     * @return int
     */
    pub fn getIntervalOid(self) -> int {
        return self.interval_oid_
    }
    /**
     * @brief gets the is columns of this element.
     * @return int
     */
    pub fn getIsColumns(self) -> int {
        return self.is_columns_
    }
    /**
     * @brief gets the is disable schedule of this element.
     * @return int
     */
    pub fn getIsDisableSchedule(self) -> int {
        return self.is_disable_schedule_
    }
    /**
     * @brief gets the pivot date expr oid of this element.
     * @return int
     */
    pub fn getPivotDateExprOid(self) -> int {
        return self.pivot_date_expr_oid_
    }
    /**
     * @brief gets the pre allocate oid of this element.
     * @return int
     */
    pub fn getPreAllocateOid(self) -> int {
        return self.pre_allocate_oid_
    }
    /**
     * @brief gets the start with oid of this element.
     * @return int
     */
    pub fn getStartWithOid(self) -> int {
        return self.start_with_oid_
    }
}
/**
 * @brief DO class: A sql partition by value.
 */
schema SqlPartitionByValueDO {
    @primary oid_: int
}
impl SqlPartitionByValueDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPartitionByValueDO {
    	for (tmp in db.sql_partition_by_value) {
            yield SqlPartitionByValueDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql partition ref.
 */
schema SqlPartitionRefDO {
    @primary oid_: int,
    items_: string
}
impl SqlPartitionRefDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPartitionRefDO {
    	for (tmp in db.sql_partition_ref) {
            yield SqlPartitionRefDO {
                oid_ : tmp.oid_,
                items_ : tmp.items_
            }
    	}
    }
    /**
     * @brief gets the items of this element.
     * @return string
     */
    pub fn getItems(self) -> string {
        return self.items_
    }
}
/**
 * @brief DO class: A sql partition spec.
 */
schema SqlPartitionSpecDO {
    @primary oid_: int,
    items_: string
}
impl SqlPartitionSpecDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPartitionSpecDO {
    	for (tmp in db.sql_partition_spec) {
            yield SqlPartitionSpecDO {
                oid_ : tmp.oid_,
                items_ : tmp.items_
            }
    	}
    }
    /**
     * @brief gets the items of this element.
     * @return string
     */
    pub fn getItems(self) -> string {
        return self.items_
    }
}
/**
 * @brief DO class: A sql partition value.
 */
schema SqlPartitionValueDO {
    @primary oid_: int,
    operator_: string
}
impl SqlPartitionValueDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPartitionValueDO {
    	for (tmp in db.sql_partition_value) {
            yield SqlPartitionValueDO {
                oid_ : tmp.oid_,
                operator_ : tmp.operator_
            }
    	}
    }
    /**
     * @brief gets the operator of this element.
     * @return string
     */
    pub fn getOperator(self) -> string {
        return self.operator_
    }
}
/**
 * @brief DO class: A sql primary key impl.
 */
schema SqlPrimaryKeyImplDO {
    @primary oid_: int,
    is_clustered_: int,
    is_disable_novalidate_: int
}
impl SqlPrimaryKeyImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPrimaryKeyImplDO {
    	for (tmp in db.sql_primary_key_impl) {
            yield SqlPrimaryKeyImplDO {
                oid_ : tmp.oid_,
                is_clustered_ : tmp.is_clustered_,
                is_disable_novalidate_ : tmp.is_disable_novalidate_
            }
    	}
    }
    /**
     * @brief gets the is clustered of this element.
     * @return int
     */
    pub fn getIsClustered(self) -> int {
        return self.is_clustered_
    }
    /**
     * @brief gets the is disable novalidate of this element.
     * @return int
     */
    pub fn getIsDisableNovalidate(self) -> int {
        return self.is_disable_novalidate_
    }
}
/**
 * @brief DO class: A sql privilege item.
 */
schema SqlPrivilegeItemDO {
    @primary oid_: int,
    action_oid_: int
}
impl SqlPrivilegeItemDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPrivilegeItemDO {
    	for (tmp in db.sql_privilege_item) {
            yield SqlPrivilegeItemDO {
                oid_ : tmp.oid_,
                action_oid_ : tmp.action_oid_
            }
    	}
    }
    /**
     * @brief gets the action oid of this element.
     * @return int
     */
    pub fn getActionOid(self) -> int {
        return self.action_oid_
    }
}
/**
 * @brief DO class: A sql privilege statement.
 */
schema SqlPrivilegeStatementDO {
    @primary oid_: int,
    resource_: string,
    resource_type_: string
}
impl SqlPrivilegeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPrivilegeStatementDO {
    	for (tmp in db.sql_privilege_statement) {
            yield SqlPrivilegeStatementDO {
                oid_ : tmp.oid_,
                resource_ : tmp.resource_,
                resource_type_ : tmp.resource_type_
            }
    	}
    }
    /**
     * @brief gets the resource of this element.
     * @return string
     */
    pub fn getResource(self) -> string {
        return self.resource_
    }
    /**
     * @brief gets the resource type of this element.
     * @return string
     */
    pub fn getResourceType(self) -> string {
        return self.resource_type_
    }
}
/**
 * @brief DO class: A sql property expr.
 */
schema SqlPropertyExprDO {
    @primary oid_: int,
    name_: string,
    owner_oid_: int,
    owner_name_: string,
    resolved_column_oid_: int,
    resolved_owner_object_: string,
    resolved_procudure_oid_: int,
    resolved_table_source_oid_: int,
    simple_name_: string
}
impl SqlPropertyExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPropertyExprDO {
    	for (tmp in db.sql_property_expr) {
            yield SqlPropertyExprDO {
                oid_ : tmp.oid_,
                name_ : tmp.name_,
                owner_oid_ : tmp.owner_oid_,
                owner_name_ : tmp.owner_name_,
                resolved_column_oid_ : tmp.resolved_column_oid_,
                resolved_owner_object_ : tmp.resolved_owner_object_,
                resolved_procudure_oid_ : tmp.resolved_procudure_oid_,
                resolved_table_source_oid_ : tmp.resolved_table_source_oid_,
                simple_name_ : tmp.simple_name_
            }
    	}
    }
    /**
     * @brief gets the name of this element.
     * @return string
     */
    pub fn getName(self) -> string {
        return self.name_
    }
    /**
     * @brief gets the owner oid of this element.
     * @return int
     */
    pub fn getOwnerOid(self) -> int {
        return self.owner_oid_
    }
    /**
     * @brief gets the owner name of this element.
     * @return string
     */
    pub fn getOwnerName(self) -> string {
        return self.owner_name_
    }
    /**
     * @brief gets the resolved column oid of this element.
     * @return int
     */
    pub fn getResolvedColumnOid(self) -> int {
        return self.resolved_column_oid_
    }
    /**
     * @brief gets the resolved owner object of this element.
     * @return string
     */
    pub fn getResolvedOwnerObject(self) -> string {
        return self.resolved_owner_object_
    }
    /**
     * @brief gets the resolved procudure oid of this element.
     * @return int
     */
    pub fn getResolvedProcudureOid(self) -> int {
        return self.resolved_procudure_oid_
    }
    /**
     * @brief gets the resolved table source oid of this element.
     * @return int
     */
    pub fn getResolvedTableSourceOid(self) -> int {
        return self.resolved_table_source_oid_
    }
    /**
     * @brief gets the simple name of this element.
     * @return string
     */
    pub fn getSimpleName(self) -> string {
        return self.simple_name_
    }
}
/**
 * @brief DO class: A sql purge logs statement.
 */
schema SqlPurgeLogsStatementDO {
    @primary oid_: int,
    before_oid_: int,
    is_all_: int,
    is_binary_: int,
    is_master_: int,
    to_oid_: int
}
impl SqlPurgeLogsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPurgeLogsStatementDO {
    	for (tmp in db.sql_purge_logs_statement) {
            yield SqlPurgeLogsStatementDO {
                oid_ : tmp.oid_,
                before_oid_ : tmp.before_oid_,
                is_all_ : tmp.is_all_,
                is_binary_ : tmp.is_binary_,
                is_master_ : tmp.is_master_,
                to_oid_ : tmp.to_oid_
            }
    	}
    }
    /**
     * @brief gets the before oid of this element.
     * @return int
     */
    pub fn getBeforeOid(self) -> int {
        return self.before_oid_
    }
    /**
     * @brief gets the is all of this element.
     * @return int
     */
    pub fn getIsAll(self) -> int {
        return self.is_all_
    }
    /**
     * @brief gets the is binary of this element.
     * @return int
     */
    pub fn getIsBinary(self) -> int {
        return self.is_binary_
    }
    /**
     * @brief gets the is master of this element.
     * @return int
     */
    pub fn getIsMaster(self) -> int {
        return self.is_master_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
}
/**
 * @brief DO class: A sql purge recyclebin statement.
 */
schema SqlPurgeRecyclebinStatementDO {
    @primary oid_: int
}
impl SqlPurgeRecyclebinStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPurgeRecyclebinStatementDO {
    	for (tmp in db.sql_purge_recyclebin_statement) {
            yield SqlPurgeRecyclebinStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql purge table statement.
 */
schema SqlPurgeTableStatementDO {
    @primary oid_: int,
    count_: int,
    is_all_: int,
    table_oid_: int
}
impl SqlPurgeTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPurgeTableStatementDO {
    	for (tmp in db.sql_purge_table_statement) {
            yield SqlPurgeTableStatementDO {
                oid_ : tmp.oid_,
                count_ : tmp.count_,
                is_all_ : tmp.is_all_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the count of this element.
     * @return int
     */
    pub fn getCount(self) -> int {
        return self.count_
    }
    /**
     * @brief gets the is all of this element.
     * @return int
     */
    pub fn getIsAll(self) -> int {
        return self.is_all_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: A sql purge temporary output statement.
 */
schema SqlPurgeTemporaryOutputStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl SqlPurgeTemporaryOutputStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlPurgeTemporaryOutputStatementDO {
    	for (tmp in db.sql_purge_temporary_output_statement) {
            yield SqlPurgeTemporaryOutputStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql query expr.
 */
schema SqlQueryExprDO {
    @primary oid_: int,
    sub_query_oid_: int
}
impl SqlQueryExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlQueryExprDO {
    	for (tmp in db.sql_query_expr) {
            yield SqlQueryExprDO {
                oid_ : tmp.oid_,
                sub_query_oid_ : tmp.sub_query_oid_
            }
    	}
    }
    /**
     * @brief gets the sub query oid of this element.
     * @return int
     */
    pub fn getSubQueryOid(self) -> int {
        return self.sub_query_oid_
    }
}
/**
 * @brief DO class: A sql real expr.
 */
schema SqlRealExprDO {
    @primary oid_: int,
    number_: string,
    value_: string
}
impl SqlRealExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlRealExprDO {
    	for (tmp in db.sql_real_expr) {
            yield SqlRealExprDO {
                oid_ : tmp.oid_,
                number_ : tmp.number_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the number of this element.
     * @return string
     */
    pub fn getNumber(self) -> string {
        return self.number_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql record data type.
 */
schema SqlRecordDataTypeDO {
    @primary oid_: int
}
impl SqlRecordDataTypeDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlRecordDataTypeDO {
    	for (tmp in db.sql_record_data_type) {
            yield SqlRecordDataTypeDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql refresh materialized view statement.
 */
schema SqlRefreshMaterializedViewStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl SqlRefreshMaterializedViewStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlRefreshMaterializedViewStatementDO {
    	for (tmp in db.sql_refresh_materialized_view_statement) {
            yield SqlRefreshMaterializedViewStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql release save point statement.
 */
schema SqlReleaseSavePointStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl SqlReleaseSavePointStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlReleaseSavePointStatementDO {
    	for (tmp in db.sql_release_save_point_statement) {
            yield SqlReleaseSavePointStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql rename user statement.
 */
schema SqlRenameUserStatementDO {
    @primary oid_: int,
    name_oid_: int,
    to_oid_: int
}
impl SqlRenameUserStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlRenameUserStatementDO {
    	for (tmp in db.sql_rename_user_statement) {
            yield SqlRenameUserStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_,
                to_oid_ : tmp.to_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
}
/**
 * @brief DO class: A sql replace statement.
 */
schema SqlReplaceStatementDO {
    @primary oid_: int,
    hints_size_: int,
    is_delayed_: int,
    is_low_priority_: int,
    query_oid_: int,
    table_name_oid_: int,
    table_source_oid_: int,
    values_list_: string
}
impl SqlReplaceStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlReplaceStatementDO {
    	for (tmp in db.sql_replace_statement) {
            yield SqlReplaceStatementDO {
                oid_ : tmp.oid_,
                hints_size_ : tmp.hints_size_,
                is_delayed_ : tmp.is_delayed_,
                is_low_priority_ : tmp.is_low_priority_,
                query_oid_ : tmp.query_oid_,
                table_name_oid_ : tmp.table_name_oid_,
                table_source_oid_ : tmp.table_source_oid_,
                values_list_ : tmp.values_list_
            }
    	}
    }
    /**
     * @brief gets the hints size of this element.
     * @return int
     */
    pub fn getHintsSize(self) -> int {
        return self.hints_size_
    }
    /**
     * @brief gets the is delayed of this element.
     * @return int
     */
    pub fn getIsDelayed(self) -> int {
        return self.is_delayed_
    }
    /**
     * @brief gets the is low priority of this element.
     * @return int
     */
    pub fn getIsLowPriority(self) -> int {
        return self.is_low_priority_
    }
    /**
     * @brief gets the query oid of this element.
     * @return int
     */
    pub fn getQueryOid(self) -> int {
        return self.query_oid_
    }
    /**
     * @brief gets the table name oid of this element.
     * @return int
     */
    pub fn getTableNameOid(self) -> int {
        return self.table_name_oid_
    }
    /**
     * @brief gets the table source oid of this element.
     * @return int
     */
    pub fn getTableSourceOid(self) -> int {
        return self.table_source_oid_
    }
    /**
     * @brief gets the values list of this element.
     * @return string
     */
    pub fn getValuesList(self) -> string {
        return self.values_list_
    }
}
/**
 * @brief DO class: A sql restore statement.
 */
schema SqlRestoreStatementDO {
    @primary oid_: int,
    type_oid_: int
}
impl SqlRestoreStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlRestoreStatementDO {
    	for (tmp in db.sql_restore_statement) {
            yield SqlRestoreStatementDO {
                oid_ : tmp.oid_,
                type_oid_ : tmp.type_oid_
            }
    	}
    }
    /**
     * @brief gets the type oid of this element.
     * @return int
     */
    pub fn getTypeOid(self) -> int {
        return self.type_oid_
    }
}
/**
 * @brief DO class: A sql return statement.
 */
schema SqlReturnStatementDO {
    @primary oid_: int,
    expr_oid_: int
}
impl SqlReturnStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlReturnStatementDO {
    	for (tmp in db.sql_return_statement) {
            yield SqlReturnStatementDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
}
/**
 * @brief DO class: A sql revoke statement.
 */
schema SqlRevokeStatementDO {
    @primary oid_: int,
    is_grant_option_: int
}
impl SqlRevokeStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlRevokeStatementDO {
    	for (tmp in db.sql_revoke_statement) {
            yield SqlRevokeStatementDO {
                oid_ : tmp.oid_,
                is_grant_option_ : tmp.is_grant_option_
            }
    	}
    }
    /**
     * @brief gets the is grant option of this element.
     * @return int
     */
    pub fn getIsGrantOption(self) -> int {
        return self.is_grant_option_
    }
}
/**
 * @brief DO class: A sql rollback statement.
 */
schema SqlRollbackStatementDO {
    @primary oid_: int,
    chain_: int,
    force_oid_: int,
    release_: int,
    to_oid_: int
}
impl SqlRollbackStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlRollbackStatementDO {
    	for (tmp in db.sql_rollback_statement) {
            yield SqlRollbackStatementDO {
                oid_ : tmp.oid_,
                chain_ : tmp.chain_,
                force_oid_ : tmp.force_oid_,
                release_ : tmp.release_,
                to_oid_ : tmp.to_oid_
            }
    	}
    }
    /**
     * @brief gets the chain of this element.
     * @return int
     */
    pub fn getChain(self) -> int {
        return self.chain_
    }
    /**
     * @brief gets the force oid of this element.
     * @return int
     */
    pub fn getForceOid(self) -> int {
        return self.force_oid_
    }
    /**
     * @brief gets the release of this element.
     * @return int
     */
    pub fn getRelease(self) -> int {
        return self.release_
    }
    /**
     * @brief gets the to oid of this element.
     * @return int
     */
    pub fn getToOid(self) -> int {
        return self.to_oid_
    }
}
/**
 * @brief DO class: A sql row data type.
 */
schema SqlRowDataTypeDO {
    @primary oid_: int,
    fields_: string,
    is_int_: int,
    is_numberic_: int,
    is_string_: int,
    is_with_local_time_zone_: int,
    name_: string,
    with_time_zone_: int
}
impl SqlRowDataTypeDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlRowDataTypeDO {
    	for (tmp in db.sql_row_data_type) {
            yield SqlRowDataTypeDO {
                oid_ : tmp.oid_,
                fields_ : tmp.fields_,
                is_int_ : tmp.is_int_,
                is_numberic_ : tmp.is_numberic_,
                is_string_ : tmp.is_string_,
                is_with_local_time_zone_ : tmp.is_with_local_time_zone_,
                name_ : tmp.name_,
                with_time_zone_ : tmp.with_time_zone_
            }
    	}
    }
    /**
     * @brief gets the fields of this element.
     * @return string
     */
    pub fn getFields(self) -> string {
        return self.fields_
    }
    /**
     * @brief gets the is int of this element.
     * @return int
     */
    pub fn getIsInt(self) -> int {
        return self.is_int_
    }
    /**
     * @brief gets the is numberic of this element.
     * @return int
     */
    pub fn getIsNumberic(self) -> int {
        return self.is_numberic_
    }
    /**
     * @brief gets the is string of this element.
     * @return int
     */
    pub fn getIsString(self) -> int {
        return self.is_string_
    }
    /**
     * @brief gets the is with local time zone of this element.
     * @return int
     */
    pub fn getIsWithLocalTimeZone(self) -> int {
        return self.is_with_local_time_zone_
    }
    /**
     * @brief gets the name of this element.
     * @return string
     */
    pub fn getName(self) -> string {
        return self.name_
    }
    /**
     * @brief gets the with time zone of this element.
     * @return int
     */
    pub fn getWithTimeZone(self) -> int {
        return self.with_time_zone_
    }
}
/**
 * @brief DO class: A sql save point statement.
 */
schema SqlSavePointStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl SqlSavePointStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSavePointStatementDO {
    	for (tmp in db.sql_save_point_statement) {
            yield SqlSavePointStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql script commit statement.
 */
schema SqlScriptCommitStatementDO {
    @primary oid_: int
}
impl SqlScriptCommitStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlScriptCommitStatementDO {
    	for (tmp in db.sql_script_commit_statement) {
            yield SqlScriptCommitStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql select.
 */
schema SqlSelectDO {
    @primary oid_: int,
    first_query_block_oid_: int,
    for_xml_options_: string,
    for_xml_options_size_: int,
    head_hint_oid_: int,
    hints_size_: int,
    is_for_browse_: int,
    is_simple_: int,
    limit_oid_: int,
    offset_oid_: int,
    order_by_oid_: int,
    query_oid_: int,
    query_block_oid_: int,
    restriction_: string,
    row_count_oid_: int,
    with_sub_query_oid_: int,
    xml_path_oid_: int
}
impl SqlSelectDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSelectDO {
    	for (tmp in db.sql_select) {
            yield SqlSelectDO {
                oid_ : tmp.oid_,
                first_query_block_oid_ : tmp.first_query_block_oid_,
                for_xml_options_ : tmp.for_xml_options_,
                for_xml_options_size_ : tmp.for_xml_options_size_,
                head_hint_oid_ : tmp.head_hint_oid_,
                hints_size_ : tmp.hints_size_,
                is_for_browse_ : tmp.is_for_browse_,
                is_simple_ : tmp.is_simple_,
                limit_oid_ : tmp.limit_oid_,
                offset_oid_ : tmp.offset_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                query_oid_ : tmp.query_oid_,
                query_block_oid_ : tmp.query_block_oid_,
                restriction_ : tmp.restriction_,
                row_count_oid_ : tmp.row_count_oid_,
                with_sub_query_oid_ : tmp.with_sub_query_oid_,
                xml_path_oid_ : tmp.xml_path_oid_
            }
    	}
    }
    /**
     * @brief gets the first query block oid of this element.
     * @return int
     */
    pub fn getFirstQueryBlockOid(self) -> int {
        return self.first_query_block_oid_
    }
    /**
     * @brief gets the for xml options of this element.
     * @return string
     */
    pub fn getForXmlOptions(self) -> string {
        return self.for_xml_options_
    }
    /**
     * @brief gets the for xml options size of this element.
     * @return int
     */
    pub fn getForXmlOptionsSize(self) -> int {
        return self.for_xml_options_size_
    }
    /**
     * @brief gets the head hint oid of this element.
     * @return int
     */
    pub fn getHeadHintOid(self) -> int {
        return self.head_hint_oid_
    }
    /**
     * @brief gets the hints size of this element.
     * @return int
     */
    pub fn getHintsSize(self) -> int {
        return self.hints_size_
    }
    /**
     * @brief gets the is for browse of this element.
     * @return int
     */
    pub fn getIsForBrowse(self) -> int {
        return self.is_for_browse_
    }
    /**
     * @brief gets the is simple of this element.
     * @return int
     */
    pub fn getIsSimple(self) -> int {
        return self.is_simple_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the offset oid of this element.
     * @return int
     */
    pub fn getOffsetOid(self) -> int {
        return self.offset_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the query oid of this element.
     * @return int
     */
    pub fn getQueryOid(self) -> int {
        return self.query_oid_
    }
    /**
     * @brief gets the query block oid of this element.
     * @return int
     */
    pub fn getQueryBlockOid(self) -> int {
        return self.query_block_oid_
    }
    /**
     * @brief gets the restriction of this element.
     * @return string
     */
    pub fn getRestriction(self) -> string {
        return self.restriction_
    }
    /**
     * @brief gets the row count oid of this element.
     * @return int
     */
    pub fn getRowCountOid(self) -> int {
        return self.row_count_oid_
    }
    /**
     * @brief gets the with sub query oid of this element.
     * @return int
     */
    pub fn getWithSubQueryOid(self) -> int {
        return self.with_sub_query_oid_
    }
    /**
     * @brief gets the xml path oid of this element.
     * @return int
     */
    pub fn getXmlPathOid(self) -> int {
        return self.xml_path_oid_
    }
}
/**
 * @brief DO class: A sql select group by clause.
 */
schema SqlSelectGroupByClauseDO {
    @primary oid_: int,
    having_oid_: int,
    hint_oid_: int,
    is_distinct_: int,
    is_paren_: int,
    is_with_cube_: int,
    is_with_roll_up_: int
}
impl SqlSelectGroupByClauseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSelectGroupByClauseDO {
    	for (tmp in db.sql_select_group_by_clause) {
            yield SqlSelectGroupByClauseDO {
                oid_ : tmp.oid_,
                having_oid_ : tmp.having_oid_,
                hint_oid_ : tmp.hint_oid_,
                is_distinct_ : tmp.is_distinct_,
                is_paren_ : tmp.is_paren_,
                is_with_cube_ : tmp.is_with_cube_,
                is_with_roll_up_ : tmp.is_with_roll_up_
            }
    	}
    }
    /**
     * @brief gets the having oid of this element.
     * @return int
     */
    pub fn getHavingOid(self) -> int {
        return self.having_oid_
    }
    /**
     * @brief gets the hint oid of this element.
     * @return int
     */
    pub fn getHintOid(self) -> int {
        return self.hint_oid_
    }
    /**
     * @brief gets the is distinct of this element.
     * @return int
     */
    pub fn getIsDistinct(self) -> int {
        return self.is_distinct_
    }
    /**
     * @brief gets the is paren of this element.
     * @return int
     */
    pub fn getIsParen(self) -> int {
        return self.is_paren_
    }
    /**
     * @brief gets the is with cube of this element.
     * @return int
     */
    pub fn getIsWithCube(self) -> int {
        return self.is_with_cube_
    }
    /**
     * @brief gets the is with roll up of this element.
     * @return int
     */
    pub fn getIsWithRollUp(self) -> int {
        return self.is_with_roll_up_
    }
}
/**
 * @brief DO class: A sql select item.
 */
schema SqlSelectItemDO {
    @primary oid_: int,
    alias_: string,
    alias2_: string,
    alias_list_: string,
    expr_oid_: int,
    is_connect_by_root_: int,
    is_udtf_select_item_: int
}
impl SqlSelectItemDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSelectItemDO {
    	for (tmp in db.sql_select_item) {
            yield SqlSelectItemDO {
                oid_ : tmp.oid_,
                alias_ : tmp.alias_,
                alias2_ : tmp.alias2_,
                alias_list_ : tmp.alias_list_,
                expr_oid_ : tmp.expr_oid_,
                is_connect_by_root_ : tmp.is_connect_by_root_,
                is_udtf_select_item_ : tmp.is_udtf_select_item_
            }
    	}
    }
    /**
     * @brief gets the alias of this element.
     * @return string
     */
    pub fn getAlias(self) -> string {
        return self.alias_
    }
    /**
     * @brief gets the alias2 of this element.
     * @return string
     */
    pub fn getAlias2(self) -> string {
        return self.alias2_
    }
    /**
     * @brief gets the alias list of this element.
     * @return string
     */
    pub fn getAliasList(self) -> string {
        return self.alias_list_
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the is connect by root of this element.
     * @return int
     */
    pub fn getIsConnectByRoot(self) -> int {
        return self.is_connect_by_root_
    }
    /**
     * @brief gets the is udtf select item of this element.
     * @return int
     */
    pub fn getIsUdtfSelectItem(self) -> int {
        return self.is_udtf_select_item_
    }
}
/**
 * @brief DO class: A sql select order by item.
 */
schema SqlSelectOrderByItemDO {
    @primary oid_: int,
    collate_: string,
    expr_oid_: int,
    is_cluster_by_: int,
    is_distribute_by_: int,
    is_sort_by_: int,
    nulls_order_type_: string,
    resolved_select_item_oid_: int,
    type_: string
}
impl SqlSelectOrderByItemDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSelectOrderByItemDO {
    	for (tmp in db.sql_select_order_by_item) {
            yield SqlSelectOrderByItemDO {
                oid_ : tmp.oid_,
                collate_ : tmp.collate_,
                expr_oid_ : tmp.expr_oid_,
                is_cluster_by_ : tmp.is_cluster_by_,
                is_distribute_by_ : tmp.is_distribute_by_,
                is_sort_by_ : tmp.is_sort_by_,
                nulls_order_type_ : tmp.nulls_order_type_,
                resolved_select_item_oid_ : tmp.resolved_select_item_oid_,
                type_ : tmp.type_
            }
    	}
    }
    /**
     * @brief gets the collate of this element.
     * @return string
     */
    pub fn getCollate(self) -> string {
        return self.collate_
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the is cluster by of this element.
     * @return int
     */
    pub fn getIsClusterBy(self) -> int {
        return self.is_cluster_by_
    }
    /**
     * @brief gets the is distribute by of this element.
     * @return int
     */
    pub fn getIsDistributeBy(self) -> int {
        return self.is_distribute_by_
    }
    /**
     * @brief gets the is sort by of this element.
     * @return int
     */
    pub fn getIsSortBy(self) -> int {
        return self.is_sort_by_
    }
    /**
     * @brief gets the nulls order type of this element.
     * @return string
     */
    pub fn getNullsOrderType(self) -> string {
        return self.nulls_order_type_
    }
    /**
     * @brief gets the resolved select item oid of this element.
     * @return int
     */
    pub fn getResolvedSelectItemOid(self) -> int {
        return self.resolved_select_item_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
}
/**
 * @brief DO class: A sql select query base.
 */
schema SqlSelectQueryBaseDO {
    @primary oid_: int,
    is_parenthesized_: int
}
impl SqlSelectQueryBaseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSelectQueryBaseDO {
    	for (tmp in db.sql_select_query_base) {
            yield SqlSelectQueryBaseDO {
                oid_ : tmp.oid_,
                is_parenthesized_ : tmp.is_parenthesized_
            }
    	}
    }
    /**
     * @brief gets the is parenthesized of this element.
     * @return int
     */
    pub fn getIsParenthesized(self) -> int {
        return self.is_parenthesized_
    }
}
/**
 * @brief DO class: A sql select query block.
 */
schema SqlSelectQueryBlockDO {
    @primary oid_: int,
    cached_select_list_: string,
    cached_select_list_hash_: string,
    connect_by_oid_: int,
    distion_option_: int,
    first_oid_: int,
    for_update_of_size_: int,
    from_oid_: int,
    group_by_oid_: int,
    hints_size_: int,
    into_oid_: int,
    is_distinct_: int,
    is_for_share_: int,
    is_for_update_: int,
    is_no_cycle_: int,
    is_no_wait_: int,
    is_prior_: int,
    is_skip_locked_: int,
    limit_oid_: int,
    offset_oid_: int,
    order_by_oid_: int,
    order_by_siblings_oid_: int,
    start_with_oid_: int,
    wait_time_oid_: int,
    where_oid_: int
}
impl SqlSelectQueryBlockDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSelectQueryBlockDO {
    	for (tmp in db.sql_select_query_block) {
            yield SqlSelectQueryBlockDO {
                oid_ : tmp.oid_,
                cached_select_list_ : tmp.cached_select_list_,
                cached_select_list_hash_ : tmp.cached_select_list_hash_,
                connect_by_oid_ : tmp.connect_by_oid_,
                distion_option_ : tmp.distion_option_,
                first_oid_ : tmp.first_oid_,
                for_update_of_size_ : tmp.for_update_of_size_,
                from_oid_ : tmp.from_oid_,
                group_by_oid_ : tmp.group_by_oid_,
                hints_size_ : tmp.hints_size_,
                into_oid_ : tmp.into_oid_,
                is_distinct_ : tmp.is_distinct_,
                is_for_share_ : tmp.is_for_share_,
                is_for_update_ : tmp.is_for_update_,
                is_no_cycle_ : tmp.is_no_cycle_,
                is_no_wait_ : tmp.is_no_wait_,
                is_prior_ : tmp.is_prior_,
                is_skip_locked_ : tmp.is_skip_locked_,
                limit_oid_ : tmp.limit_oid_,
                offset_oid_ : tmp.offset_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                order_by_siblings_oid_ : tmp.order_by_siblings_oid_,
                start_with_oid_ : tmp.start_with_oid_,
                wait_time_oid_ : tmp.wait_time_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the cached select list of this element.
     * @return string
     */
    pub fn getCachedSelectList(self) -> string {
        return self.cached_select_list_
    }
    /**
     * @brief gets the cached select list hash of this element.
     * @return string
     */
    pub fn getCachedSelectListHash(self) -> string {
        return self.cached_select_list_hash_
    }
    /**
     * @brief gets the connect by oid of this element.
     * @return int
     */
    pub fn getConnectByOid(self) -> int {
        return self.connect_by_oid_
    }
    /**
     * @brief gets the distion option of this element.
     * @return int
     */
    pub fn getDistionOption(self) -> int {
        return self.distion_option_
    }
    /**
     * @brief gets the first oid of this element.
     * @return int
     */
    pub fn getFirstOid(self) -> int {
        return self.first_oid_
    }
    /**
     * @brief gets the for update of size of this element.
     * @return int
     */
    pub fn getForUpdateOfSize(self) -> int {
        return self.for_update_of_size_
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the group by oid of this element.
     * @return int
     */
    pub fn getGroupByOid(self) -> int {
        return self.group_by_oid_
    }
    /**
     * @brief gets the hints size of this element.
     * @return int
     */
    pub fn getHintsSize(self) -> int {
        return self.hints_size_
    }
    /**
     * @brief gets the into oid of this element.
     * @return int
     */
    pub fn getIntoOid(self) -> int {
        return self.into_oid_
    }
    /**
     * @brief gets the is distinct of this element.
     * @return int
     */
    pub fn getIsDistinct(self) -> int {
        return self.is_distinct_
    }
    /**
     * @brief gets the is for share of this element.
     * @return int
     */
    pub fn getIsForShare(self) -> int {
        return self.is_for_share_
    }
    /**
     * @brief gets the is for update of this element.
     * @return int
     */
    pub fn getIsForUpdate(self) -> int {
        return self.is_for_update_
    }
    /**
     * @brief gets the is no cycle of this element.
     * @return int
     */
    pub fn getIsNoCycle(self) -> int {
        return self.is_no_cycle_
    }
    /**
     * @brief gets the is no wait of this element.
     * @return int
     */
    pub fn getIsNoWait(self) -> int {
        return self.is_no_wait_
    }
    /**
     * @brief gets the is prior of this element.
     * @return int
     */
    pub fn getIsPrior(self) -> int {
        return self.is_prior_
    }
    /**
     * @brief gets the is skip locked of this element.
     * @return int
     */
    pub fn getIsSkipLocked(self) -> int {
        return self.is_skip_locked_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the offset oid of this element.
     * @return int
     */
    pub fn getOffsetOid(self) -> int {
        return self.offset_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the order by siblings oid of this element.
     * @return int
     */
    pub fn getOrderBySiblingsOid(self) -> int {
        return self.order_by_siblings_oid_
    }
    /**
     * @brief gets the start with oid of this element.
     * @return int
     */
    pub fn getStartWithOid(self) -> int {
        return self.start_with_oid_
    }
    /**
     * @brief gets the wait time oid of this element.
     * @return int
     */
    pub fn getWaitTimeOid(self) -> int {
        return self.wait_time_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A sql select statement.
 */
schema SqlSelectStatementDO {
    @primary oid_: int,
    select_oid_: int
}
impl SqlSelectStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSelectStatementDO {
    	for (tmp in db.sql_select_statement) {
            yield SqlSelectStatementDO {
                oid_ : tmp.oid_,
                select_oid_ : tmp.select_oid_
            }
    	}
    }
    /**
     * @brief gets the select oid of this element.
     * @return int
     */
    pub fn getSelectOid(self) -> int {
        return self.select_oid_
    }
}
/**
 * @brief DO class: A sql sequence expr.
 */
schema SqlSequenceExprDO {
    @primary oid_: int,
    function_: string,
    sequence_oid_: int
}
impl SqlSequenceExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSequenceExprDO {
    	for (tmp in db.sql_sequence_expr) {
            yield SqlSequenceExprDO {
                oid_ : tmp.oid_,
                function_ : tmp.function_,
                sequence_oid_ : tmp.sequence_oid_
            }
    	}
    }
    /**
     * @brief gets the function of this element.
     * @return string
     */
    pub fn getFunction(self) -> string {
        return self.function_
    }
    /**
     * @brief gets the sequence oid of this element.
     * @return int
     */
    pub fn getSequenceOid(self) -> int {
        return self.sequence_oid_
    }
}
/**
 * @brief DO class: A sql server exec statement.
 */
schema SqlServerExecStatementDO {
    @primary oid_: int,
    module_name_oid_: int,
    parameters_: string,
    return_status_oid_: int
}
impl SqlServerExecStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlServerExecStatementDO {
    	for (tmp in db.sql_server_exec_statement) {
            yield SqlServerExecStatementDO {
                oid_ : tmp.oid_,
                module_name_oid_ : tmp.module_name_oid_,
                parameters_ : tmp.parameters_,
                return_status_oid_ : tmp.return_status_oid_
            }
    	}
    }
    /**
     * @brief gets the module name oid of this element.
     * @return int
     */
    pub fn getModuleNameOid(self) -> int {
        return self.module_name_oid_
    }
    /**
     * @brief gets the parameters of this element.
     * @return string
     */
    pub fn getParameters(self) -> string {
        return self.parameters_
    }
    /**
     * @brief gets the return status oid of this element.
     * @return int
     */
    pub fn getReturnStatusOid(self) -> int {
        return self.return_status_oid_
    }
}
/**
 * @brief DO class: A sql server insert statement.
 */
schema SqlServerInsertStatementDO {
    @primary oid_: int,
    is_default_values_: int,
    output_oid_: int,
    top_oid_: int
}
impl SqlServerInsertStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlServerInsertStatementDO {
    	for (tmp in db.sql_server_insert_statement) {
            yield SqlServerInsertStatementDO {
                oid_ : tmp.oid_,
                is_default_values_ : tmp.is_default_values_,
                output_oid_ : tmp.output_oid_,
                top_oid_ : tmp.top_oid_
            }
    	}
    }
    /**
     * @brief gets the is default values of this element.
     * @return int
     */
    pub fn getIsDefaultValues(self) -> int {
        return self.is_default_values_
    }
    /**
     * @brief gets the output oid of this element.
     * @return int
     */
    pub fn getOutputOid(self) -> int {
        return self.output_oid_
    }
    /**
     * @brief gets the top oid of this element.
     * @return int
     */
    pub fn getTopOid(self) -> int {
        return self.top_oid_
    }
}
/**
 * @brief DO class: A sql server object impl.
 */
schema SqlServerObjectImplDO {
    @primary oid_: int
}
impl SqlServerObjectImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlServerObjectImplDO {
    	for (tmp in db.sql_server_object_impl) {
            yield SqlServerObjectImplDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql server object reference expr.
 */
schema SqlServerObjectReferenceExprDO {
    @primary oid_: int,
    database_: string,
    resolved_column_oid_: int,
    schema_: string,
    server_: string,
    simple_name_: string
}
impl SqlServerObjectReferenceExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlServerObjectReferenceExprDO {
    	for (tmp in db.sql_server_object_reference_expr) {
            yield SqlServerObjectReferenceExprDO {
                oid_ : tmp.oid_,
                database_ : tmp.database_,
                resolved_column_oid_ : tmp.resolved_column_oid_,
                schema_ : tmp.schema_,
                server_ : tmp.server_,
                simple_name_ : tmp.simple_name_
            }
    	}
    }
    /**
     * @brief gets the database of this element.
     * @return string
     */
    pub fn getDatabase(self) -> string {
        return self.database_
    }
    /**
     * @brief gets the resolved column oid of this element.
     * @return int
     */
    pub fn getResolvedColumnOid(self) -> int {
        return self.resolved_column_oid_
    }
    /**
     * @brief gets the schema of this element.
     * @return string
     */
    pub fn getSchema(self) -> string {
        return self.schema_
    }
    /**
     * @brief gets the server of this element.
     * @return string
     */
    pub fn getServer(self) -> string {
        return self.server_
    }
    /**
     * @brief gets the simple name of this element.
     * @return string
     */
    pub fn getSimpleName(self) -> string {
        return self.simple_name_
    }
}
/**
 * @brief DO class: A sql server output.
 */
schema SqlServerOutputDO {
    @primary oid_: int,
    into_oid_: int
}
impl SqlServerOutputDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlServerOutputDO {
    	for (tmp in db.sql_server_output) {
            yield SqlServerOutputDO {
                oid_ : tmp.oid_,
                into_oid_ : tmp.into_oid_
            }
    	}
    }
    /**
     * @brief gets the into oid of this element.
     * @return int
     */
    pub fn getIntoOid(self) -> int {
        return self.into_oid_
    }
}
/**
 * @brief DO class: A sql server rollback statement.
 */
schema SqlServerRollbackStatementDO {
    @primary oid_: int,
    is_work_: int,
    name_oid_: int
}
impl SqlServerRollbackStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlServerRollbackStatementDO {
    	for (tmp in db.sql_server_rollback_statement) {
            yield SqlServerRollbackStatementDO {
                oid_ : tmp.oid_,
                is_work_ : tmp.is_work_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is work of this element.
     * @return int
     */
    pub fn getIsWork(self) -> int {
        return self.is_work_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql server select query block.
 */
schema SqlServerSelectQueryBlockDO {
    @primary oid_: int,
    top_oid_: int
}
impl SqlServerSelectQueryBlockDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlServerSelectQueryBlockDO {
    	for (tmp in db.sql_server_select_query_block) {
            yield SqlServerSelectQueryBlockDO {
                oid_ : tmp.oid_,
                top_oid_ : tmp.top_oid_
            }
    	}
    }
    /**
     * @brief gets the top oid of this element.
     * @return int
     */
    pub fn getTopOid(self) -> int {
        return self.top_oid_
    }
}
/**
 * @brief DO class: A sql server set transaction isolation level statement.
 */
schema SqlServerSetTransactionIsolationLevelStatementDO {
    @primary oid_: int,
    level_: string
}
impl SqlServerSetTransactionIsolationLevelStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlServerSetTransactionIsolationLevelStatementDO {
    	for (tmp in db.sql_server_set_transaction_isolation_level_statement) {
            yield SqlServerSetTransactionIsolationLevelStatementDO {
                oid_ : tmp.oid_,
                level_ : tmp.level_
            }
    	}
    }
    /**
     * @brief gets the level of this element.
     * @return string
     */
    pub fn getLevel(self) -> string {
        return self.level_
    }
}
/**
 * @brief DO class: A sql server statement impl.
 */
schema SqlServerStatementImplDO {
    @primary oid_: int
}
impl SqlServerStatementImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlServerStatementImplDO {
    	for (tmp in db.sql_server_statement_impl) {
            yield SqlServerStatementImplDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql server top.
 */
schema SqlServerTopDO {
    @primary oid_: int,
    expr_oid_: int,
    is_percent_: int,
    is_with_ties_: int
}
impl SqlServerTopDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlServerTopDO {
    	for (tmp in db.sql_server_top) {
            yield SqlServerTopDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_,
                is_percent_ : tmp.is_percent_,
                is_with_ties_ : tmp.is_with_ties_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the is percent of this element.
     * @return int
     */
    pub fn getIsPercent(self) -> int {
        return self.is_percent_
    }
    /**
     * @brief gets the is with ties of this element.
     * @return int
     */
    pub fn getIsWithTies(self) -> int {
        return self.is_with_ties_
    }
}
/**
 * @brief DO class: A sql server update statement.
 */
schema SqlServerUpdateStatementDO {
    @primary oid_: int,
    output_oid_: int,
    top_oid_: int
}
impl SqlServerUpdateStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlServerUpdateStatementDO {
    	for (tmp in db.sql_server_update_statement) {
            yield SqlServerUpdateStatementDO {
                oid_ : tmp.oid_,
                output_oid_ : tmp.output_oid_,
                top_oid_ : tmp.top_oid_
            }
    	}
    }
    /**
     * @brief gets the output oid of this element.
     * @return int
     */
    pub fn getOutputOid(self) -> int {
        return self.output_oid_
    }
    /**
     * @brief gets the top oid of this element.
     * @return int
     */
    pub fn getTopOid(self) -> int {
        return self.top_oid_
    }
}
/**
 * @brief DO class: A sql server wait for statement.
 */
schema SqlServerWaitForStatementDO {
    @primary oid_: int,
    delay_oid_: int,
    statement_oid_: int,
    time_oid_: int,
    timeout_oid_: int
}
impl SqlServerWaitForStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlServerWaitForStatementDO {
    	for (tmp in db.sql_server_wait_for_statement) {
            yield SqlServerWaitForStatementDO {
                oid_ : tmp.oid_,
                delay_oid_ : tmp.delay_oid_,
                statement_oid_ : tmp.statement_oid_,
                time_oid_ : tmp.time_oid_,
                timeout_oid_ : tmp.timeout_oid_
            }
    	}
    }
    /**
     * @brief gets the delay oid of this element.
     * @return int
     */
    pub fn getDelayOid(self) -> int {
        return self.delay_oid_
    }
    /**
     * @brief gets the statement oid of this element.
     * @return int
     */
    pub fn getStatementOid(self) -> int {
        return self.statement_oid_
    }
    /**
     * @brief gets the time oid of this element.
     * @return int
     */
    pub fn getTimeOid(self) -> int {
        return self.time_oid_
    }
    /**
     * @brief gets the timeout oid of this element.
     * @return int
     */
    pub fn getTimeoutOid(self) -> int {
        return self.timeout_oid_
    }
}
/**
 * @brief DO class: A sql set statement.
 */
schema SqlSetStatementDO {
    @primary oid_: int,
    option_: string
}
impl SqlSetStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSetStatementDO {
    	for (tmp in db.sql_set_statement) {
            yield SqlSetStatementDO {
                oid_ : tmp.oid_,
                option_ : tmp.option_
            }
    	}
    }
    /**
     * @brief gets the option of this element.
     * @return string
     */
    pub fn getOption(self) -> string {
        return self.option_
    }
}
/**
 * @brief DO class: A sql show acl statement.
 */
schema SqlShowAclStatementDO {
    @primary oid_: int,
    table_oid_: int
}
impl SqlShowAclStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowAclStatementDO {
    	for (tmp in db.sql_show_acl_statement) {
            yield SqlShowAclStatementDO {
                oid_ : tmp.oid_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: A sql show catalogs statement.
 */
schema SqlShowCatalogsStatementDO {
    @primary oid_: int,
    like_oid_: int
}
impl SqlShowCatalogsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowCatalogsStatementDO {
    	for (tmp in db.sql_show_catalogs_statement) {
            yield SqlShowCatalogsStatementDO {
                oid_ : tmp.oid_,
                like_oid_ : tmp.like_oid_
            }
    	}
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
}
/**
 * @brief DO class: A sql show columns statement.
 */
schema SqlShowColumnsStatementDO {
    @primary oid_: int,
    database_oid_: int,
    is_full_: int,
    like_oid_: int,
    table_oid_: int,
    where_oid_: int
}
impl SqlShowColumnsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowColumnsStatementDO {
    	for (tmp in db.sql_show_columns_statement) {
            yield SqlShowColumnsStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_,
                is_full_ : tmp.is_full_,
                like_oid_ : tmp.like_oid_,
                table_oid_ : tmp.table_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A sql show create materialized view statement.
 */
schema SqlShowCreateMaterializedViewStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl SqlShowCreateMaterializedViewStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowCreateMaterializedViewStatementDO {
    	for (tmp in db.sql_show_create_materialized_view_statement) {
            yield SqlShowCreateMaterializedViewStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql show create table statement.
 */
schema SqlShowCreateTableStatementDO {
    @primary oid_: int,
    is_all_: int,
    like_mapping_oid_: int,
    name_oid_: int
}
impl SqlShowCreateTableStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowCreateTableStatementDO {
    	for (tmp in db.sql_show_create_table_statement) {
            yield SqlShowCreateTableStatementDO {
                oid_ : tmp.oid_,
                is_all_ : tmp.is_all_,
                like_mapping_oid_ : tmp.like_mapping_oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is all of this element.
     * @return int
     */
    pub fn getIsAll(self) -> int {
        return self.is_all_
    }
    /**
     * @brief gets the like mapping oid of this element.
     * @return int
     */
    pub fn getLikeMappingOid(self) -> int {
        return self.like_mapping_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql show create view statement.
 */
schema SqlShowCreateViewStatementDO {
    @primary oid_: int,
    name_oid_: int
}
impl SqlShowCreateViewStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowCreateViewStatementDO {
    	for (tmp in db.sql_show_create_view_statement) {
            yield SqlShowCreateViewStatementDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql show databases statement.
 */
schema SqlShowDatabasesStatementDO {
    @primary oid_: int,
    database_oid_: int,
    is_extra_: int,
    is_full_: int,
    is_physical_: int,
    like_oid_: int,
    where_oid_: int
}
impl SqlShowDatabasesStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowDatabasesStatementDO {
    	for (tmp in db.sql_show_databases_statement) {
            yield SqlShowDatabasesStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_,
                is_extra_ : tmp.is_extra_,
                is_full_ : tmp.is_full_,
                is_physical_ : tmp.is_physical_,
                like_oid_ : tmp.like_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
    /**
     * @brief gets the is extra of this element.
     * @return int
     */
    pub fn getIsExtra(self) -> int {
        return self.is_extra_
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the is physical of this element.
     * @return int
     */
    pub fn getIsPhysical(self) -> int {
        return self.is_physical_
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A sql show errors statement.
 */
schema SqlShowErrorsStatementDO {
    @primary oid_: int
}
impl SqlShowErrorsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowErrorsStatementDO {
    	for (tmp in db.sql_show_errors_statement) {
            yield SqlShowErrorsStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql show functions statement.
 */
schema SqlShowFunctionsStatementDO {
    @primary oid_: int,
    like_oid_: int
}
impl SqlShowFunctionsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowFunctionsStatementDO {
    	for (tmp in db.sql_show_functions_statement) {
            yield SqlShowFunctionsStatementDO {
                oid_ : tmp.oid_,
                like_oid_ : tmp.like_oid_
            }
    	}
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
}
/**
 * @brief DO class: A sql show grants statement.
 */
schema SqlShowGrantsStatementDO {
    @primary oid_: int,
    on_oid_: int,
    user_oid_: int
}
impl SqlShowGrantsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowGrantsStatementDO {
    	for (tmp in db.sql_show_grants_statement) {
            yield SqlShowGrantsStatementDO {
                oid_ : tmp.oid_,
                on_oid_ : tmp.on_oid_,
                user_oid_ : tmp.user_oid_
            }
    	}
    }
    /**
     * @brief gets the on oid of this element.
     * @return int
     */
    pub fn getOnOid(self) -> int {
        return self.on_oid_
    }
    /**
     * @brief gets the user oid of this element.
     * @return int
     */
    pub fn getUserOid(self) -> int {
        return self.user_oid_
    }
}
/**
 * @brief DO class: A sql show history statement.
 */
schema SqlShowHistoryStatementDO {
    @primary oid_: int,
    is_tables_: int,
    table_oid_: int
}
impl SqlShowHistoryStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowHistoryStatementDO {
    	for (tmp in db.sql_show_history_statement) {
            yield SqlShowHistoryStatementDO {
                oid_ : tmp.oid_,
                is_tables_ : tmp.is_tables_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the is tables of this element.
     * @return int
     */
    pub fn getIsTables(self) -> int {
        return self.is_tables_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: A sql show indexes statement.
 */
schema SqlShowIndexesStatementDO {
    @primary oid_: int,
    database_oid_: int,
    table_oid_: int,
    type_: string,
    where_oid_: int
}
impl SqlShowIndexesStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowIndexesStatementDO {
    	for (tmp in db.sql_show_indexes_statement) {
            yield SqlShowIndexesStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_,
                table_oid_ : tmp.table_oid_,
                type_ : tmp.type_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
    /**
     * @brief gets the type of this element.
     * @return string
     */
    pub fn getType(self) -> string {
        return self.type_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A sql show materialized view statement.
 */
schema SqlShowMaterializedViewStatementDO {
    @primary oid_: int,
    like_oid_: int,
    name_oid_: int
}
impl SqlShowMaterializedViewStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowMaterializedViewStatementDO {
    	for (tmp in db.sql_show_materialized_view_statement) {
            yield SqlShowMaterializedViewStatementDO {
                oid_ : tmp.oid_,
                like_oid_ : tmp.like_oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql show outlines statement.
 */
schema SqlShowOutlinesStatementDO {
    @primary oid_: int,
    limit_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl SqlShowOutlinesStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowOutlinesStatementDO {
    	for (tmp in db.sql_show_outlines_statement) {
            yield SqlShowOutlinesStatementDO {
                oid_ : tmp.oid_,
                limit_oid_ : tmp.limit_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A sql show packages statement.
 */
schema SqlShowPackagesStatementDO {
    @primary oid_: int
}
impl SqlShowPackagesStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowPackagesStatementDO {
    	for (tmp in db.sql_show_packages_statement) {
            yield SqlShowPackagesStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql show partitions stmt.
 */
schema SqlShowPartitionsStmtDO {
    @primary oid_: int,
    table_source_oid_: int,
    where_oid_: int
}
impl SqlShowPartitionsStmtDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowPartitionsStmtDO {
    	for (tmp in db.sql_show_partitions_stmt) {
            yield SqlShowPartitionsStmtDO {
                oid_ : tmp.oid_,
                table_source_oid_ : tmp.table_source_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the table source oid of this element.
     * @return int
     */
    pub fn getTableSourceOid(self) -> int {
        return self.table_source_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A sql show process list statement.
 */
schema SqlShowProcessListStatementDO {
    @primary oid_: int,
    is_full_: int,
    is_mpp_: int,
    limit_oid_: int,
    order_by_oid_: int,
    where_oid_: int
}
impl SqlShowProcessListStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowProcessListStatementDO {
    	for (tmp in db.sql_show_process_list_statement) {
            yield SqlShowProcessListStatementDO {
                oid_ : tmp.oid_,
                is_full_ : tmp.is_full_,
                is_mpp_ : tmp.is_mpp_,
                limit_oid_ : tmp.limit_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the is mpp of this element.
     * @return int
     */
    pub fn getIsMpp(self) -> int {
        return self.is_mpp_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A sql show query task statement.
 */
schema SqlShowQueryTaskStatementDO {
    @primary oid_: int,
    for_oid_: int,
    is_full_: int,
    limit_oid_: int,
    order_by_oid_: int,
    user_oid_: int,
    where_oid_: int
}
impl SqlShowQueryTaskStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowQueryTaskStatementDO {
    	for (tmp in db.sql_show_query_task_statement) {
            yield SqlShowQueryTaskStatementDO {
                oid_ : tmp.oid_,
                for_oid_ : tmp.for_oid_,
                is_full_ : tmp.is_full_,
                limit_oid_ : tmp.limit_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                user_oid_ : tmp.user_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the for oid of this element.
     * @return int
     */
    pub fn getForOid(self) -> int {
        return self.for_oid_
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the user oid of this element.
     * @return int
     */
    pub fn getUserOid(self) -> int {
        return self.user_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A sql show recylebin statement.
 */
schema SqlShowRecylebinStatementDO {
    @primary oid_: int
}
impl SqlShowRecylebinStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowRecylebinStatementDO {
    	for (tmp in db.sql_show_recylebin_statement) {
            yield SqlShowRecylebinStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql show role statement.
 */
schema SqlShowRoleStatementDO {
    @primary oid_: int,
    grant_oid_: int
}
impl SqlShowRoleStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowRoleStatementDO {
    	for (tmp in db.sql_show_role_statement) {
            yield SqlShowRoleStatementDO {
                oid_ : tmp.oid_,
                grant_oid_ : tmp.grant_oid_
            }
    	}
    }
    /**
     * @brief gets the grant oid of this element.
     * @return int
     */
    pub fn getGrantOid(self) -> int {
        return self.grant_oid_
    }
}
/**
 * @brief DO class: A sql show roles statement.
 */
schema SqlShowRolesStatementDO {
    @primary oid_: int
}
impl SqlShowRolesStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowRolesStatementDO {
    	for (tmp in db.sql_show_roles_statement) {
            yield SqlShowRolesStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql show session statement.
 */
schema SqlShowSessionStatementDO {
    @primary oid_: int,
    like_oid_: int
}
impl SqlShowSessionStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowSessionStatementDO {
    	for (tmp in db.sql_show_session_statement) {
            yield SqlShowSessionStatementDO {
                oid_ : tmp.oid_,
                like_oid_ : tmp.like_oid_
            }
    	}
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
}
/**
 * @brief DO class: A sql show statistic list stmt.
 */
schema SqlShowStatisticListStmtDO {
    @primary oid_: int,
    is_full_: int,
    table_source_oid_: int
}
impl SqlShowStatisticListStmtDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowStatisticListStmtDO {
    	for (tmp in db.sql_show_statistic_list_stmt) {
            yield SqlShowStatisticListStmtDO {
                oid_ : tmp.oid_,
                is_full_ : tmp.is_full_,
                table_source_oid_ : tmp.table_source_oid_
            }
    	}
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the table source oid of this element.
     * @return int
     */
    pub fn getTableSourceOid(self) -> int {
        return self.table_source_oid_
    }
}
/**
 * @brief DO class: A sql show statistic stmt.
 */
schema SqlShowStatisticStmtDO {
    @primary oid_: int,
    is_full_: int,
    table_source_oid_: int
}
impl SqlShowStatisticStmtDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowStatisticStmtDO {
    	for (tmp in db.sql_show_statistic_stmt) {
            yield SqlShowStatisticStmtDO {
                oid_ : tmp.oid_,
                is_full_ : tmp.is_full_,
                table_source_oid_ : tmp.table_source_oid_
            }
    	}
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the table source oid of this element.
     * @return int
     */
    pub fn getTableSourceOid(self) -> int {
        return self.table_source_oid_
    }
}
/**
 * @brief DO class: A sql show table groups statement.
 */
schema SqlShowTableGroupsStatementDO {
    @primary oid_: int,
    database_oid_: int
}
impl SqlShowTableGroupsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowTableGroupsStatementDO {
    	for (tmp in db.sql_show_table_groups_statement) {
            yield SqlShowTableGroupsStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
}
/**
 * @brief DO class: A sql show tables statement.
 */
schema SqlShowTablesStatementDO {
    @primary oid_: int,
    database_oid_: int,
    from_oid_: int,
    is_extended_: int,
    is_full_: int,
    like_oid_: int,
    where_oid_: int
}
impl SqlShowTablesStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowTablesStatementDO {
    	for (tmp in db.sql_show_tables_statement) {
            yield SqlShowTablesStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_,
                from_oid_ : tmp.from_oid_,
                is_extended_ : tmp.is_extended_,
                is_full_ : tmp.is_full_,
                like_oid_ : tmp.like_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the is extended of this element.
     * @return int
     */
    pub fn getIsExtended(self) -> int {
        return self.is_extended_
    }
    /**
     * @brief gets the is full of this element.
     * @return int
     */
    pub fn getIsFull(self) -> int {
        return self.is_full_
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A sql show users statement.
 */
schema SqlShowUsersStatementDO {
    @primary oid_: int
}
impl SqlShowUsersStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowUsersStatementDO {
    	for (tmp in db.sql_show_users_statement) {
            yield SqlShowUsersStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql show variants statement.
 */
schema SqlShowVariantsStatementDO {
    @primary oid_: int,
    is_global_: int,
    is_session_: int,
    like_oid_: int,
    where_oid_: int
}
impl SqlShowVariantsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowVariantsStatementDO {
    	for (tmp in db.sql_show_variants_statement) {
            yield SqlShowVariantsStatementDO {
                oid_ : tmp.oid_,
                is_global_ : tmp.is_global_,
                is_session_ : tmp.is_session_,
                like_oid_ : tmp.like_oid_,
                where_oid_ : tmp.where_oid_
            }
    	}
    }
    /**
     * @brief gets the is global of this element.
     * @return int
     */
    pub fn getIsGlobal(self) -> int {
        return self.is_global_
    }
    /**
     * @brief gets the is session of this element.
     * @return int
     */
    pub fn getIsSession(self) -> int {
        return self.is_session_
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
}
/**
 * @brief DO class: A sql show views statement.
 */
schema SqlShowViewsStatementDO {
    @primary oid_: int,
    database_oid_: int,
    like_oid_: int
}
impl SqlShowViewsStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlShowViewsStatementDO {
    	for (tmp in db.sql_show_views_statement) {
            yield SqlShowViewsStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_,
                like_oid_ : tmp.like_oid_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
}
/**
 * @brief DO class: A sql size expr.
 */
schema SqlSizeExprDO {
    @primary oid_: int,
    unit_: string,
    value_oid_: int
}
impl SqlSizeExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSizeExprDO {
    	for (tmp in db.sql_size_expr) {
            yield SqlSizeExprDO {
                oid_ : tmp.oid_,
                unit_ : tmp.unit_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the unit of this element.
     * @return string
     */
    pub fn getUnit(self) -> string {
        return self.unit_
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A sql small int expr.
 */
schema SqlSmallIntExprDO {
    @primary oid_: int,
    number_: string,
    value_: int
}
impl SqlSmallIntExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSmallIntExprDO {
    	for (tmp in db.sql_small_int_expr) {
            yield SqlSmallIntExprDO {
                oid_ : tmp.oid_,
                number_ : tmp.number_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the number of this element.
     * @return string
     */
    pub fn getNumber(self) -> string {
        return self.number_
    }
    /**
     * @brief gets the value of this element.
     * @return int
     */
    pub fn getValue(self) -> int {
        return self.value_
    }
}
/**
 * @brief DO class: A sql some expr.
 */
schema SqlSomeExprDO {
    @primary oid_: int,
    sub_query_oid_: int
}
impl SqlSomeExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSomeExprDO {
    	for (tmp in db.sql_some_expr) {
            yield SqlSomeExprDO {
                oid_ : tmp.oid_,
                sub_query_oid_ : tmp.sub_query_oid_
            }
    	}
    }
    /**
     * @brief gets the sub query oid of this element.
     * @return int
     */
    pub fn getSubQueryOid(self) -> int {
        return self.sub_query_oid_
    }
}
/**
 * @brief DO class: A sql start transaction statement.
 */
schema SqlStartTransactionStatementDO {
    @primary oid_: int,
    is_begin_: int,
    is_consistent_snapshot_: int,
    is_read_only_: int,
    is_work_: int,
    isolation_level_: string,
    name_oid_: int
}
impl SqlStartTransactionStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlStartTransactionStatementDO {
    	for (tmp in db.sql_start_transaction_statement) {
            yield SqlStartTransactionStatementDO {
                oid_ : tmp.oid_,
                is_begin_ : tmp.is_begin_,
                is_consistent_snapshot_ : tmp.is_consistent_snapshot_,
                is_read_only_ : tmp.is_read_only_,
                is_work_ : tmp.is_work_,
                isolation_level_ : tmp.isolation_level_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the is begin of this element.
     * @return int
     */
    pub fn getIsBegin(self) -> int {
        return self.is_begin_
    }
    /**
     * @brief gets the is consistent snapshot of this element.
     * @return int
     */
    pub fn getIsConsistentSnapshot(self) -> int {
        return self.is_consistent_snapshot_
    }
    /**
     * @brief gets the is read only of this element.
     * @return int
     */
    pub fn getIsReadOnly(self) -> int {
        return self.is_read_only_
    }
    /**
     * @brief gets the is work of this element.
     * @return int
     */
    pub fn getIsWork(self) -> int {
        return self.is_work_
    }
    /**
     * @brief gets the isolation level of this element.
     * @return string
     */
    pub fn getIsolationLevel(self) -> string {
        return self.isolation_level_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql statement impl.
 */
schema SqlStatementImplDO {
    @primary oid_: int,
    is_after_semi_: int
}
impl SqlStatementImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlStatementImplDO {
    	for (tmp in db.sql_statement_impl) {
            yield SqlStatementImplDO {
                oid_ : tmp.oid_,
                is_after_semi_ : tmp.is_after_semi_
            }
    	}
    }
    /**
     * @brief gets the is after semi of this element.
     * @return int
     */
    pub fn getIsAfterSemi(self) -> int {
        return self.is_after_semi_
    }
}
/**
 * @brief DO class: A sql struct data type.
 */
schema SqlStructDataTypeDO {
    @primary oid_: int,
    fields_: string,
    is_int_: int,
    is_numberic_: int,
    is_string_: int,
    is_with_local_time_zone_: int,
    name_: string,
    with_time_zone_: int
}
impl SqlStructDataTypeDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlStructDataTypeDO {
    	for (tmp in db.sql_struct_data_type) {
            yield SqlStructDataTypeDO {
                oid_ : tmp.oid_,
                fields_ : tmp.fields_,
                is_int_ : tmp.is_int_,
                is_numberic_ : tmp.is_numberic_,
                is_string_ : tmp.is_string_,
                is_with_local_time_zone_ : tmp.is_with_local_time_zone_,
                name_ : tmp.name_,
                with_time_zone_ : tmp.with_time_zone_
            }
    	}
    }
    /**
     * @brief gets the fields of this element.
     * @return string
     */
    pub fn getFields(self) -> string {
        return self.fields_
    }
    /**
     * @brief gets the is int of this element.
     * @return int
     */
    pub fn getIsInt(self) -> int {
        return self.is_int_
    }
    /**
     * @brief gets the is numberic of this element.
     * @return int
     */
    pub fn getIsNumberic(self) -> int {
        return self.is_numberic_
    }
    /**
     * @brief gets the is string of this element.
     * @return int
     */
    pub fn getIsString(self) -> int {
        return self.is_string_
    }
    /**
     * @brief gets the is with local time zone of this element.
     * @return int
     */
    pub fn getIsWithLocalTimeZone(self) -> int {
        return self.is_with_local_time_zone_
    }
    /**
     * @brief gets the name of this element.
     * @return string
     */
    pub fn getName(self) -> string {
        return self.name_
    }
    /**
     * @brief gets the with time zone of this element.
     * @return int
     */
    pub fn getWithTimeZone(self) -> int {
        return self.with_time_zone_
    }
}
/**
 * @brief DO class: A sql sub partition.
 */
schema SqlSubPartitionDO {
    @primary oid_: int,
    comment_oid_: int,
    data_directory_oid_: int,
    engine_oid_: int,
    index_directory_oid_: int,
    max_rows_oid_: int,
    min_rows_oid_: int,
    name_oid_: int,
    table_space_oid_: int,
    values_oid_: int
}
impl SqlSubPartitionDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSubPartitionDO {
    	for (tmp in db.sql_sub_partition) {
            yield SqlSubPartitionDO {
                oid_ : tmp.oid_,
                comment_oid_ : tmp.comment_oid_,
                data_directory_oid_ : tmp.data_directory_oid_,
                engine_oid_ : tmp.engine_oid_,
                index_directory_oid_ : tmp.index_directory_oid_,
                max_rows_oid_ : tmp.max_rows_oid_,
                min_rows_oid_ : tmp.min_rows_oid_,
                name_oid_ : tmp.name_oid_,
                table_space_oid_ : tmp.table_space_oid_,
                values_oid_ : tmp.values_oid_
            }
    	}
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the data directory oid of this element.
     * @return int
     */
    pub fn getDataDirectoryOid(self) -> int {
        return self.data_directory_oid_
    }
    /**
     * @brief gets the engine oid of this element.
     * @return int
     */
    pub fn getEngineOid(self) -> int {
        return self.engine_oid_
    }
    /**
     * @brief gets the index directory oid of this element.
     * @return int
     */
    pub fn getIndexDirectoryOid(self) -> int {
        return self.index_directory_oid_
    }
    /**
     * @brief gets the max rows oid of this element.
     * @return int
     */
    pub fn getMaxRowsOid(self) -> int {
        return self.max_rows_oid_
    }
    /**
     * @brief gets the min rows oid of this element.
     * @return int
     */
    pub fn getMinRowsOid(self) -> int {
        return self.min_rows_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the table space oid of this element.
     * @return int
     */
    pub fn getTableSpaceOid(self) -> int {
        return self.table_space_oid_
    }
    /**
     * @brief gets the values oid of this element.
     * @return int
     */
    pub fn getValuesOid(self) -> int {
        return self.values_oid_
    }
}
/**
 * @brief DO class: A sql sub partition by.
 */
schema SqlSubPartitionByDO {
    @primary oid_: int,
    is_linear_: int,
    lifecycle_oid_: int,
    sub_partitions_count_oid_: int
}
impl SqlSubPartitionByDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSubPartitionByDO {
    	for (tmp in db.sql_sub_partition_by) {
            yield SqlSubPartitionByDO {
                oid_ : tmp.oid_,
                is_linear_ : tmp.is_linear_,
                lifecycle_oid_ : tmp.lifecycle_oid_,
                sub_partitions_count_oid_ : tmp.sub_partitions_count_oid_
            }
    	}
    }
    /**
     * @brief gets the is linear of this element.
     * @return int
     */
    pub fn getIsLinear(self) -> int {
        return self.is_linear_
    }
    /**
     * @brief gets the lifecycle oid of this element.
     * @return int
     */
    pub fn getLifecycleOid(self) -> int {
        return self.lifecycle_oid_
    }
    /**
     * @brief gets the sub partitions count oid of this element.
     * @return int
     */
    pub fn getSubPartitionsCountOid(self) -> int {
        return self.sub_partitions_count_oid_
    }
}
/**
 * @brief DO class: A sql sub partition by hash.
 */
schema SqlSubPartitionByHashDO {
    @primary oid_: int,
    expr_oid_: int,
    is_key_: int
}
impl SqlSubPartitionByHashDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSubPartitionByHashDO {
    	for (tmp in db.sql_sub_partition_by_hash) {
            yield SqlSubPartitionByHashDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_,
                is_key_ : tmp.is_key_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the is key of this element.
     * @return int
     */
    pub fn getIsKey(self) -> int {
        return self.is_key_
    }
}
/**
 * @brief DO class: A sql sub partition by list.
 */
schema SqlSubPartitionByListDO {
    @primary oid_: int,
    column_oid_: int
}
impl SqlSubPartitionByListDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSubPartitionByListDO {
    	for (tmp in db.sql_sub_partition_by_list) {
            yield SqlSubPartitionByListDO {
                oid_ : tmp.oid_,
                column_oid_ : tmp.column_oid_
            }
    	}
    }
    /**
     * @brief gets the column oid of this element.
     * @return int
     */
    pub fn getColumnOid(self) -> int {
        return self.column_oid_
    }
}
/**
 * @brief DO class: A sql sub partition by range.
 */
schema SqlSubPartitionByRangeDO {
    @primary oid_: int
}
impl SqlSubPartitionByRangeDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSubPartitionByRangeDO {
    	for (tmp in db.sql_sub_partition_by_range) {
            yield SqlSubPartitionByRangeDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql submit job statement.
 */
schema SqlSubmitJobStatementDO {
    @primary oid_: int,
    is_await_: int,
    statment_oid_: int
}
impl SqlSubmitJobStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSubmitJobStatementDO {
    	for (tmp in db.sql_submit_job_statement) {
            yield SqlSubmitJobStatementDO {
                oid_ : tmp.oid_,
                is_await_ : tmp.is_await_,
                statment_oid_ : tmp.statment_oid_
            }
    	}
    }
    /**
     * @brief gets the is await of this element.
     * @return int
     */
    pub fn getIsAwait(self) -> int {
        return self.is_await_
    }
    /**
     * @brief gets the statment oid of this element.
     * @return int
     */
    pub fn getStatmentOid(self) -> int {
        return self.statment_oid_
    }
}
/**
 * @brief DO class: A sql subquery table source.
 */
schema SqlSubqueryTableSourceDO {
    @primary oid_: int,
    select_oid_: int
}
impl SqlSubqueryTableSourceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSubqueryTableSourceDO {
    	for (tmp in db.sql_subquery_table_source) {
            yield SqlSubqueryTableSourceDO {
                oid_ : tmp.oid_,
                select_oid_ : tmp.select_oid_
            }
    	}
    }
    /**
     * @brief gets the select oid of this element.
     * @return int
     */
    pub fn getSelectOid(self) -> int {
        return self.select_oid_
    }
}
/**
 * @brief DO class: A sql sync meta statement.
 */
schema SqlSyncMetaStatementDO {
    @primary oid_: int,
    from_oid_: int,
    ignore_: int,
    like_oid_: int,
    restrict_: int
}
impl SqlSyncMetaStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlSyncMetaStatementDO {
    	for (tmp in db.sql_sync_meta_statement) {
            yield SqlSyncMetaStatementDO {
                oid_ : tmp.oid_,
                from_oid_ : tmp.from_oid_,
                ignore_ : tmp.ignore_,
                like_oid_ : tmp.like_oid_,
                restrict_ : tmp.restrict_
            }
    	}
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the ignore of this element.
     * @return int
     */
    pub fn getIgnore(self) -> int {
        return self.ignore_
    }
    /**
     * @brief gets the like oid of this element.
     * @return int
     */
    pub fn getLikeOid(self) -> int {
        return self.like_oid_
    }
    /**
     * @brief gets the restrict of this element.
     * @return int
     */
    pub fn getRestrict(self) -> int {
        return self.restrict_
    }
}
/**
 * @brief DO class: A sql table data type.
 */
schema SqlTableDataTypeDO {
    @primary oid_: int,
    is_int_: int,
    is_numberic_: int,
    is_string_: int,
    is_with_local_time_zone_: int,
    name_: string,
    with_time_zone_: int
}
impl SqlTableDataTypeDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlTableDataTypeDO {
    	for (tmp in db.sql_table_data_type) {
            yield SqlTableDataTypeDO {
                oid_ : tmp.oid_,
                is_int_ : tmp.is_int_,
                is_numberic_ : tmp.is_numberic_,
                is_string_ : tmp.is_string_,
                is_with_local_time_zone_ : tmp.is_with_local_time_zone_,
                name_ : tmp.name_,
                with_time_zone_ : tmp.with_time_zone_
            }
    	}
    }
    /**
     * @brief gets the is int of this element.
     * @return int
     */
    pub fn getIsInt(self) -> int {
        return self.is_int_
    }
    /**
     * @brief gets the is numberic of this element.
     * @return int
     */
    pub fn getIsNumberic(self) -> int {
        return self.is_numberic_
    }
    /**
     * @brief gets the is string of this element.
     * @return int
     */
    pub fn getIsString(self) -> int {
        return self.is_string_
    }
    /**
     * @brief gets the is with local time zone of this element.
     * @return int
     */
    pub fn getIsWithLocalTimeZone(self) -> int {
        return self.is_with_local_time_zone_
    }
    /**
     * @brief gets the name of this element.
     * @return string
     */
    pub fn getName(self) -> string {
        return self.name_
    }
    /**
     * @brief gets the with time zone of this element.
     * @return int
     */
    pub fn getWithTimeZone(self) -> int {
        return self.with_time_zone_
    }
}
/**
 * @brief DO class: A sql table like.
 */
schema SqlTableLikeDO {
    @primary oid_: int,
    is_exclude_properties_: int,
    is_include_properties_: int,
    table_oid_: int
}
impl SqlTableLikeDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlTableLikeDO {
    	for (tmp in db.sql_table_like) {
            yield SqlTableLikeDO {
                oid_ : tmp.oid_,
                is_exclude_properties_ : tmp.is_exclude_properties_,
                is_include_properties_ : tmp.is_include_properties_,
                table_oid_ : tmp.table_oid_
            }
    	}
    }
    /**
     * @brief gets the is exclude properties of this element.
     * @return int
     */
    pub fn getIsExcludeProperties(self) -> int {
        return self.is_exclude_properties_
    }
    /**
     * @brief gets the is include properties of this element.
     * @return int
     */
    pub fn getIsIncludeProperties(self) -> int {
        return self.is_include_properties_
    }
    /**
     * @brief gets the table oid of this element.
     * @return int
     */
    pub fn getTableOid(self) -> int {
        return self.table_oid_
    }
}
/**
 * @brief DO class: A sql table sampling.
 */
schema SqlTableSamplingDO {
    @primary oid_: int,
    bucket_oid_: int,
    byte_length_oid_: int,
    is_bernoulli_: int,
    is_system_: int,
    on_oid_: int,
    out_of_oid_: int,
    percent_oid_: int,
    rows_oid_: int
}
impl SqlTableSamplingDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlTableSamplingDO {
    	for (tmp in db.sql_table_sampling) {
            yield SqlTableSamplingDO {
                oid_ : tmp.oid_,
                bucket_oid_ : tmp.bucket_oid_,
                byte_length_oid_ : tmp.byte_length_oid_,
                is_bernoulli_ : tmp.is_bernoulli_,
                is_system_ : tmp.is_system_,
                on_oid_ : tmp.on_oid_,
                out_of_oid_ : tmp.out_of_oid_,
                percent_oid_ : tmp.percent_oid_,
                rows_oid_ : tmp.rows_oid_
            }
    	}
    }
    /**
     * @brief gets the bucket oid of this element.
     * @return int
     */
    pub fn getBucketOid(self) -> int {
        return self.bucket_oid_
    }
    /**
     * @brief gets the byte length oid of this element.
     * @return int
     */
    pub fn getByteLengthOid(self) -> int {
        return self.byte_length_oid_
    }
    /**
     * @brief gets the is bernoulli of this element.
     * @return int
     */
    pub fn getIsBernoulli(self) -> int {
        return self.is_bernoulli_
    }
    /**
     * @brief gets the is system of this element.
     * @return int
     */
    pub fn getIsSystem(self) -> int {
        return self.is_system_
    }
    /**
     * @brief gets the on oid of this element.
     * @return int
     */
    pub fn getOnOid(self) -> int {
        return self.on_oid_
    }
    /**
     * @brief gets the out of oid of this element.
     * @return int
     */
    pub fn getOutOfOid(self) -> int {
        return self.out_of_oid_
    }
    /**
     * @brief gets the percent oid of this element.
     * @return int
     */
    pub fn getPercentOid(self) -> int {
        return self.percent_oid_
    }
    /**
     * @brief gets the rows oid of this element.
     * @return int
     */
    pub fn getRowsOid(self) -> int {
        return self.rows_oid_
    }
}
/**
 * @brief DO class: A sql table source impl.
 */
schema SqlTableSourceImplDO {
    @primary oid_: int,
    alias_: string,
    alias2_: string,
    flashback_oid_: int,
    hints_size_: int
}
impl SqlTableSourceImplDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlTableSourceImplDO {
    	for (tmp in db.sql_table_source_impl) {
            yield SqlTableSourceImplDO {
                oid_ : tmp.oid_,
                alias_ : tmp.alias_,
                alias2_ : tmp.alias2_,
                flashback_oid_ : tmp.flashback_oid_,
                hints_size_ : tmp.hints_size_
            }
    	}
    }
    /**
     * @brief gets the alias of this element.
     * @return string
     */
    pub fn getAlias(self) -> string {
        return self.alias_
    }
    /**
     * @brief gets the alias2 of this element.
     * @return string
     */
    pub fn getAlias2(self) -> string {
        return self.alias2_
    }
    /**
     * @brief gets the flashback oid of this element.
     * @return int
     */
    pub fn getFlashbackOid(self) -> int {
        return self.flashback_oid_
    }
    /**
     * @brief gets the hints size of this element.
     * @return int
     */
    pub fn getHintsSize(self) -> int {
        return self.hints_size_
    }
}
/**
 * @brief DO class: A sql text literal expr.
 */
schema SqlTextLiteralExprDO {
    @primary oid_: int,
    text_: string
}
impl SqlTextLiteralExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlTextLiteralExprDO {
    	for (tmp in db.sql_text_literal_expr) {
            yield SqlTextLiteralExprDO {
                oid_ : tmp.oid_,
                text_ : tmp.text_
            }
    	}
    }
    /**
     * @brief gets the text of this element.
     * @return string
     */
    pub fn getText(self) -> string {
        return self.text_
    }
}
/**
 * @brief DO class: A sql time expr.
 */
schema SqlTimeExprDO {
    @primary oid_: int,
    literal_oid_: int,
    value_: string
}
impl SqlTimeExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlTimeExprDO {
    	for (tmp in db.sql_time_expr) {
            yield SqlTimeExprDO {
                oid_ : tmp.oid_,
                literal_oid_ : tmp.literal_oid_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the literal oid of this element.
     * @return int
     */
    pub fn getLiteralOid(self) -> int {
        return self.literal_oid_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql timestamp expr.
 */
schema SqlTimestampExprDO {
    @primary oid_: int,
    is_with_time_zone_: int,
    literal_: string,
    time_zone_: string,
    value_: string
}
impl SqlTimestampExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlTimestampExprDO {
    	for (tmp in db.sql_timestamp_expr) {
            yield SqlTimestampExprDO {
                oid_ : tmp.oid_,
                is_with_time_zone_ : tmp.is_with_time_zone_,
                literal_ : tmp.literal_,
                time_zone_ : tmp.time_zone_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the is with time zone of this element.
     * @return int
     */
    pub fn getIsWithTimeZone(self) -> int {
        return self.is_with_time_zone_
    }
    /**
     * @brief gets the literal of this element.
     * @return string
     */
    pub fn getLiteral(self) -> string {
        return self.literal_
    }
    /**
     * @brief gets the time zone of this element.
     * @return string
     */
    pub fn getTimeZone(self) -> string {
        return self.time_zone_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sql tiny int expr.
 */
schema SqlTinyIntExprDO {
    @primary oid_: int,
    number_: string,
    value_: int
}
impl SqlTinyIntExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlTinyIntExprDO {
    	for (tmp in db.sql_tiny_int_expr) {
            yield SqlTinyIntExprDO {
                oid_ : tmp.oid_,
                number_ : tmp.number_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the number of this element.
     * @return string
     */
    pub fn getNumber(self) -> string {
        return self.number_
    }
    /**
     * @brief gets the value of this element.
     * @return int
     */
    pub fn getValue(self) -> int {
        return self.value_
    }
}
/**
 * @brief DO class: A sql truncate statement.
 */
schema SqlTruncateStatementDO {
    @primary oid_: int,
    cascade_: int,
    is_continue_identity_: int,
    is_drop_storage_: int,
    is_if_exists_: int,
    is_ignore_delete_triggers_: int,
    is_immediate_: int,
    is_only_: int,
    is_partition_all_: int,
    is_purge_snapshot_log_: int,
    is_restrict_when_delete_triggers_: int,
    is_reuse_storage_: int,
    restart_identity_: int
}
impl SqlTruncateStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlTruncateStatementDO {
    	for (tmp in db.sql_truncate_statement) {
            yield SqlTruncateStatementDO {
                oid_ : tmp.oid_,
                cascade_ : tmp.cascade_,
                is_continue_identity_ : tmp.is_continue_identity_,
                is_drop_storage_ : tmp.is_drop_storage_,
                is_if_exists_ : tmp.is_if_exists_,
                is_ignore_delete_triggers_ : tmp.is_ignore_delete_triggers_,
                is_immediate_ : tmp.is_immediate_,
                is_only_ : tmp.is_only_,
                is_partition_all_ : tmp.is_partition_all_,
                is_purge_snapshot_log_ : tmp.is_purge_snapshot_log_,
                is_restrict_when_delete_triggers_ : tmp.is_restrict_when_delete_triggers_,
                is_reuse_storage_ : tmp.is_reuse_storage_,
                restart_identity_ : tmp.restart_identity_
            }
    	}
    }
    /**
     * @brief gets the cascade of this element.
     * @return int
     */
    pub fn getCascade(self) -> int {
        return self.cascade_
    }
    /**
     * @brief gets the is continue identity of this element.
     * @return int
     */
    pub fn getIsContinueIdentity(self) -> int {
        return self.is_continue_identity_
    }
    /**
     * @brief gets the is drop storage of this element.
     * @return int
     */
    pub fn getIsDropStorage(self) -> int {
        return self.is_drop_storage_
    }
    /**
     * @brief gets the is if exists of this element.
     * @return int
     */
    pub fn getIsIfExists(self) -> int {
        return self.is_if_exists_
    }
    /**
     * @brief gets the is ignore delete triggers of this element.
     * @return int
     */
    pub fn getIsIgnoreDeleteTriggers(self) -> int {
        return self.is_ignore_delete_triggers_
    }
    /**
     * @brief gets the is immediate of this element.
     * @return int
     */
    pub fn getIsImmediate(self) -> int {
        return self.is_immediate_
    }
    /**
     * @brief gets the is only of this element.
     * @return int
     */
    pub fn getIsOnly(self) -> int {
        return self.is_only_
    }
    /**
     * @brief gets the is partition all of this element.
     * @return int
     */
    pub fn getIsPartitionAll(self) -> int {
        return self.is_partition_all_
    }
    /**
     * @brief gets the is purge snapshot log of this element.
     * @return int
     */
    pub fn getIsPurgeSnapshotLog(self) -> int {
        return self.is_purge_snapshot_log_
    }
    /**
     * @brief gets the is restrict when delete triggers of this element.
     * @return int
     */
    pub fn getIsRestrictWhenDeleteTriggers(self) -> int {
        return self.is_restrict_when_delete_triggers_
    }
    /**
     * @brief gets the is reuse storage of this element.
     * @return int
     */
    pub fn getIsReuseStorage(self) -> int {
        return self.is_reuse_storage_
    }
    /**
     * @brief gets the restart identity of this element.
     * @return int
     */
    pub fn getRestartIdentity(self) -> int {
        return self.restart_identity_
    }
}
/**
 * @brief DO class: A sql unary expr.
 */
schema SqlUnaryExprDO {
    @primary oid_: int,
    expr_oid_: int,
    operator_: string
}
impl SqlUnaryExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlUnaryExprDO {
    	for (tmp in db.sql_unary_expr) {
            yield SqlUnaryExprDO {
                oid_ : tmp.oid_,
                expr_oid_ : tmp.expr_oid_,
                operator_ : tmp.operator_
            }
    	}
    }
    /**
     * @brief gets the expr oid of this element.
     * @return int
     */
    pub fn getExprOid(self) -> int {
        return self.expr_oid_
    }
    /**
     * @brief gets the operator of this element.
     * @return string
     */
    pub fn getOperator(self) -> string {
        return self.operator_
    }
}
/**
 * @brief DO class: A sql union data type.
 */
schema SqlUnionDataTypeDO {
    @primary oid_: int,
    name_: string
}
impl SqlUnionDataTypeDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlUnionDataTypeDO {
    	for (tmp in db.sql_union_data_type) {
            yield SqlUnionDataTypeDO {
                oid_ : tmp.oid_,
                name_ : tmp.name_
            }
    	}
    }
    /**
     * @brief gets the name of this element.
     * @return string
     */
    pub fn getName(self) -> string {
        return self.name_
    }
}
/**
 * @brief DO class: A sql union query.
 */
schema SqlUnionQueryDO {
    @primary oid_: int,
    first_query_block_oid_: int,
    is_empty_: int,
    left_oid_: int,
    limit_oid_: int,
    operator_: string,
    order_by_oid_: int,
    right_oid_: int
}
impl SqlUnionQueryDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlUnionQueryDO {
    	for (tmp in db.sql_union_query) {
            yield SqlUnionQueryDO {
                oid_ : tmp.oid_,
                first_query_block_oid_ : tmp.first_query_block_oid_,
                is_empty_ : tmp.is_empty_,
                left_oid_ : tmp.left_oid_,
                limit_oid_ : tmp.limit_oid_,
                operator_ : tmp.operator_,
                order_by_oid_ : tmp.order_by_oid_,
                right_oid_ : tmp.right_oid_
            }
    	}
    }
    /**
     * @brief gets the first query block oid of this element.
     * @return int
     */
    pub fn getFirstQueryBlockOid(self) -> int {
        return self.first_query_block_oid_
    }
    /**
     * @brief gets the is empty of this element.
     * @return int
     */
    pub fn getIsEmpty(self) -> int {
        return self.is_empty_
    }
    /**
     * @brief gets the left oid of this element.
     * @return int
     */
    pub fn getLeftOid(self) -> int {
        return self.left_oid_
    }
    /**
     * @brief gets the limit oid of this element.
     * @return int
     */
    pub fn getLimitOid(self) -> int {
        return self.limit_oid_
    }
    /**
     * @brief gets the operator of this element.
     * @return string
     */
    pub fn getOperator(self) -> string {
        return self.operator_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the right oid of this element.
     * @return int
     */
    pub fn getRightOid(self) -> int {
        return self.right_oid_
    }
}
/**
 * @brief DO class: A sql union query table source.
 */
schema SqlUnionQueryTableSourceDO {
    @primary oid_: int,
    union_oid_: int
}
impl SqlUnionQueryTableSourceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlUnionQueryTableSourceDO {
    	for (tmp in db.sql_union_query_table_source) {
            yield SqlUnionQueryTableSourceDO {
                oid_ : tmp.oid_,
                union_oid_ : tmp.union_oid_
            }
    	}
    }
    /**
     * @brief gets the union oid of this element.
     * @return int
     */
    pub fn getUnionOid(self) -> int {
        return self.union_oid_
    }
}
/**
 * @brief DO class: A sql unique.
 */
schema SqlUniqueDO {
    @primary oid_: int,
    comment_oid_: int,
    index_definition_oid_: int,
    name_oid_: int
}
impl SqlUniqueDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlUniqueDO {
    	for (tmp in db.sql_unique) {
            yield SqlUniqueDO {
                oid_ : tmp.oid_,
                comment_oid_ : tmp.comment_oid_,
                index_definition_oid_ : tmp.index_definition_oid_,
                name_oid_ : tmp.name_oid_
            }
    	}
    }
    /**
     * @brief gets the comment oid of this element.
     * @return int
     */
    pub fn getCommentOid(self) -> int {
        return self.comment_oid_
    }
    /**
     * @brief gets the index definition oid of this element.
     * @return int
     */
    pub fn getIndexDefinitionOid(self) -> int {
        return self.index_definition_oid_
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
}
/**
 * @brief DO class: A sql unnest table source.
 */
schema SqlUnnestTableSourceDO {
    @primary oid_: int,
    is_ordinality_: int
}
impl SqlUnnestTableSourceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlUnnestTableSourceDO {
    	for (tmp in db.sql_unnest_table_source) {
            yield SqlUnnestTableSourceDO {
                oid_ : tmp.oid_,
                is_ordinality_ : tmp.is_ordinality_
            }
    	}
    }
    /**
     * @brief gets the is ordinality of this element.
     * @return int
     */
    pub fn getIsOrdinality(self) -> int {
        return self.is_ordinality_
    }
}
/**
 * @brief DO class: A sql update set item.
 */
schema SqlUpdateSetItemDO {
    @primary oid_: int,
    column_oid_: int,
    value_oid_: int
}
impl SqlUpdateSetItemDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlUpdateSetItemDO {
    	for (tmp in db.sql_update_set_item) {
            yield SqlUpdateSetItemDO {
                oid_ : tmp.oid_,
                column_oid_ : tmp.column_oid_,
                value_oid_ : tmp.value_oid_
            }
    	}
    }
    /**
     * @brief gets the column oid of this element.
     * @return int
     */
    pub fn getColumnOid(self) -> int {
        return self.column_oid_
    }
    /**
     * @brief gets the value oid of this element.
     * @return int
     */
    pub fn getValueOid(self) -> int {
        return self.value_oid_
    }
}
/**
 * @brief DO class: A sql update statement.
 */
schema SqlUpdateStatementDO {
    @primary oid_: int,
    from_oid_: int,
    order_by_oid_: int,
    table_name_oid_: int,
    table_source_oid_: int,
    where_oid_: int,
    with_oid_: int
}
impl SqlUpdateStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlUpdateStatementDO {
    	for (tmp in db.sql_update_statement) {
            yield SqlUpdateStatementDO {
                oid_ : tmp.oid_,
                from_oid_ : tmp.from_oid_,
                order_by_oid_ : tmp.order_by_oid_,
                table_name_oid_ : tmp.table_name_oid_,
                table_source_oid_ : tmp.table_source_oid_,
                where_oid_ : tmp.where_oid_,
                with_oid_ : tmp.with_oid_
            }
    	}
    }
    /**
     * @brief gets the from oid of this element.
     * @return int
     */
    pub fn getFromOid(self) -> int {
        return self.from_oid_
    }
    /**
     * @brief gets the order by oid of this element.
     * @return int
     */
    pub fn getOrderByOid(self) -> int {
        return self.order_by_oid_
    }
    /**
     * @brief gets the table name oid of this element.
     * @return int
     */
    pub fn getTableNameOid(self) -> int {
        return self.table_name_oid_
    }
    /**
     * @brief gets the table source oid of this element.
     * @return int
     */
    pub fn getTableSourceOid(self) -> int {
        return self.table_source_oid_
    }
    /**
     * @brief gets the where oid of this element.
     * @return int
     */
    pub fn getWhereOid(self) -> int {
        return self.where_oid_
    }
    /**
     * @brief gets the with oid of this element.
     * @return int
     */
    pub fn getWithOid(self) -> int {
        return self.with_oid_
    }
}
/**
 * @brief DO class: A sql use statement.
 */
schema SqlUseStatementDO {
    @primary oid_: int,
    database_oid_: int
}
impl SqlUseStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlUseStatementDO {
    	for (tmp in db.sql_use_statement) {
            yield SqlUseStatementDO {
                oid_ : tmp.oid_,
                database_oid_ : tmp.database_oid_
            }
    	}
    }
    /**
     * @brief gets the database oid of this element.
     * @return int
     */
    pub fn getDatabaseOid(self) -> int {
        return self.database_oid_
    }
}
/**
 * @brief DO class: A sql values expr.
 */
schema SqlValuesExprDO {
    @primary oid_: int
}
impl SqlValuesExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlValuesExprDO {
    	for (tmp in db.sql_values_expr) {
            yield SqlValuesExprDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql values query.
 */
schema SqlValuesQueryDO {
    @primary oid_: int
}
impl SqlValuesQueryDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlValuesQueryDO {
    	for (tmp in db.sql_values_query) {
            yield SqlValuesQueryDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql values table source.
 */
schema SqlValuesTableSourceDO {
    @primary oid_: int,
    is_parenthesized_: int
}
impl SqlValuesTableSourceDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlValuesTableSourceDO {
    	for (tmp in db.sql_values_table_source) {
            yield SqlValuesTableSourceDO {
                oid_ : tmp.oid_,
                is_parenthesized_ : tmp.is_parenthesized_
            }
    	}
    }
    /**
     * @brief gets the is parenthesized of this element.
     * @return int
     */
    pub fn getIsParenthesized(self) -> int {
        return self.is_parenthesized_
    }
}
/**
 * @brief DO class: A sql variant ref expr.
 */
schema SqlVariantRefExprDO {
    @primary oid_: int,
    index_: int,
    is_global_: int,
    is_session_: int,
    name_: string
}
impl SqlVariantRefExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlVariantRefExprDO {
    	for (tmp in db.sql_variant_ref_expr) {
            yield SqlVariantRefExprDO {
                oid_ : tmp.oid_,
                index_ : tmp.index_,
                is_global_ : tmp.is_global_,
                is_session_ : tmp.is_session_,
                name_ : tmp.name_
            }
    	}
    }
    /**
     * @brief gets the index of this element.
     * @return int
     */
    pub fn getIndex(self) -> int {
        return self.index_
    }
    /**
     * @brief gets the is global of this element.
     * @return int
     */
    pub fn getIsGlobal(self) -> int {
        return self.is_global_
    }
    /**
     * @brief gets the is session of this element.
     * @return int
     */
    pub fn getIsSession(self) -> int {
        return self.is_session_
    }
    /**
     * @brief gets the name of this element.
     * @return string
     */
    pub fn getName(self) -> string {
        return self.name_
    }
}
/**
 * @brief DO class: A sql while statement.
 */
schema SqlWhileStatementDO {
    @primary oid_: int,
    condition_oid_: int,
    label_name_: string
}
impl SqlWhileStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlWhileStatementDO {
    	for (tmp in db.sql_while_statement) {
            yield SqlWhileStatementDO {
                oid_ : tmp.oid_,
                condition_oid_ : tmp.condition_oid_,
                label_name_ : tmp.label_name_
            }
    	}
    }
    /**
     * @brief gets the condition oid of this element.
     * @return int
     */
    pub fn getConditionOid(self) -> int {
        return self.condition_oid_
    }
    /**
     * @brief gets the label name of this element.
     * @return string
     */
    pub fn getLabelName(self) -> string {
        return self.label_name_
    }
}
/**
 * @brief DO class: A sql whoami statement.
 */
schema SqlWhoamiStatementDO {
    @primary oid_: int
}
impl SqlWhoamiStatementDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlWhoamiStatementDO {
    	for (tmp in db.sql_whoami_statement) {
            yield SqlWhoamiStatementDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sql window.
 */
schema SqlWindowDO {
    @primary oid_: int,
    name_oid_: int,
    over_oid_: int
}
impl SqlWindowDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlWindowDO {
    	for (tmp in db.sql_window) {
            yield SqlWindowDO {
                oid_ : tmp.oid_,
                name_oid_ : tmp.name_oid_,
                over_oid_ : tmp.over_oid_
            }
    	}
    }
    /**
     * @brief gets the name oid of this element.
     * @return int
     */
    pub fn getNameOid(self) -> int {
        return self.name_oid_
    }
    /**
     * @brief gets the over oid of this element.
     * @return int
     */
    pub fn getOverOid(self) -> int {
        return self.over_oid_
    }
}
/**
 * @brief DO class: A sql with subquery clause.
 */
schema SqlWithSubqueryClauseDO {
    @primary oid_: int,
    entries_: string,
    recursive_: int
}
impl SqlWithSubqueryClauseDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlWithSubqueryClauseDO {
    	for (tmp in db.sql_with_subquery_clause) {
            yield SqlWithSubqueryClauseDO {
                oid_ : tmp.oid_,
                entries_ : tmp.entries_,
                recursive_ : tmp.recursive_
            }
    	}
    }
    /**
     * @brief gets the entries of this element.
     * @return string
     */
    pub fn getEntries(self) -> string {
        return self.entries_
    }
    /**
     * @brief gets the recursive of this element.
     * @return int
     */
    pub fn getRecursive(self) -> int {
        return self.recursive_
    }
}
/**
 * @brief DO class: A sqljson expr.
 */
schema SqljsonExprDO {
    @primary oid_: int,
    literal_: string,
    value_: string
}
impl SqljsonExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqljsonExprDO {
    	for (tmp in db.sqljson_expr) {
            yield SqljsonExprDO {
                oid_ : tmp.oid_,
                literal_ : tmp.literal_,
                value_ : tmp.value_
            }
    	}
    }
    /**
     * @brief gets the literal of this element.
     * @return string
     */
    pub fn getLiteral(self) -> string {
        return self.literal_
    }
    /**
     * @brief gets the value of this element.
     * @return string
     */
    pub fn getValue(self) -> string {
        return self.value_
    }
}
/**
 * @brief DO class: A sqln char expr.
 */
schema SqlnCharExprDO {
    @primary oid_: int
}
impl SqlnCharExprDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlnCharExprDO {
    	for (tmp in db.sqln_char_expr) {
            yield SqlnCharExprDO {
                oid_ : tmp.oid_
            }
    	}
    }
}
/**
 * @brief DO class: A sqlz order by.
 */
schema SqlzOrderByDO {
    @primary oid_: int,
    is_sibings_: int
}
impl SqlzOrderByDO {
    @data_constraint
    @inline
    pub fn __all__(db: SqlDB) -> *SqlzOrderByDO {
    	for (tmp in db.sqlz_order_by) {
            yield SqlzOrderByDO {
                oid_ : tmp.oid_,
                is_sibings_ : tmp.is_sibings_
            }
    	}
    }
    /**
     * @brief gets the is sibings of this element.
     * @return int
     */
    pub fn getIsSibings(self) -> int {
        return self.is_sibings_
    }
}

database SqlDB {
    antspark_create_table_statement: *AntsparkCreateTableStatementDO,
    blink_create_table_statement: *BlinkCreateTableStatementDO,
    clickhouse_create_table_statement: *ClickhouseCreateTableStatementDO,
    cobar_show_status: *CobarShowStatusDO,
    corpus: *CorpusDO,
    cycle_clause: *CycleClauseDO,
    db2_create_table_statement: *Db2CreateTableStatementDO,
    db2_select_query_block: *Db2SelectQueryBlockDO,
    db2_statement_impl: *Db2StatementImplDO,
    db2_values_statement: *Db2ValuesStatementDO,
    drds_baseline_statement: *DrdsBaselineStatementDO,
    drds_cancel_ddl_job: *DrdsCancelDdlJobDO,
    drds_change_ddl_job: *DrdsChangeDdlJobDO,
    drds_clear_ddl_job_cache: *DrdsClearDdlJobCacheDO,
    drds_inspect_ddl_job_cache: *DrdsInspectDdlJobCacheDO,
    drds_recover_ddl_job: *DrdsRecoverDdlJobDO,
    drds_remove_ddl_job: *DrdsRemoveDdlJobDO,
    drds_rollback_ddl_job: *DrdsRollbackDdlJobDO,
    drds_show_ddl_jobs: *DrdsShowDdlJobsDO,
    drds_show_global_index: *DrdsShowGlobalIndexDO,
    drds_show_metadata_lock: *DrdsShowMetadataLockDO,
    file: *FileDO,
    hive_create_function_statement: *HiveCreateFunctionStatementDO,
    hive_create_table_statement: *HiveCreateTableStatementDO,
    hive_input_output_format: *HiveInputOutputFormatDO,
    hive_insert: *HiveInsertDO,
    hive_insert_statement: *HiveInsertStatementDO,
    hive_load_data_statement: *HiveLoadDataStatementDO,
    hive_msck_repair_statement: *HiveMsckRepairStatementDO,
    hive_multi_insert_statement: *HiveMultiInsertStatementDO,
    location: *LocationDO,
    model_clause: *ModelClauseDO,
    my_sql_alter_database_kill_job: *MySqlAlterDatabaseKillJobDO,
    my_sql_alter_database_set_option: *MySqlAlterDatabaseSetOptionDO,
    my_sql_alter_event_statement: *MySqlAlterEventStatementDO,
    my_sql_alter_log_file_group_statement: *MySqlAlterLogFileGroupStatementDO,
    my_sql_alter_server_statement: *MySqlAlterServerStatementDO,
    my_sql_alter_table_alter_column: *MySqlAlterTableAlterColumnDO,
    my_sql_alter_table_alter_full_text_index: *MySqlAlterTableAlterFullTextIndexDO,
    my_sql_alter_table_change_column: *MySqlAlterTableChangeColumnDO,
    my_sql_alter_table_discard_tablespace: *MySqlAlterTableDiscardTablespaceDO,
    my_sql_alter_table_force: *MySqlAlterTableForceDO,
    my_sql_alter_table_import_tablespace: *MySqlAlterTableImportTablespaceDO,
    my_sql_alter_table_lock: *MySqlAlterTableLockDO,
    my_sql_alter_table_modify_column: *MySqlAlterTableModifyColumnDO,
    my_sql_alter_table_option: *MySqlAlterTableOptionDO,
    my_sql_alter_table_order_by: *MySqlAlterTableOrderByDO,
    my_sql_alter_table_validation: *MySqlAlterTableValidationDO,
    my_sql_alter_tablespace_statement: *MySqlAlterTablespaceStatementDO,
    my_sql_alter_user_statement: *MySqlAlterUserStatementDO,
    my_sql_analyze_statement: *MySqlAnalyzeStatementDO,
    my_sql_binlog_statement: *MySqlBinlogStatementDO,
    my_sql_case_statement: *MySqlCaseStatementDO,
    my_sql_char_expr: *MySqlCharExprDO,
    my_sql_check_table_statement: *MySqlCheckTableStatementDO,
    my_sql_checksum_table_statement: *MySqlChecksumTableStatementDO,
    my_sql_clear_plan_cache_statement: *MySqlClearPlanCacheStatementDO,
    my_sql_create_add_log_file_group_statement: *MySqlCreateAddLogFileGroupStatementDO,
    my_sql_create_event_statement: *MySqlCreateEventStatementDO,
    my_sql_create_external_catalog_statement: *MySqlCreateExternalCatalogStatementDO,
    my_sql_create_server_statement: *MySqlCreateServerStatementDO,
    my_sql_create_table_space_statement: *MySqlCreateTableSpaceStatementDO,
    my_sql_create_table_statement: *MySqlCreateTableStatementDO,
    my_sql_create_user_statement: *MySqlCreateUserStatementDO,
    my_sql_cursor_declare_statement: *MySqlCursorDeclareStatementDO,
    my_sql_declare_condition_statement: *MySqlDeclareConditionStatementDO,
    my_sql_declare_handler_statement: *MySqlDeclareHandlerStatementDO,
    my_sql_declare_statement: *MySqlDeclareStatementDO,
    my_sql_delete_statement: *MySqlDeleteStatementDO,
    my_sql_disabled_plan_cache_statement: *MySqlDisabledPlanCacheStatementDO,
    my_sql_event_schedule: *MySqlEventScheduleDO,
    my_sql_execute_for_ads_statement: *MySqlExecuteForAdsStatementDO,
    my_sql_execute_statement: *MySqlExecuteStatementDO,
    my_sql_explain_plan_cache_statement: *MySqlExplainPlanCacheStatementDO,
    my_sql_explain_statement: *MySqlExplainStatementDO,
    my_sql_expr_impl: *MySqlExprImplDO,
    my_sql_ext_partition: *MySqlExtPartitionDO,
    my_sql_flashback_statement: *MySqlFlashbackStatementDO,
    my_sql_flush_statement: *MySqlFlushStatementDO,
    my_sql_force_index_hint: *MySqlForceIndexHintDO,
    my_sql_help_statement: *MySqlHelpStatementDO,
    my_sql_hint_statement: *MySqlHintStatementDO,
    my_sql_ignore_index_hint: *MySqlIgnoreIndexHintDO,
    my_sql_index_hint_impl: *MySqlIndexHintImplDO,
    my_sql_insert_statement: *MySqlInsertStatementDO,
    my_sql_iterate_statement: *MySqlIterateStatementDO,
    my_sql_json_table_expr: *MySqlJsonTableExprDO,
    my_sql_key: *MySqlKeyDO,
    my_sql_kill_statement: *MySqlKillStatementDO,
    my_sql_leave_statement: *MySqlLeaveStatementDO,
    my_sql_load_data_in_file_statement: *MySqlLoadDataInFileStatementDO,
    my_sql_load_xml_statement: *MySqlLoadXmlStatementDO,
    my_sql_lock_table_statement: *MySqlLockTableStatementDO,
    my_sql_manage_instance_group_statement: *MySqlManageInstanceGroupStatementDO,
    my_sql_migrate_statement: *MySqlMigrateStatementDO,
    my_sql_object_impl: *MySqlObjectImplDO,
    my_sql_optimize_statement: *MySqlOptimizeStatementDO,
    my_sql_ordering_expr: *MySqlOrderingExprDO,
    my_sql_out_file_expr: *MySqlOutFileExprDO,
    my_sql_partition_by_key: *MySqlPartitionByKeyDO,
    my_sql_prepare_statement: *MySqlPrepareStatementDO,
    my_sql_primary_key: *MySqlPrimaryKeyDO,
    my_sql_raft_leader_transfer_statement: *MySqlRaftLeaderTransferStatementDO,
    my_sql_raft_member_change_statement: *MySqlRaftMemberChangeStatementDO,
    my_sql_rename_sequence_statement: *MySqlRenameSequenceStatementDO,
    my_sql_rename_table_statement: *MySqlRenameTableStatementDO,
    my_sql_repeat_statement: *MySqlRepeatStatementDO,
    my_sql_reset_statement: *MySqlResetStatementDO,
    my_sql_select_into_statement: *MySqlSelectIntoStatementDO,
    my_sql_select_query_block: *MySqlSelectQueryBlockDO,
    my_sql_set_transaction_statement: *MySqlSetTransactionStatementDO,
    my_sql_show_authors_statement: *MySqlShowAuthorsStatementDO,
    my_sql_show_bin_log_events_statement: *MySqlShowBinLogEventsStatementDO,
    my_sql_show_binary_logs_statement: *MySqlShowBinaryLogsStatementDO,
    my_sql_show_broadcasts_statement: *MySqlShowBroadcastsStatementDO,
    my_sql_show_character_set_statement: *MySqlShowCharacterSetStatementDO,
    my_sql_show_cluster_name_statement: *MySqlShowClusterNameStatementDO,
    my_sql_show_collation_statement: *MySqlShowCollationStatementDO,
    my_sql_show_config_statement: *MySqlShowConfigStatementDO,
    my_sql_show_contributors_statement: *MySqlShowContributorsStatementDO,
    my_sql_show_create_database_statement: *MySqlShowCreateDatabaseStatementDO,
    my_sql_show_create_event_statement: *MySqlShowCreateEventStatementDO,
    my_sql_show_create_function_statement: *MySqlShowCreateFunctionStatementDO,
    my_sql_show_create_procedure_statement: *MySqlShowCreateProcedureStatementDO,
    my_sql_show_create_trigger_statement: *MySqlShowCreateTriggerStatementDO,
    my_sql_show_database_status_statement: *MySqlShowDatabaseStatusStatementDO,
    my_sql_show_datasources_statement: *MySqlShowDatasourcesStatementDO,
    my_sql_show_ddl_status_statement: *MySqlShowDdlStatusStatementDO,
    my_sql_show_ds_statement: *MySqlShowDsStatementDO,
    my_sql_show_engine_statement: *MySqlShowEngineStatementDO,
    my_sql_show_engines_statement: *MySqlShowEnginesStatementDO,
    my_sql_show_errors_statement: *MySqlShowErrorsStatementDO,
    my_sql_show_events_statement: *MySqlShowEventsStatementDO,
    my_sql_show_function_code_statement: *MySqlShowFunctionCodeStatementDO,
    my_sql_show_function_status_statement: *MySqlShowFunctionStatusStatementDO,
    my_sql_show_grants_statement: *MySqlShowGrantsStatementDO,
    my_sql_show_help_statement: *MySqlShowHelpStatementDO,
    my_sql_show_hms_meta_statement: *MySqlShowHmsMetaStatementDO,
    my_sql_show_job_status_statement: *MySqlShowJobStatusStatementDO,
    my_sql_show_master_logs_statement: *MySqlShowMasterLogsStatementDO,
    my_sql_show_master_status_statement: *MySqlShowMasterStatusStatementDO,
    my_sql_show_migrate_task_status_statement: *MySqlShowMigrateTaskStatusStatementDO,
    my_sql_show_node_statement: *MySqlShowNodeStatementDO,
    my_sql_show_open_tables_statement: *MySqlShowOpenTablesStatementDO,
    my_sql_show_partitions_statement: *MySqlShowPartitionsStatementDO,
    my_sql_show_physical_processlist_statement: *MySqlShowPhysicalProcesslistStatementDO,
    my_sql_show_plan_cache_statement: *MySqlShowPlanCacheStatementDO,
    my_sql_show_plan_cache_status_statement: *MySqlShowPlanCacheStatusStatementDO,
    my_sql_show_plugins_statement: *MySqlShowPluginsStatementDO,
    my_sql_show_privileges_statement: *MySqlShowPrivilegesStatementDO,
    my_sql_show_procedure_code_statement: *MySqlShowProcedureCodeStatementDO,
    my_sql_show_procedure_status_statement: *MySqlShowProcedureStatusStatementDO,
    my_sql_show_process_list_statement: *MySqlShowProcessListStatementDO,
    my_sql_show_profile_statement: *MySqlShowProfileStatementDO,
    my_sql_show_profiles_statement: *MySqlShowProfilesStatementDO,
    my_sql_show_relay_log_events_statement: *MySqlShowRelayLogEventsStatementDO,
    my_sql_show_rule_statement: *MySqlShowRuleStatementDO,
    my_sql_show_rule_status_statement: *MySqlShowRuleStatusStatementDO,
    my_sql_show_sequences_statement: *MySqlShowSequencesStatementDO,
    my_sql_show_slave_hosts_statement: *MySqlShowSlaveHostsStatementDO,
    my_sql_show_slave_status_statement: *MySqlShowSlaveStatusStatementDO,
    my_sql_show_slow_statement: *MySqlShowSlowStatementDO,
    my_sql_show_status_statement: *MySqlShowStatusStatementDO,
    my_sql_show_table_status_statement: *MySqlShowTableStatusStatementDO,
    my_sql_show_topology_statement: *MySqlShowTopologyStatementDO,
    my_sql_show_trace_statement: *MySqlShowTraceStatementDO,
    my_sql_show_triggers_statement: *MySqlShowTriggersStatementDO,
    my_sql_show_warnings_statement: *MySqlShowWarningsStatementDO,
    my_sql_statement_impl: *MySqlStatementImplDO,
    my_sql_sub_partition_by_key: *MySqlSubPartitionByKeyDO,
    my_sql_sub_partition_by_list: *MySqlSubPartitionByListDO,
    my_sql_sub_partition_by_value: *MySqlSubPartitionByValueDO,
    my_sql_table_index: *MySqlTableIndexDO,
    my_sql_unique: *MySqlUniqueDO,
    my_sql_unlock_tables_statement: *MySqlUnlockTablesStatementDO,
    my_sql_update_plan_cache_statement: *MySqlUpdatePlanCacheStatementDO,
    my_sql_update_statement: *MySqlUpdateStatementDO,
    my_sql_update_table_source: *MySqlUpdateTableSourceDO,
    my_sql_use_index_hint: *MySqlUseIndexHintDO,
    my_sql_user_name: *MySqlUserNameDO,
    mysql_alter_full_text_statement: *MysqlAlterFullTextStatementDO,
    mysql_alter_table_alter_check: *MysqlAlterTableAlterCheckDO,
    mysql_create_full_text_analyzer_statement: *MysqlCreateFullTextAnalyzerStatementDO,
    mysql_create_full_text_char_filter_statement: *MysqlCreateFullTextCharFilterStatementDO,
    mysql_create_full_text_dictionary_statement: *MysqlCreateFullTextDictionaryStatementDO,
    mysql_create_full_text_token_filter_statement: *MysqlCreateFullTextTokenFilterStatementDO,
    mysql_create_full_text_tokenizer_statement: *MysqlCreateFullTextTokenizerStatementDO,
    mysql_deallocate_prepare_statement: *MysqlDeallocatePrepareStatementDO,
    mysql_drop_full_text_statement: *MysqlDropFullTextStatementDO,
    mysql_foreign_key: *MysqlForeignKeyDO,
    mysql_show_create_full_text_statement: *MysqlShowCreateFullTextStatementDO,
    mysql_show_db_lock_statement: *MysqlShowDbLockStatementDO,
    mysql_show_full_text_statement: *MysqlShowFullTextStatementDO,
    mysql_show_htc_statement: *MysqlShowHtcStatementDO,
    mysql_show_stc_statement: *MysqlShowStcStatementDO,
    odps_add_account_provider_statement: *OdpsAddAccountProviderStatementDO,
    odps_add_file_statement: *OdpsAddFileStatementDO,
    odps_add_statistic_statement: *OdpsAddStatisticStatementDO,
    odps_add_table_statement: *OdpsAddTableStatementDO,
    odps_add_user_statement: *OdpsAddUserStatementDO,
    odps_alter_table_set_change_logs: *OdpsAlterTableSetChangeLogsDO,
    odps_alter_table_set_file_format: *OdpsAlterTableSetFileFormatDO,
    odps_count_statement: *OdpsCountStatementDO,
    odps_create_table_statement: *OdpsCreateTableStatementDO,
    odps_declare_variable_statement: *OdpsDeclareVariableStatementDO,
    odps_exstore_statement: *OdpsExstoreStatementDO,
    odps_grant_stmt: *OdpsGrantStmtDO,
    odps_install_package_statement: *OdpsInstallPackageStatementDO,
    odps_list_stmt: *OdpsListStmtDO,
    odps_new_expr: *OdpsNewExprDO,
    odps_object_impl: *OdpsObjectImplDO,
    odps_query_alias_statement: *OdpsQueryAliasStatementDO,
    odps_read_statement: *OdpsReadStatementDO,
    odps_remove_statistic_statement: *OdpsRemoveStatisticStatementDO,
    odps_remove_user_statement: *OdpsRemoveUserStatementDO,
    odps_restore_statement: *OdpsRestoreStatementDO,
    odps_select_query_block: *OdpsSelectQueryBlockDO,
    odps_set_label_statement: *OdpsSetLabelStatementDO,
    odps_show_changelogs_statement: *OdpsShowChangelogsStatementDO,
    odps_show_grants_stmt: *OdpsShowGrantsStmtDO,
    odps_statement_impl: *OdpsStatementImplDO,
    odps_statistic_clause: *OdpsStatisticClauseDO,
    odps_transform_expr: *OdpsTransformExprDO,
    odps_udtfsql_select_item: *OdpsUdtfsqlSelectItemDO,
    odps_undo_table_statement: *OdpsUndoTableStatementDO,
    odps_unload_statement: *OdpsUnloadStatementDO,
    oracle_alter_session_statement: *OracleAlterSessionStatementDO,
    oracle_alter_synonym_statement: *OracleAlterSynonymStatementDO,
    oracle_alter_table_drop_partition: *OracleAlterTableDropPartitionDO,
    oracle_alter_table_item: *OracleAlterTableItemDO,
    oracle_alter_table_modify: *OracleAlterTableModifyDO,
    oracle_alter_table_move_tablespace: *OracleAlterTableMoveTablespaceDO,
    oracle_alter_table_split_partition: *OracleAlterTableSplitPartitionDO,
    oracle_alter_table_truncate_partition: *OracleAlterTableTruncatePartitionDO,
    oracle_alter_tablespace_add_data_file: *OracleAlterTablespaceAddDataFileDO,
    oracle_alter_tablespace_statement: *OracleAlterTablespaceStatementDO,
    oracle_alter_trigger_statement: *OracleAlterTriggerStatementDO,
    oracle_alter_view_statement: *OracleAlterViewStatementDO,
    oracle_analytic: *OracleAnalyticDO,
    oracle_analytic_windowing: *OracleAnalyticWindowingDO,
    oracle_argument_expr: *OracleArgumentExprDO,
    oracle_binary_double_expr: *OracleBinaryDoubleExprDO,
    oracle_binary_float_expr: *OracleBinaryFloatExprDO,
    oracle_check: *OracleCheckDO,
    oracle_continue_statement: *OracleContinueStatementDO,
    oracle_create_database_db_link_statement: *OracleCreateDatabaseDbLinkStatementDO,
    oracle_create_index_statement: *OracleCreateIndexStatementDO,
    oracle_create_package_statement: *OracleCreatePackageStatementDO,
    oracle_create_synonym_statement: *OracleCreateSynonymStatementDO,
    oracle_create_table_statement: *OracleCreateTableStatementDO,
    oracle_create_type_statement: *OracleCreateTypeStatementDO,
    oracle_cursor_expr: *OracleCursorExprDO,
    oracle_data_type_interval_day: *OracleDataTypeIntervalDayDO,
    oracle_data_type_interval_year: *OracleDataTypeIntervalYearDO,
    oracle_datetime_expr: *OracleDatetimeExprDO,
    oracle_delete_statement: *OracleDeleteStatementDO,
    oracle_drop_db_link_statement: *OracleDropDbLinkStatementDO,
    oracle_exception_statement: *OracleExceptionStatementDO,
    oracle_execute_immediate_statement: *OracleExecuteImmediateStatementDO,
    oracle_exit_statement: *OracleExitStatementDO,
    oracle_explain_statement: *OracleExplainStatementDO,
    oracle_file_specification: *OracleFileSpecificationDO,
    oracle_for_statement: *OracleForStatementDO,
    oracle_foreign_key: *OracleForeignKeyDO,
    oracle_goto_statement: *OracleGotoStatementDO,
    oracle_insert_statement: *OracleInsertStatementDO,
    oracle_interval_expr: *OracleIntervalExprDO,
    oracle_is_of_type_expr: *OracleIsOfTypeExprDO,
    oracle_is_set_expr: *OracleIsSetExprDO,
    oracle_label_statement: *OracleLabelStatementDO,
    oracle_lob_storage_clause: *OracleLobStorageClauseDO,
    oracle_lock_table_statement: *OracleLockTableStatementDO,
    oracle_multi_insert_statement: *OracleMultiInsertStatementDO,
    oracle_outer_expr: *OracleOuterExprDO,
    oracle_pipe_row_statement: *OraclePipeRowStatementDO,
    oracle_primary_key: *OraclePrimaryKeyDO,
    oracle_raise_statement: *OracleRaiseStatementDO,
    oracle_range_expr: *OracleRangeExprDO,
    oracle_returning_clause: *OracleReturningClauseDO,
    oracle_run_statement: *OracleRunStatementDO,
    oracle_segment_attributes_impl: *OracleSegmentAttributesImplDO,
    oracle_select_join: *OracleSelectJoinDO,
    oracle_select_pivot: *OracleSelectPivotDO,
    oracle_select_pivot_base: *OracleSelectPivotBaseDO,
    oracle_select_query_block: *OracleSelectQueryBlockDO,
    oracle_select_restriction: *OracleSelectRestrictionDO,
    oracle_select_subquery_table_source: *OracleSelectSubqueryTableSourceDO,
    oracle_select_table_reference: *OracleSelectTableReferenceDO,
    oracle_select_un_pivot: *OracleSelectUnPivotDO,
    oracle_set_transaction_statement: *OracleSetTransactionStatementDO,
    oracle_sql_object_impl: *OracleSqlObjectImplDO,
    oracle_statement_impl: *OracleStatementImplDO,
    oracle_storage_clause: *OracleStorageClauseDO,
    oracle_supplemental_id_key: *OracleSupplementalIdKeyDO,
    oracle_supplemental_log_grp: *OracleSupplementalLogGrpDO,
    oracle_sysdate_expr: *OracleSysdateExprDO,
    oracle_treat_expr: *OracleTreatExprDO,
    oracle_unique: *OracleUniqueDO,
    oracle_update_statement: *OracleUpdateStatementDO,
    oracle_using_index_clause: *OracleUsingIndexClauseDO,
    oracle_with_subquery_entry: *OracleWithSubqueryEntryDO,
    oracle_xml_column_properties: *OracleXmlColumnPropertiesDO,
    oscar_alter_schema_statement: *OscarAlterSchemaStatementDO,
    oscar_connect_to_statement: *OscarConnectToStatementDO,
    oscar_create_schema_statement: *OscarCreateSchemaStatementDO,
    oscar_delete_statement: *OscarDeleteStatementDO,
    oscar_drop_schema_statement: *OscarDropSchemaStatementDO,
    oscar_function_table_source: *OscarFunctionTableSourceDO,
    oscar_insert_statement: *OscarInsertStatementDO,
    oscar_object_impl: *OscarObjectImplDO,
    oscar_select_query_block: *OscarSelectQueryBlockDO,
    oscar_select_statement: *OscarSelectStatementDO,
    oscar_show_statement: *OscarShowStatementDO,
    oscar_start_transaction_statement: *OscarStartTransactionStatementDO,
    oscar_top: *OscarTopDO,
    oscar_update_statement: *OscarUpdateStatementDO,
    partition_extension_clause: *PartitionExtensionClauseDO,
    pg_alter_schema_statement: *PgAlterSchemaStatementDO,
    pg_box_expr: *PgBoxExprDO,
    pg_cidr_expr: *PgCidrExprDO,
    pg_circle_expr: *PgCircleExprDO,
    pg_connect_to_statement: *PgConnectToStatementDO,
    pg_create_schema_statement: *PgCreateSchemaStatementDO,
    pg_delete_statement: *PgDeleteStatementDO,
    pg_drop_schema_statement: *PgDropSchemaStatementDO,
    pg_expr_impl: *PgExprImplDO,
    pg_extract_expr: *PgExtractExprDO,
    pg_function_table_source: *PgFunctionTableSourceDO,
    pg_inet_expr: *PgInetExprDO,
    pg_insert_statement: *PgInsertStatementDO,
    pg_line_segments_expr: *PgLineSegmentsExprDO,
    pg_mac_addr_expr: *PgMacAddrExprDO,
    pg_point_expr: *PgPointExprDO,
    pg_polygon_expr: *PgPolygonExprDO,
    pg_select_query_block: *PgSelectQueryBlockDO,
    pg_select_statement: *PgSelectStatementDO,
    pg_show_statement: *PgShowStatementDO,
    pg_start_transaction_statement: *PgStartTransactionStatementDO,
    pg_type_cast_expr: *PgTypeCastExprDO,
    pg_update_statement: *PgUpdateStatementDO,
    pgsql_object_impl: *PgsqlObjectImplDO,
    phoenix_statement_impl: *PhoenixStatementImplDO,
    sample_clause: *SampleClauseDO,
    search_clause: *SearchClauseDO,
    sql_adhoc_table_source: *SqlAdhocTableSourceDO,
    sql_aggregate_expr: *SqlAggregateExprDO,
    sql_all_column_expr: *SqlAllColumnExprDO,
    sql_all_expr: *SqlAllExprDO,
    sql_alter_character: *SqlAlterCharacterDO,
    sql_alter_database_statement: *SqlAlterDatabaseStatementDO,
    sql_alter_function_statement: *SqlAlterFunctionStatementDO,
    sql_alter_index_statement: *SqlAlterIndexStatementDO,
    sql_alter_materialized_view_statement: *SqlAlterMaterializedViewStatementDO,
    sql_alter_outline_statement: *SqlAlterOutlineStatementDO,
    sql_alter_procedure_statement: *SqlAlterProcedureStatementDO,
    sql_alter_resource_group_statement: *SqlAlterResourceGroupStatementDO,
    sql_alter_sequence_statement: *SqlAlterSequenceStatementDO,
    sql_alter_system_get_config_statement: *SqlAlterSystemGetConfigStatementDO,
    sql_alter_system_set_config_statement: *SqlAlterSystemSetConfigStatementDO,
    sql_alter_table_add_clustering_key: *SqlAlterTableAddClusteringKeyDO,
    sql_alter_table_add_column: *SqlAlterTableAddColumnDO,
    sql_alter_table_add_constraint: *SqlAlterTableAddConstraintDO,
    sql_alter_table_add_ext_partition: *SqlAlterTableAddExtPartitionDO,
    sql_alter_table_add_index: *SqlAlterTableAddIndexDO,
    sql_alter_table_add_partition: *SqlAlterTableAddPartitionDO,
    sql_alter_table_add_supplemental: *SqlAlterTableAddSupplementalDO,
    sql_alter_table_alter_column: *SqlAlterTableAlterColumnDO,
    sql_alter_table_alter_index: *SqlAlterTableAlterIndexDO,
    sql_alter_table_analyze_partition: *SqlAlterTableAnalyzePartitionDO,
    sql_alter_table_archive_partition: *SqlAlterTableArchivePartitionDO,
    sql_alter_table_block_size: *SqlAlterTableBlockSizeDO,
    sql_alter_table_change_owner: *SqlAlterTableChangeOwnerDO,
    sql_alter_table_check_partition: *SqlAlterTableCheckPartitionDO,
    sql_alter_table_coalesce_partition: *SqlAlterTableCoalescePartitionDO,
    sql_alter_table_compression: *SqlAlterTableCompressionDO,
    sql_alter_table_convert_char_set: *SqlAlterTableConvertCharSetDO,
    sql_alter_table_delete_by_condition: *SqlAlterTableDeleteByConditionDO,
    sql_alter_table_disable_constraint: *SqlAlterTableDisableConstraintDO,
    sql_alter_table_disable_keys: *SqlAlterTableDisableKeysDO,
    sql_alter_table_disable_lifecycle: *SqlAlterTableDisableLifecycleDO,
    sql_alter_table_discard_partition: *SqlAlterTableDiscardPartitionDO,
    sql_alter_table_drop_clustering_key: *SqlAlterTableDropClusteringKeyDO,
    sql_alter_table_drop_column_item: *SqlAlterTableDropColumnItemDO,
    sql_alter_table_drop_constraint: *SqlAlterTableDropConstraintDO,
    sql_alter_table_drop_ext_partition: *SqlAlterTableDropExtPartitionDO,
    sql_alter_table_drop_foreign_key: *SqlAlterTableDropForeignKeyDO,
    sql_alter_table_drop_index: *SqlAlterTableDropIndexDO,
    sql_alter_table_drop_key: *SqlAlterTableDropKeyDO,
    sql_alter_table_drop_partition: *SqlAlterTableDropPartitionDO,
    sql_alter_table_drop_primary_key: *SqlAlterTableDropPrimaryKeyDO,
    sql_alter_table_drop_subpartition: *SqlAlterTableDropSubpartitionDO,
    sql_alter_table_enable_constraint: *SqlAlterTableEnableConstraintDO,
    sql_alter_table_enable_keys: *SqlAlterTableEnableKeysDO,
    sql_alter_table_enable_lifecycle: *SqlAlterTableEnableLifecycleDO,
    sql_alter_table_exchange_partition: *SqlAlterTableExchangePartitionDO,
    sql_alter_table_group_statement: *SqlAlterTableGroupStatementDO,
    sql_alter_table_import_partition: *SqlAlterTableImportPartitionDO,
    sql_alter_table_merge_partition: *SqlAlterTableMergePartitionDO,
    sql_alter_table_modify_clustered_by: *SqlAlterTableModifyClusteredByDO,
    sql_alter_table_optimize_partition: *SqlAlterTableOptimizePartitionDO,
    sql_alter_table_partition: *SqlAlterTablePartitionDO,
    sql_alter_table_partition_count: *SqlAlterTablePartitionCountDO,
    sql_alter_table_partition_lifecycle: *SqlAlterTablePartitionLifecycleDO,
    sql_alter_table_partition_set_properties: *SqlAlterTablePartitionSetPropertiesDO,
    sql_alter_table_re_organize_partition: *SqlAlterTableReOrganizePartitionDO,
    sql_alter_table_rebuild_partition: *SqlAlterTableRebuildPartitionDO,
    sql_alter_table_recover_partitions: *SqlAlterTableRecoverPartitionsDO,
    sql_alter_table_rename: *SqlAlterTableRenameDO,
    sql_alter_table_rename_column: *SqlAlterTableRenameColumnDO,
    sql_alter_table_rename_index: *SqlAlterTableRenameIndexDO,
    sql_alter_table_rename_partition: *SqlAlterTableRenamePartitionDO,
    sql_alter_table_repair_partition: *SqlAlterTableRepairPartitionDO,
    sql_alter_table_replace_column: *SqlAlterTableReplaceColumnDO,
    sql_alter_table_set_comment: *SqlAlterTableSetCommentDO,
    sql_alter_table_set_lifecycle: *SqlAlterTableSetLifecycleDO,
    sql_alter_table_set_location: *SqlAlterTableSetLocationDO,
    sql_alter_table_set_option: *SqlAlterTableSetOptionDO,
    sql_alter_table_statement: *SqlAlterTableStatementDO,
    sql_alter_table_subpartition_available_partition_num: *SqlAlterTableSubpartitionAvailablePartitionNumDO,
    sql_alter_table_subpartition_lifecycle: *SqlAlterTableSubpartitionLifecycleDO,
    sql_alter_table_touch: *SqlAlterTableTouchDO,
    sql_alter_table_truncate_partition: *SqlAlterTableTruncatePartitionDO,
    sql_alter_table_unarchive_partition: *SqlAlterTableUnarchivePartitionDO,
    sql_alter_type_statement: *SqlAlterTypeStatementDO,
    sql_alter_view_rename_statement: *SqlAlterViewRenameStatementDO,
    sql_alter_view_statement: *SqlAlterViewStatementDO,
    sql_analyze_table_statement: *SqlAnalyzeTableStatementDO,
    sql_ann_index: *SqlAnnIndexDO,
    sql_any_expr: *SqlAnyExprDO,
    sql_archive_table_statement: *SqlArchiveTableStatementDO,
    sql_argument: *SqlArgumentDO,
    sql_array_data_type: *SqlArrayDataTypeDO,
    sql_array_expr: *SqlArrayExprDO,
    sql_assign_item: *SqlAssignItemDO,
    sql_backup_statement: *SqlBackupStatementDO,
    sql_between_expr: *SqlBetweenExprDO,
    sql_big_int_expr: *SqlBigIntExprDO,
    sql_binary_expr: *SqlBinaryExprDO,
    sql_binary_op_expr: *SqlBinaryOpExprDO,
    sql_binary_op_expr_group: *SqlBinaryOpExprGroupDO,
    sql_block_statement: *SqlBlockStatementDO,
    sql_boolean_expr: *SqlBooleanExprDO,
    sql_build_table_statement: *SqlBuildTableStatementDO,
    sql_call_statement: *SqlCallStatementDO,
    sql_cancel_job_statement: *SqlCancelJobStatementDO,
    sql_case_expr: *SqlCaseExprDO,
    sql_case_statement: *SqlCaseStatementDO,
    sql_cast_expr: *SqlCastExprDO,
    sql_char_expr: *SqlCharExprDO,
    sql_character_data_type: *SqlCharacterDataTypeDO,
    sql_check: *SqlCheckDO,
    sql_clone_table_statement: *SqlCloneTableStatementDO,
    sql_close_statement: *SqlCloseStatementDO,
    sql_column_check: *SqlColumnCheckDO,
    sql_column_definition: *SqlColumnDefinitionDO,
    sql_column_primary_key: *SqlColumnPrimaryKeyDO,
    sql_column_reference: *SqlColumnReferenceDO,
    sql_column_unique_key: *SqlColumnUniqueKeyDO,
    sql_comment_hint: *SqlCommentHintDO,
    sql_comment_statement: *SqlCommentStatementDO,
    sql_commit_statement: *SqlCommitStatementDO,
    sql_constraint_impl: *SqlConstraintImplDO,
    sql_contains_expr: *SqlContainsExprDO,
    sql_copy_from_statement: *SqlCopyFromStatementDO,
    sql_create_database_statement: *SqlCreateDatabaseStatementDO,
    sql_create_function_statement: *SqlCreateFunctionStatementDO,
    sql_create_index_statement: *SqlCreateIndexStatementDO,
    sql_create_materialized_view_statement: *SqlCreateMaterializedViewStatementDO,
    sql_create_outline_statement: *SqlCreateOutlineStatementDO,
    sql_create_procedure_statement: *SqlCreateProcedureStatementDO,
    sql_create_resource_group_statement: *SqlCreateResourceGroupStatementDO,
    sql_create_role_statement: *SqlCreateRoleStatementDO,
    sql_create_sequence_statement: *SqlCreateSequenceStatementDO,
    sql_create_table_group_statement: *SqlCreateTableGroupStatementDO,
    sql_create_table_statement: *SqlCreateTableStatementDO,
    sql_create_trigger_statement: *SqlCreateTriggerStatementDO,
    sql_create_user_statement: *SqlCreateUserStatementDO,
    sql_create_view_statement: *SqlCreateViewStatementDO,
    sql_current_of_cursor_expr: *SqlCurrentOfCursorExprDO,
    sql_current_time_expr: *SqlCurrentTimeExprDO,
    sql_current_user_expr: *SqlCurrentUserExprDO,
    sql_data_type_impl: *SqlDataTypeImplDO,
    sql_data_type_ref_expr: *SqlDataTypeRefExprDO,
    sql_date_expr: *SqlDateExprDO,
    sql_date_time_expr: *SqlDateTimeExprDO,
    sql_db_link_expr: *SqlDbLinkExprDO,
    sql_decimal_expr: *SqlDecimalExprDO,
    sql_declare_item: *SqlDeclareItemDO,
    sql_declare_statement: *SqlDeclareStatementDO,
    sql_default: *SqlDefaultDO,
    sql_default_expr: *SqlDefaultExprDO,
    sql_delete_statement: *SqlDeleteStatementDO,
    sql_describe_statement: *SqlDescribeStatementDO,
    sql_double_expr: *SqlDoubleExprDO,
    sql_drop_catalog_statement: *SqlDropCatalogStatementDO,
    sql_drop_database_statement: *SqlDropDatabaseStatementDO,
    sql_drop_event_statement: *SqlDropEventStatementDO,
    sql_drop_function_statement: *SqlDropFunctionStatementDO,
    sql_drop_index_statement: *SqlDropIndexStatementDO,
    sql_drop_log_file_group_statement: *SqlDropLogFileGroupStatementDO,
    sql_drop_materialized_view_statement: *SqlDropMaterializedViewStatementDO,
    sql_drop_outline_statement: *SqlDropOutlineStatementDO,
    sql_drop_procedure_statement: *SqlDropProcedureStatementDO,
    sql_drop_resource_group_statement: *SqlDropResourceGroupStatementDO,
    sql_drop_resource_statement: *SqlDropResourceStatementDO,
    sql_drop_role_statement: *SqlDropRoleStatementDO,
    sql_drop_sequence_statement: *SqlDropSequenceStatementDO,
    sql_drop_server_statement: *SqlDropServerStatementDO,
    sql_drop_synonym_statement: *SqlDropSynonymStatementDO,
    sql_drop_table_group_statement: *SqlDropTableGroupStatementDO,
    sql_drop_table_space_statement: *SqlDropTableSpaceStatementDO,
    sql_drop_table_statement: *SqlDropTableStatementDO,
    sql_drop_trigger_statement: *SqlDropTriggerStatementDO,
    sql_drop_type_statement: *SqlDropTypeStatementDO,
    sql_drop_user_statement: *SqlDropUserStatementDO,
    sql_drop_view_statement: *SqlDropViewStatementDO,
    sql_dump_statement: *SqlDumpStatementDO,
    sql_error_logging_clause: *SqlErrorLoggingClauseDO,
    sql_exists_expr: *SqlExistsExprDO,
    sql_explain_analyze_statement: *SqlExplainAnalyzeStatementDO,
    sql_explain_statement: *SqlExplainStatementDO,
    sql_export_database_statement: *SqlExportDatabaseStatementDO,
    sql_export_table_statement: *SqlExportTableStatementDO,
    sql_expr_hint: *SqlExprHintDO,
    sql_expr_impl: *SqlExprImplDO,
    sql_expr_statement: *SqlExprStatementDO,
    sql_expr_table_source: *SqlExprTableSourceDO,
    sql_external_record_format: *SqlExternalRecordFormatDO,
    sql_extract_expr: *SqlExtractExprDO,
    sql_fetch_statement: *SqlFetchStatementDO,
    sql_flashback_expr: *SqlFlashbackExprDO,
    sql_float_expr: *SqlFloatExprDO,
    sql_for_statement: *SqlForStatementDO,
    sql_foreign_key_impl: *SqlForeignKeyImplDO,
    sql_grant_statement: *SqlGrantStatementDO,
    sql_grouping_set_expr: *SqlGroupingSetExprDO,
    sql_hex_expr: *SqlHexExprDO,
    sql_identifier_expr: *SqlIdentifierExprDO,
    sql_if_statement: *SqlIfStatementDO,
    sql_import_database_statement: *SqlImportDatabaseStatementDO,
    sql_import_table_statement: *SqlImportTableStatementDO,
    sql_in_list_expr: *SqlInListExprDO,
    sql_in_sub_query_expr: *SqlInSubQueryExprDO,
    sql_index_definition: *SqlIndexDefinitionDO,
    sql_index_options: *SqlIndexOptionsDO,
    sql_insert_into: *SqlInsertIntoDO,
    sql_insert_statement: *SqlInsertStatementDO,
    sql_integer_expr: *SqlIntegerExprDO,
    sql_interval_expr: *SqlIntervalExprDO,
    sql_join_table_source: *SqlJoinTableSourceDO,
    sql_keep: *SqlKeepDO,
    sql_lateral_view_table_source: *SqlLateralViewTableSourceDO,
    sql_limit: *SqlLimitDO,
    sql_list_expr: *SqlListExprDO,
    sql_list_resource_group_statement: *SqlListResourceGroupStatementDO,
    sql_loop_statement: *SqlLoopStatementDO,
    sql_map_data_type: *SqlMapDataTypeDO,
    sql_match_against_expr: *SqlMatchAgainstExprDO,
    sql_merge_statement: *SqlMergeStatementDO,
    sql_method_invoke_expr: *SqlMethodInvokeExprDO,
    sql_not_expr: *SqlNotExprDO,
    sql_not_null_constraint: *SqlNotNullConstraintDO,
    sql_null_constraint: *SqlNullConstraintDO,
    sql_null_expr: *SqlNullExprDO,
    sql_number_expr: *SqlNumberExprDO,
    sql_numeric_literal_expr: *SqlNumericLiteralExprDO,
    sql_object: *SqlObjectDO,
    sql_open_statement: *SqlOpenStatementDO,
    sql_optimize_statement: *SqlOptimizeStatementDO,
    sql_order_by: *SqlOrderByDO,
    sql_over: *SqlOverDO,
    sql_parameter: *SqlParameterDO,
    sql_partition: *SqlPartitionDO,
    sql_partition_by: *SqlPartitionByDO,
    sql_partition_by_hash: *SqlPartitionByHashDO,
    sql_partition_by_list: *SqlPartitionByListDO,
    sql_partition_by_range: *SqlPartitionByRangeDO,
    sql_partition_by_value: *SqlPartitionByValueDO,
    sql_partition_ref: *SqlPartitionRefDO,
    sql_partition_spec: *SqlPartitionSpecDO,
    sql_partition_value: *SqlPartitionValueDO,
    sql_primary_key_impl: *SqlPrimaryKeyImplDO,
    sql_privilege_item: *SqlPrivilegeItemDO,
    sql_privilege_statement: *SqlPrivilegeStatementDO,
    sql_property_expr: *SqlPropertyExprDO,
    sql_purge_logs_statement: *SqlPurgeLogsStatementDO,
    sql_purge_recyclebin_statement: *SqlPurgeRecyclebinStatementDO,
    sql_purge_table_statement: *SqlPurgeTableStatementDO,
    sql_purge_temporary_output_statement: *SqlPurgeTemporaryOutputStatementDO,
    sql_query_expr: *SqlQueryExprDO,
    sql_real_expr: *SqlRealExprDO,
    sql_record_data_type: *SqlRecordDataTypeDO,
    sql_refresh_materialized_view_statement: *SqlRefreshMaterializedViewStatementDO,
    sql_release_save_point_statement: *SqlReleaseSavePointStatementDO,
    sql_rename_user_statement: *SqlRenameUserStatementDO,
    sql_replace_statement: *SqlReplaceStatementDO,
    sql_restore_statement: *SqlRestoreStatementDO,
    sql_return_statement: *SqlReturnStatementDO,
    sql_revoke_statement: *SqlRevokeStatementDO,
    sql_rollback_statement: *SqlRollbackStatementDO,
    sql_row_data_type: *SqlRowDataTypeDO,
    sql_save_point_statement: *SqlSavePointStatementDO,
    sql_script_commit_statement: *SqlScriptCommitStatementDO,
    sql_select: *SqlSelectDO,
    sql_select_group_by_clause: *SqlSelectGroupByClauseDO,
    sql_select_item: *SqlSelectItemDO,
    sql_select_order_by_item: *SqlSelectOrderByItemDO,
    sql_select_query_base: *SqlSelectQueryBaseDO,
    sql_select_query_block: *SqlSelectQueryBlockDO,
    sql_select_statement: *SqlSelectStatementDO,
    sql_sequence_expr: *SqlSequenceExprDO,
    sql_server_exec_statement: *SqlServerExecStatementDO,
    sql_server_insert_statement: *SqlServerInsertStatementDO,
    sql_server_object_impl: *SqlServerObjectImplDO,
    sql_server_object_reference_expr: *SqlServerObjectReferenceExprDO,
    sql_server_output: *SqlServerOutputDO,
    sql_server_rollback_statement: *SqlServerRollbackStatementDO,
    sql_server_select_query_block: *SqlServerSelectQueryBlockDO,
    sql_server_set_transaction_isolation_level_statement: *SqlServerSetTransactionIsolationLevelStatementDO,
    sql_server_statement_impl: *SqlServerStatementImplDO,
    sql_server_top: *SqlServerTopDO,
    sql_server_update_statement: *SqlServerUpdateStatementDO,
    sql_server_wait_for_statement: *SqlServerWaitForStatementDO,
    sql_set_statement: *SqlSetStatementDO,
    sql_show_acl_statement: *SqlShowAclStatementDO,
    sql_show_catalogs_statement: *SqlShowCatalogsStatementDO,
    sql_show_columns_statement: *SqlShowColumnsStatementDO,
    sql_show_create_materialized_view_statement: *SqlShowCreateMaterializedViewStatementDO,
    sql_show_create_table_statement: *SqlShowCreateTableStatementDO,
    sql_show_create_view_statement: *SqlShowCreateViewStatementDO,
    sql_show_databases_statement: *SqlShowDatabasesStatementDO,
    sql_show_errors_statement: *SqlShowErrorsStatementDO,
    sql_show_functions_statement: *SqlShowFunctionsStatementDO,
    sql_show_grants_statement: *SqlShowGrantsStatementDO,
    sql_show_history_statement: *SqlShowHistoryStatementDO,
    sql_show_indexes_statement: *SqlShowIndexesStatementDO,
    sql_show_materialized_view_statement: *SqlShowMaterializedViewStatementDO,
    sql_show_outlines_statement: *SqlShowOutlinesStatementDO,
    sql_show_packages_statement: *SqlShowPackagesStatementDO,
    sql_show_partitions_stmt: *SqlShowPartitionsStmtDO,
    sql_show_process_list_statement: *SqlShowProcessListStatementDO,
    sql_show_query_task_statement: *SqlShowQueryTaskStatementDO,
    sql_show_recylebin_statement: *SqlShowRecylebinStatementDO,
    sql_show_role_statement: *SqlShowRoleStatementDO,
    sql_show_roles_statement: *SqlShowRolesStatementDO,
    sql_show_session_statement: *SqlShowSessionStatementDO,
    sql_show_statistic_list_stmt: *SqlShowStatisticListStmtDO,
    sql_show_statistic_stmt: *SqlShowStatisticStmtDO,
    sql_show_table_groups_statement: *SqlShowTableGroupsStatementDO,
    sql_show_tables_statement: *SqlShowTablesStatementDO,
    sql_show_users_statement: *SqlShowUsersStatementDO,
    sql_show_variants_statement: *SqlShowVariantsStatementDO,
    sql_show_views_statement: *SqlShowViewsStatementDO,
    sql_size_expr: *SqlSizeExprDO,
    sql_small_int_expr: *SqlSmallIntExprDO,
    sql_some_expr: *SqlSomeExprDO,
    sql_start_transaction_statement: *SqlStartTransactionStatementDO,
    sql_statement_impl: *SqlStatementImplDO,
    sql_struct_data_type: *SqlStructDataTypeDO,
    sql_sub_partition: *SqlSubPartitionDO,
    sql_sub_partition_by: *SqlSubPartitionByDO,
    sql_sub_partition_by_hash: *SqlSubPartitionByHashDO,
    sql_sub_partition_by_list: *SqlSubPartitionByListDO,
    sql_sub_partition_by_range: *SqlSubPartitionByRangeDO,
    sql_submit_job_statement: *SqlSubmitJobStatementDO,
    sql_subquery_table_source: *SqlSubqueryTableSourceDO,
    sql_sync_meta_statement: *SqlSyncMetaStatementDO,
    sql_table_data_type: *SqlTableDataTypeDO,
    sql_table_like: *SqlTableLikeDO,
    sql_table_sampling: *SqlTableSamplingDO,
    sql_table_source_impl: *SqlTableSourceImplDO,
    sql_text_literal_expr: *SqlTextLiteralExprDO,
    sql_time_expr: *SqlTimeExprDO,
    sql_timestamp_expr: *SqlTimestampExprDO,
    sql_tiny_int_expr: *SqlTinyIntExprDO,
    sql_truncate_statement: *SqlTruncateStatementDO,
    sql_unary_expr: *SqlUnaryExprDO,
    sql_union_data_type: *SqlUnionDataTypeDO,
    sql_union_query: *SqlUnionQueryDO,
    sql_union_query_table_source: *SqlUnionQueryTableSourceDO,
    sql_unique: *SqlUniqueDO,
    sql_unnest_table_source: *SqlUnnestTableSourceDO,
    sql_update_set_item: *SqlUpdateSetItemDO,
    sql_update_statement: *SqlUpdateStatementDO,
    sql_use_statement: *SqlUseStatementDO,
    sql_values_expr: *SqlValuesExprDO,
    sql_values_query: *SqlValuesQueryDO,
    sql_values_table_source: *SqlValuesTableSourceDO,
    sql_variant_ref_expr: *SqlVariantRefExprDO,
    sql_while_statement: *SqlWhileStatementDO,
    sql_whoami_statement: *SqlWhoamiStatementDO,
    sql_window: *SqlWindowDO,
    sql_with_subquery_clause: *SqlWithSubqueryClauseDO,
    sqljson_expr: *SqljsonExprDO,
    sqln_char_expr: *SqlnCharExprDO,
    sqlz_order_by: *SqlzOrderByDO,
}
