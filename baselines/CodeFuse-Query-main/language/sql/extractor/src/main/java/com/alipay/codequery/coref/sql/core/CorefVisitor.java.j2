/*
 * Automatically Generated From CorefVisitor.java.j2.
 * Do Not Edit Directly!
 *
 * Ant Group
 * Copyright (c) 2004-2022 All Rights Reserved.
 */
package com.alipay.codequery.coref.sql.core;

import com.alibaba.druid.DbType;
import com.alibaba.druid.sql.ast.*;
import com.alibaba.druid.sql.dialect.antspark.visitor.AntsparkVisitor;
import com.alibaba.druid.sql.dialect.blink.vsitor.BlinkVisitor;
import com.alibaba.druid.sql.dialect.clickhouse.visitor.ClickhouseVisitor;
import com.alibaba.druid.sql.dialect.db2.visitor.DB2ASTVisitor;
import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
import com.alibaba.druid.sql.dialect.odps.visitor.OdpsASTVisitor;
import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
import com.alibaba.druid.sql.dialect.oscar.visitor.OscarASTVisitor;
import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
import com.alibaba.druid.sql.dialect.sqlserver.visitor.SQLServerASTVisitor;
import com.alibaba.druid.sql.parser.ParserException;
import com.alibaba.druid.sql.parser.SQLParserFeature;
import com.alibaba.druid.sql.parser.SQLParserUtils;
import com.alibaba.druid.sql.parser.SQLStatementParser;
import com.alibaba.druid.sql.repository.SchemaRepository;
import com.alibaba.druid.sql.repository.SchemaResolveVisitor;
import com.alibaba.druid.sql.visitor.SQLASTVisitorAdapter;
import com.alipay.codequery.coref.sql.DbTypeEnum;
import com.alipay.codequery.coref.sql.core.CorefURI;
import com.alipay.codequery.coref.sql.core.FakeNullParentDetector;
import com.alipay.codequery.coref.sql.core.SignatureGenerator;
import com.alipay.codequery.coref.sql.storage.StorageFacade;
import com.alipay.codequery.coref.sql.util.JavaObject2CorefDataConverter;
import com.alipay.codequery.dal.mybatis.domain.Location;
import com.alipay.codequery.dal.mybatis.domain.SqlObject;
import com.alipay.codequery.util.PathUtil;
import lombok.Getter;
import lombok.Setter;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.*;

public class CorefVisitor extends SQLASTVisitorAdapter implements OracleASTVisitor, SQLServerASTVisitor, OdpsASTVisitor, MySqlASTVisitor, PGASTVisitor, DB2ASTVisitor, ClickhouseVisitor, OscarASTVisitor, AntsparkVisitor, BlinkVisitor {
    private static final Logger logger = LogManager.getLogger(com.alipay.codequery.coref.sql.core.CorefVisitor.class);

    private final File file;

    @Getter@Setter
    private DbTypeEnum dbType;

    @Getter
    private final String sqlContent;

    private final StorageFacade corefStorage;

    private final CorefURI corefURI;

    final Set<Long> locationSet = new HashSet<>();
    
    final Map<Long, Integer> parentMap = new HashMap<>();

    /**
     * Set storing Object IDs of SQLObjects to avoid storing them multiple times
     */
    final Set<Long> visitedOidSet = new HashSet<>();

    /**
     * Hash map storing SQL object and its Object ID mapping. Key is the hash code of a SQL object,
     * value is the COREF Object ID of the SQL object
     */
    final Map<Integer, Long> visitedSQLObjectMap = new HashMap<>();

    public void parse() {
        try {
            corefStorage.store(new com.alipay.codequery.dal.mybatis.domain.File(
                    corefURI.generateFileOid(),
                    corefURI.getPath(),
                    FilenameUtils.getExtension(corefURI.getPath()),
                    FilenameUtils.getName(corefURI.getPath()),
                    corefURI.generateCorpusOid()
            ));

            logger.info("Using database type of {} to parse file: {}", getDbType(), file);

            // Convert the Db type to Druid's one
            // Even if druidDbType is null, createSQLStatementParser() will use `DbType.other` instead.
            DbType druidDbType = DbType.of(getDbType().getName());

            SQLStatementParser parser = SQLParserUtils.createSQLStatementParser(
                    getSqlContent(),
                    druidDbType,
                    //SQLParserFeature.PrintSQLWhileParsingFailed,
                    SQLParserFeature.KeepSourceLocation,
                    SQLParserFeature.KeepComments
            );

            List<SQLStatement> sqlStatements = parser.parseStatementList();

            // Try to detect some SQLObject whose parent is null but actually not.
            // If so, try to reset its parent to the real one.
            FakeNullParentDetector fakeNullParentDetector = new FakeNullParentDetector();

            SchemaRepository schemaRepository = new SchemaRepository(druidDbType);

            for (SQLStatement sqlStatement: sqlStatements) {
                schemaRepository.resolve(sqlStatement,
                        SchemaResolveVisitor.Option.ResolveIdentifierAlias,
                        SchemaResolveVisitor.Option.ResolveAllColumn,
                        SchemaResolveVisitor.Option.CheckColumnAmbiguous);
                
                sqlStatement.accept(fakeNullParentDetector);
                sqlStatement.accept(this);
            }
        } catch (ParserException e) {
            logger.error("SQL parser exception with dialect {} for file {}: {}", getDbType(), file, e);
            throw e;
        }
    }

    /**
     * Problematic: Druid SQL parser seems not be able to parse source location for every AST element.
     * For example, for the following SQL:
     * select a from A;
     * select a from B;
     * <p>
     * `a` is a SQLSelectItem but Druid returns its source line and source column as 0 and 0. (Some elements can return the
     * exact source location but some doesn't, don't know why and how to work around this).
     * <p>
     * In COREF, the object ID depends on corpus, file path, AST node type, node text and source location to be identifiable between each other.
     * However, in the example above and due to Druid's source location parsing issue, the Object ID of those two `a` will be the same,
     * but they should've been treated as two different AST elements.
     * <p>
     * To solve this issue, we should introduce another information to be added to the Object ID so that those two `a` have
     * different object ID. I chose all of its ancestors' Oid. Looks the equation below:
     * <p>
     * Oid(sqlObject) = Oid(AST signature of sqlObject) ^ Oid(parent)
     *                = Oid(AST signature of sqlObject) ^ Oid( Oid(AST signature of parent) ^ Oid(parent's parent) )
     *                = ...
     * <p>
     * Here, no matter if its parent has source location or not, we just calculate the object ID of the node by involving all of its ancestors' Oid,
     * so that we can always avoid object ID conflicts.
     * <p>
     * TODO add Unit tests to make sure the uniqueness of the Object ID.
     *
     * @param sqlObject
     * @return Object ID of the SQL Object
     */
    public Long getOid(SQLObjectImpl sqlObject) {
        // IMPORTANT NOTE: use native default hash code method to identify if the SQL object has already been visited to
        // calculate its object ID.
        // Don't use the method of SQLObjectImpl::hashCode !!! This method doesn't take SQLObject's parent into account to
        // calculate the hash code. Otherwise, it will cause
        Integer sqlObjectHashCode = System.identityHashCode(sqlObject);
        if (visitedSQLObjectMap.get(sqlObjectHashCode) != null) {
            return visitedSQLObjectMap.get(sqlObjectHashCode);
        }

        if (sqlObject == null) {
            return -1L;
        }

        String signature = SignatureGenerator.generate(sqlObject);
        Long oid = corefURI.generateOid(signature);

        oid ^= getOid((SQLObjectImpl) sqlObject.getParent());

        visitedSQLObjectMap.put(sqlObjectHashCode, oid);

        return oid;
    }

    public Long getOid(SQLObject sqlObject) {
        return getOid((SQLObjectImpl) sqlObject);
    }

    public Long getLocationOid(SQLObjectImpl sqlObject) {
        if (sqlObject == null) {
            return -1L;
        }

        int sourceLine = sqlObject.getSourceLine();
        int sourceColumn = sqlObject.getSourceColumn();

        String signature = String.format("(%d,%d)", sourceLine, sourceColumn);
        Long locationOid = corefURI.generateOid(signature);

        if (!locationSet.contains(locationOid)) {
            locationSet.add(locationOid);
            corefStorage.store(new Location(
                    locationOid,
                    corefURI.generateFileOid(),
                    sourceLine,
                    sourceColumn
            ));
        }
        return locationOid;
    }

    public CorefVisitor(File file, DbTypeEnum dbType, StorageFacade corefStorage, File srcRootDir, String corpus) throws IOException {
        this.file = file;
        this.dbType = dbType;
        this.corefStorage = corefStorage;

        // If corpus is not specified, pass srcRootDir dir name
        this.corefURI = StringUtils.isBlank(corpus) ? new CorefURI(srcRootDir.getName()) : new CorefURI(corpus);
        String relativePath = PathUtil.getRelPath(srcRootDir.getPath(), file.getPath());
        this.corefURI.setPath(relativePath);

        sqlContent = FileUtils.readFileToString(file, StandardCharsets.UTF_8);
    }

    @Override
    public void postVisit(SQLObject x) {
        SQLObjectImpl sqlObject = (SQLObjectImpl) x;
        SQLObjectImpl parent = (SQLObjectImpl) x.getParent();

        Long oid = getOid(sqlObject);
        if (visitedOidSet.contains(oid)) {
            return;
        }
        visitedOidSet.add(oid);

        Long parentOid = getOid(parent);
        Integer currentIndexInParent = -1;
        if (parent != null) {
            parentMap.putIfAbsent(parentOid, 0);
            currentIndexInParent = parentMap.get(parentOid);
            parentMap.put(parentOid, currentIndexInParent + 1);
        }

        corefStorage.store(new SqlObject(
                oid,
                parentOid,
                getLocationOid(sqlObject),
                x.getClass().getSimpleName(),
                currentIndexInParent,
                x.getAfterCommentsDirect() != null ? x.getAfterCommentsDirect().toString() : "",
                x.getBeforeCommentsDirect() != null ? x.getBeforeCommentsDirect().toString() : "",
                getDbType().toString(),
                sqlObject.toString()
        ));
    }

    @Override
    public void endVisit(com.alibaba.druid.sql.dialect.antspark.ast.AntsparkCreateTableStatement x) {}

    @Override
    public void endVisit(com.alibaba.druid.sql.dialect.blink.ast.BlinkCreateTableStatement x) {}

    {% for node in node_list if node.name == 'SQLDataTypeImpl' %}
    @Override
    public boolean visit(SQLDataType x) {
        SQLDataTypeImpl dataTypeImpl = (SQLDataTypeImpl) x;
        
        corefStorage.store(new com.alipay.codequery.dal.mybatis.domain.{{ node.table_name | to_camel }}(
                getOid(dataTypeImpl)
                {%- for method in node.method_list
                    if method.return_type_in_sqlite and method.name not in METHOD_BLACK_LIST %}
                {%- if loop.first -%}
                ,
                {% endif %}
                {%- if method.is_return_type_an_ast_class or method.return_type in implements_interface_map -%}
                getOid(dataTypeImpl.{{ method.name }}())
                {%- else -%}
                JavaObject2CorefDataConverter.convert(dataTypeImpl, {{ node.qualified_name }}::{{ method.name }}, {{ "String" if method.return_type_in_sqlite == 'TEXT' else "Integer" }}.class, "{{ method.name }}")
                {%- endif -%}

                {%- if not loop.last -%}
                ,
                {% endif -%}
                {%- endfor %}
        ));

        {% if node.parent_node and not node.parent_node.is_abstract -%}
        return this.visit(({{ node.parent_node.qualified_name }}) x);
        {%- else -%}
        return true;
        {%- endif %}
    }
    {% endfor %}

    {%- for node in node_list if not node.is_abstract and node.name not in NODE_BLACK_LIST|list + ['SQLDataTypeImpl'] %}
    @Override
    public boolean visit({{ node.qualified_name }} x) {
        {%- for abstract_parent_node in node.abstract_parent_node_list %}
        // {{ abstract_parent_node.name }} is abstract and doesn't have a visitor method, extract it here.
        corefStorage.store(new com.alipay.codequery.dal.mybatis.domain.{{ abstract_parent_node.table_name | to_camel }}(
                getOid(x)
                {%- for method in abstract_parent_node.method_list
                    if method.return_type_in_sqlite and method.name not in METHOD_BLACK_LIST|list + ['getNumber'] %}
                {%- if loop.first -%}
                ,
                {% endif %}
                {%- if method.is_return_type_an_ast_class or method.return_type in implements_interface_map -%}
                getOid(x.{{ method.name }}())
                {%- else -%}
                JavaObject2CorefDataConverter.convert(x, {{ node.qualified_name }}::{{ method.name }}, {{ "String" if method.return_type_in_sqlite == 'TEXT' else "Integer" }}.class, "{{ method.name }}")
                {%- endif -%}

                {%- if not loop.last -%}
                ,
                {% endif -%}
                {%- endfor %}
        ));
        {%- endfor %}
        
        corefStorage.store(new com.alipay.codequery.dal.mybatis.domain.{{ node.table_name | to_camel }}(
                getOid(x)
                {%- for method in node.method_list
                    if method.return_type_in_sqlite and method.name not in METHOD_BLACK_LIST %}
                {%- if loop.first -%}
                ,
                {% endif %}
                {%- if method.is_return_type_an_ast_class or method.return_type in implements_interface_map -%}
                getOid(x.{{ method.name }}())
                {%- else -%}
                JavaObject2CorefDataConverter.convert(x, {{ node.qualified_name }}::{{ method.name }}, {{ "String" if method.return_type_in_sqlite == 'TEXT' else "Integer" }}.class, "{{ method.name }}")
                {%- endif -%}

                {%- if not loop.last -%}
                ,
                {% endif -%}
                {%- endfor %}
        ));

        {% if node.parent_node and not node.parent_node.is_abstract -%}
        return this.visit(({{ node.parent_node.qualified_name }}) x);
        {%- else -%}
        return true;
        {%- endif %}
    }
    {% endfor %}
}