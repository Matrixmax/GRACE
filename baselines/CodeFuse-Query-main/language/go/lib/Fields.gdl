schema Fields extends Node {

}
impl Fields {
    @data_constraint
    @inline
    pub fn __all__(db: GoDB) -> *Fields {
        for (f in FieldsDO(db)) {
            yield Fields {
                id : f.oid
            }
        }
    }
    pub fn getIdx(self) -> int {
        for (f in FieldsDO(__all_data__)) {
            if (f.key_eq(self)) {
                return f.getIdx()
            }
        }
    }
    pub fn getKind(self) -> int {
        for (f in FieldsDO(__all_data__)) {
            if (f.key_eq(self)) {
                return f.getKind()
            }
        }
    }
    pub fn getType(self) -> string {
        if (self.isStructFields()) {
            return "StructFields"
        }
        if (self.isFuncParamsFields()) {
            return "FuncParamsFields"
        }
        if (self.isFuncResultsFields()) {
            return "FuncResultsFields"
        }
        if (self.isInterfaceMethodFields()) {
            return "InterfaceMethodFields"
        }
        if (self.isFuncDeclRecvFields()) {
            return "FuncDeclRecvFields"
        }
    }
    pub fn isStructFields(self) -> bool {
        if (self.getKind() = 0) {
            return true
        }
    }
    pub fn isFuncParamsFields(self) -> bool {
        if (self.getKind() = 1) {
            return true
        }
    }
    pub fn isFuncResultsFields(self) -> bool {
        if (self.getKind() = 2) {
            return true
        }
    }
    pub fn isInterfaceMethodFields(self) -> bool {
        if (self.getKind() = 3) {
            return true
        }
    }
    pub fn isFuncDeclRecvFields(self) -> bool {
        if (self.getKind() = 4) {
            return true
        }
    }
    pub fn getFieldName(self) -> *string {
        for (e in Expr(__all_data__),
            l in LiteralDO(__all_data__)) {
            let (id = e.id) {
                if (e.getIdx() > 0) {
                    if (e.getParentNode().key_eq(self)) {
                        if (l.getExpr() = id) {
                            yield l.getValue()
                        }
                    }
                }
            }
        }
    }
    pub fn getFieldType(self) -> *string {
        for (e in Expr(__all_data__)) {
            if (e.getIdx() = 0) {
                if (e.getParentNode().key_eq(self)) {
                    yield e.getExprTypeName()
                }
            }
        }
    }

    pub fn makeFieldStringForFunctionSignature(self) -> *string {
        for (auto_tmp1 in self.getFieldName()) {
            for (auto_tmp2 in self.getFieldType()) { // has both Name:Type
                yield auto_tmp1 + " " + auto_tmp2
            }
        }
        yield self.getFieldName() // has only Name
        yield self.getFieldType() // has only Type
    }
}
