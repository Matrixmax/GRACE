schema File extends Node {

}
impl File {
    @data_constraint
    @inline
    pub fn __all__(db: GoDB) -> *File {
        for (f in FileDO(db)) {
            yield File {
                id : f.oid
            }
        }
    }
    fn getFunction(self) -> *Function {
        for(function in Function(__all_data__)) {
            if (self = function.getBelongsFile()) {
                yield function
            }
        }
    }
    pub fn getName(self) -> string {
        for (f in FileDO(__all_data__)) {
            if (f.key_eq(self)) {
                return f.getName()
            }
        }
    }
    pub fn getMd5Sum(self) -> string {
        for (f in FileDO(__all_data__)) {
            if (f.key_eq(self)) {
                return f.getMd5Sum()
            }
        }
    }
    pub fn getBelongsPkg(self) -> Pkg {
        for (pkg in Pkg(__all_data__),
            f in FileDO(__all_data__)) {
            if (f.key_eq(self)) {
                if (f.getPkgOid() = pkg.oid) {
                    return pkg
                }
            }
        }
    }
    pub fn getSha256Sum(self) -> string {
        for (f in FileDO(__all_data__)) {
            if (f.key_eq(self)) {
                return f.getSha256Sum()
            }
        }
    }
    pub fn getLineInfo(self) -> NumberOfLineDO {
        for (n in NumberOfLineDO(__all_data__)) {
            if (n.key_eq(self)) {
                return n
            }
        }
    }
    pub fn getPkgName(self) -> string {
        for (e in Expr(__all_data__)) {
            if (e.getParentNode().key_eq(self)) {
                if (e.getIdx() = 0) {
                    for (auto_tmp1 in e.print()) {
                        return auto_tmp1
                    }
                }
            }
        }
    }
    pub fn getPkgLoc(self) -> Location {
        for (e in Expr(__all_data__)) {
            if (e.getParentNode().key_eq(self)) {
                if (e.getIdx() = 0) {
                    let (l = e.getLocation()) {
                        return l
                    }
                }
            }
        }
    }
    pub fn isTestFile(self) -> bool {
        let (fname = self.getName()) {
            if (fname.matches("^.*(_test.go)$")) {
                return true
            }
        }
    }
    pub fn isGoFile(self) -> bool {
        let (fname = self.getName()) {
            if (fname.matches("^.*(.go)$")) {
                return true
            }
        }
    }
    pub fn isModFile(self) -> bool {
        let (fname = self.getName()) {
            if (fname.matches("^.*(.mod)$")) {
                return true
            }
        }
    }
    /**
     * 获取每个文件包含的函数
     */
    pub fn getFunctionCount(self) -> int {
        return self.getFunction().len()
    }
}
schema GoFile extends File {

}
impl GoFile {
    @data_constraint
    @inline
    pub fn __all__(db: GoDB) -> *GoFile {
        for (f in File(db)) {
            if (f.isGoFile()) {
                yield GoFile {
                    id : f.id
                }
            }
        }
    }
    // filterByKeyWords
    pub fn filterByKeyWords(self) -> bool {
        for (c in Comment(__all_data__)) {
            for (auto_tmp1 in c.print()) {
                for (k in KEYWORDS_set()) {
                    if (auto_tmp1.contains(k)) {
                        if (self.key_eq(c.getBelongsFile())) {
                            return true
                        }
                    }
                }
            }
        }
    }
    // filterByFolderNames
    pub fn filterByFolderNames(self) -> bool {
        for (m in string::__undetermined_all__()) {
            let (n = self.getName()) {
                if (FOLDERNAMES(m)) {
                    if (n.contains(m)) {
                        return true
                    }
                }
            }
        }
    }
    pub fn isAutoGenereatedFile(self) -> bool {
        if (self.filterByFolderNames()) {
            return true
        }
        if (self.filterByKeyWords()) {
            return true
        }
    }
}
//过滤用关键字，可修改
// gormer, stringer, protoc-gen-go-grpc, protoc-gen-go, goyacc, goctl, generator
// {"Code generated by gormer"},
// {"Code generated by \"stringer"}, // stringer, Gormer
// {"Code generated by protoc-gen-go-grpc."}, //protoc-gen-go-grpc
// {"Code generated by protoc-gen-go. DO NOT EDIT."}, //protoc-gen-go
// {"Code generated by generator"}, //
// {"Code generated by goyacc"} 
// ...
fn KEYWORDS(k: string) -> bool {
    [
        {"PLEASE DO NOT MODIFY THIS FILE MANUALLY"},
        {"DO NOT EDIT"},
        {"Code generated by"},
    ]
}
//过滤用文件夹名，可修改
fn FOLDERNAMES(n: string) -> bool {
    [{"autogenerated/"},]
}

fn KEYWORDS_set() -> *string {
    yield "PLEASE DO NOT MODIFY THIS FILE MANUALLY"
    yield "DO NOT EDIT"
    yield "Code generated by"
}
