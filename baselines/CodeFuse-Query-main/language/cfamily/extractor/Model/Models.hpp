/*
 * This file is auto-generated by jinja template. Do not modify.
 */
#ifndef COREF_CFAMILY_SRC_EXTRACTOR_MODELS_HPP
#define COREF_CFAMILY_SRC_EXTRACTOR_MODELS_HPP
#include "Coref/CorefDef.hpp"
#include <string>

namespace coref {

struct BlockDeclaration {
    CorefOid oid;
    std::string debugMessage;
};

struct BlockExpression {
    CorefOid oid;
    CorefOid blockDeclarationOid;
    std::string debugMessage;
};

struct CallExpression {
    CorefOid oid;
    CorefOid calleeDeclarationOid;
    std::string debugMessage;
};

struct CallExpressionArguments {
    CorefOid oid;
    CorefOid callExpressionOid;
    std::string debugMessage;
};

struct CallableEnclosingStatement {
    CorefOid statementOid;
    CorefOid callableOid;
};

struct ClassHierarchy {
    CorefOid childOid;
    CorefOid parentOid;
};

struct ConditionalOperatorExpression {
    CorefOid oid;
    CorefOid conditionExpressionOid;
    CorefOid trueExpressionOid;
    CorefOid falseExpressionOid;
    int isMiddleOperandOmitted;
    std::string debugMessage;
};

struct CxxForRangeStatement {
    CorefOid oid;
    CorefOid bodyStatementOid;
    CorefOid loopVariableVariableDeclarationOid;
    CorefOid rangeInitializationExpressionOid;
    std::string debugMessage;
};

struct CxxMemberCallExpression {
    CorefOid oid;
    CorefOid objectTypeOid;
    CorefOid cxxMethodOid;
    CorefOid cxxRecordOid;
    std::string debugMessage;
};

struct CxxMethodDeclaration {
    CorefOid oid;
    CorefOid parentOid;
    std::string debugMessage;
};

struct CxxRecordDeclaration {
    CorefOid oid;
    std::string debugMessage;
};

struct Declaration {
    CorefOid oid;
    CorefOid parentOid;
    int indexOrder;
    CorefOid locationOid;
    std::string kindName;
    std::string debugMessage;
};

struct DeclarationContext {
    CorefOid oid;
    std::string debugMessage;
};

struct DeclarationStatement {
    CorefOid oid;
    std::string debugMessage;
};

struct DeclaratorDeclaration {
    CorefOid oid;
    std::string debugMessage;
};

struct DoStatement {
    CorefOid oid;
    CorefOid conditionExpressionOid;
    CorefOid bodyStatementOid;
    std::string debugMessage;
};

struct ElseStatementInIf {
    CorefOid oid;
    CorefOid ifStatementOid;
};

struct Expression {
    CorefOid oid;
    std::string debugMessage;
};

struct FieldDeclaration {
    CorefOid oid;
    CorefOid typeOid;
    CorefOid recordOid;
    std::string debugMessage;
};

struct File {
    CorefOid oid;
    std::string relativePath;
    std::string extension;
    std::string name;
    CorefOid programOid;
};

struct ForStatement {
    CorefOid oid;
    CorefOid initializationStatementOid;
    CorefOid bodyStatementOid;
    CorefOid conditionExpressionOid;
    CorefOid incrementExpressionOid;
    std::string debugMessage;
};

struct FunctionDeclaration {
    CorefOid oid;
    CorefOid returnTypeOid;
    int isDefinition;
    std::string debugMessage;
};

struct IfStatement {
    CorefOid oid;
    CorefOid conditionExpressionOid;
    CorefOid thenStatementOid;
    std::string debugMessage;
};

struct Location {
    CorefOid oid;
    CorefOid fileOid;
    int startLineNumber;
    int startColumnNumber;
    int endLineNumber;
    int endColumnNumber;
};

struct NamedDeclaration {
    CorefOid oid;
    std::string name;
    std::string debugMessage;
};

struct ObjCCategoryDeclaration {
    CorefOid oid;
    CorefOid interfaceOid;
    int isExtension;
    std::string displayName;
    std::string debugMessage;
};

struct ObjCCategoryProtocolBinding {
    CorefOid objCCategoryDeclarationOid;
    CorefOid objCProtocolDeclarationOid;
};

struct ObjCContainerDeclaration {
    CorefOid oid;
    std::string declarationKind;
    CorefOid declarationContextOid;
    std::string debugMessage;
};

struct ObjCForCollectionStatement {
    CorefOid oid;
    CorefOid elementStatementOid;
    CorefOid collectionExpressionOid;
    CorefOid bodyStatementOid;
    std::string debugMessage;
};

struct ObjCImplementationDeclaration {
    CorefOid oid;
    int isCategory;
    std::string debugMessage;
};

struct ObjCInstanceVariableDeclaration {
    CorefOid oid;
    CorefOid objCInterfaceDeclarationOid;
    std::string debugMessage;
};

struct ObjCInstanceVariableRefExpression {
    CorefOid oid;
    CorefOid objCInstanceVariableOid;
    std::string debugMessage;
};

struct ObjCInterfaceDeclaration {
    CorefOid oid;
    CorefOid superClassObjCInterfaceDeclarationOid;
    int isDefinition;
    std::string debugMessage;
};

struct ObjCInterfaceProtocolBinding {
    CorefOid objCInterfaceDeclarationOid;
    CorefOid objCProtocolDeclarationOid;
};

struct ObjCMessageExpression {
    CorefOid oid;
    std::string receiverKind;
    CorefOid receiverQualifiedTypeOid;
    CorefOid receiverInterfaceObjCInterfaceDeclarationOid;
    CorefOid objCMethodDeclarationOid;
    std::string debugMessage;
};

struct ObjCMessageExpressionArguments {
    CorefOid oid;
    CorefOid objCMessageExpressionOid;
    std::string debugMessage;
};

struct ObjCMethodDeclaration {
    CorefOid oid;
    CorefOid objCContainerDeclarationOid;
    CorefOid returnTypeOid;
    int isDefinition;
    std::string debugMessage;
};

struct ObjCObjectType {
    CorefOid oid;
    CorefOid objCInterfaceDeclarationOid;
};

struct ObjCPropertyDeclaration {
    CorefOid oid;
    CorefOid typeOid;
    CorefOid objCContainerDeclarationOid;
    std::string propertyControl;
    std::string setterKind;
    std::string debugMessage;
};

struct ObjCPropertyRefExpression {
    CorefOid oid;
    int isMessagingGetter;
    CorefOid objCPropertyDeclarationOid;
    std::string debugMessage;
};

struct ObjCProtocolDeclaration {
    CorefOid oid;
    int isDefinition;
    std::string debugMessage;
};

struct ObjCStringLiteral {
    CorefOid oid;
    std::string debugMessage;
};

struct ParamVariableDeclaration {
    CorefOid oid;
    CorefOid callableOid;
    CorefOid typeOid;
    std::string debugMessage;
};

struct PointerType {
    CorefOid oid;
    CorefOid pointeeTypeOid;
};

struct Program {
    CorefOid oid;
    std::string debugMessage;
};

struct QualifiedType {
    CorefOid oid;
    std::string debugMessage;
};

struct RecordDeclaration {
    CorefOid oid;
    std::string debugMessage;
};

struct Statement {
    CorefOid oid;
    CorefOid parentOid;
    int indexOrder;
    CorefOid locationOid;
    std::string kindName;
    std::string debugMessage;
};

struct SwitchCase {
    CorefOid oid;
    CorefOid subStatementOid;
    CorefOid nextSwitchCaseOid;
    int isDefault;
    std::string debugMessage;
};

struct SwitchStatement {
    CorefOid oid;
    CorefOid conditionExpressionOid;
    CorefOid startingSwitchCaseOid;
    std::string debugMessage;
};

struct SymbolTable {
    CorefOid namedDeclarationOid;
    std::string symbolName;
};

struct TagDeclaration {
    CorefOid oid;
    std::string tagKind;
    int isDefinition;
    std::string debugMessage;
};

struct TagType {
    CorefOid oid;
    CorefOid tagDeclarationOid;
};

struct Type {
    CorefOid oid;
    std::string kindName;
    std::string debugMessage;
};

struct TypeDeclaration {
    CorefOid oid;
    CorefOid typeOid;
    std::string debugMessage;
};

struct ValueDeclaration {
    CorefOid oid;
    std::string debugMessage;
};

struct ValueStatement {
    CorefOid oid;
    std::string debugMessage;
};

struct VariableDeclaration {
    CorefOid oid;
    std::string debugMessage;
};

struct WhileStatement {
    CorefOid oid;
    CorefOid conditionExpressionOid;
    CorefOid bodyStatementOid;
    std::string debugMessage;
};

} // namespace coref

#endif // COREF_CFAMILY_SRC_EXTRACTOR_MODELS_HPP
