/*
 * This file is auto-generated by jinja template. Do not modify.
 */
#ifndef COREF_CFAMILY_SRC_EXTRACTOR_STORAGE_HPP
#define COREF_CFAMILY_SRC_EXTRACTOR_STORAGE_HPP

#include "Model/Models.hpp"
#include "ThirdParty/sqlite_orm/sqlite_orm.h"
#include <atomic>
#include <iostream>

namespace coref {

using namespace sqlite_orm;

// clang-format off
inline auto initStorage(const std::string &path) {
    return make_storage(
        path,
        make_table(
            "block_declaration",
            make_column("oid", &coref::BlockDeclaration::oid, primary_key()),
            make_column("debug_message", &coref::BlockDeclaration::debugMessage)),
        make_table(
            "block_expression",
            make_column("oid", &coref::BlockExpression::oid, primary_key()),
            make_column("block_declaration_oid", &coref::BlockExpression::blockDeclarationOid),
            make_column("debug_message", &coref::BlockExpression::debugMessage)),
        make_table(
            "call_expression",
            make_column("oid", &coref::CallExpression::oid, primary_key()),
            make_column("callee_declaration_oid", &coref::CallExpression::calleeDeclarationOid),
            make_column("debug_message", &coref::CallExpression::debugMessage)),
        make_table(
            "call_expression_arguments",
            make_column("oid", &coref::CallExpressionArguments::oid, primary_key()),
            make_column("call_expression_oid", &coref::CallExpressionArguments::callExpressionOid),
            make_column("debug_message", &coref::CallExpressionArguments::debugMessage)),
        make_table(
            "callable_enclosing_statement",
            make_column("statement_oid", &coref::CallableEnclosingStatement::statementOid),
            make_column("callable_oid", &coref::CallableEnclosingStatement::callableOid)),
        make_table(
            "class_hierarchy",
            make_column("child_oid", &coref::ClassHierarchy::childOid),
            make_column("parent_oid", &coref::ClassHierarchy::parentOid)),
        make_table(
            "conditional_operator_expression",
            make_column("oid", &coref::ConditionalOperatorExpression::oid, primary_key()),
            make_column("condition_expression_oid", &coref::ConditionalOperatorExpression::conditionExpressionOid),
            make_column("true_expression_oid", &coref::ConditionalOperatorExpression::trueExpressionOid),
            make_column("false_expression_oid", &coref::ConditionalOperatorExpression::falseExpressionOid),
            make_column("is_middle_operand_omitted", &coref::ConditionalOperatorExpression::isMiddleOperandOmitted),
            make_column("debug_message", &coref::ConditionalOperatorExpression::debugMessage)),
        make_table(
            "cxx_for_range_statement",
            make_column("oid", &coref::CxxForRangeStatement::oid, primary_key()),
            make_column("body_statement_oid", &coref::CxxForRangeStatement::bodyStatementOid),
            make_column("loop_variable_variable_declaration_oid", &coref::CxxForRangeStatement::loopVariableVariableDeclarationOid),
            make_column("range_initialization_expression_oid", &coref::CxxForRangeStatement::rangeInitializationExpressionOid),
            make_column("debug_message", &coref::CxxForRangeStatement::debugMessage)),
        make_table(
            "cxx_member_call_expression",
            make_column("oid", &coref::CxxMemberCallExpression::oid, primary_key()),
            make_column("object_type_oid", &coref::CxxMemberCallExpression::objectTypeOid),
            make_column("cxx_method_oid", &coref::CxxMemberCallExpression::cxxMethodOid),
            make_column("cxx_record_oid", &coref::CxxMemberCallExpression::cxxRecordOid),
            make_column("debug_message", &coref::CxxMemberCallExpression::debugMessage)),
        make_table(
            "cxx_method_declaration",
            make_column("oid", &coref::CxxMethodDeclaration::oid, primary_key()),
            make_column("parent_oid", &coref::CxxMethodDeclaration::parentOid),
            make_column("debug_message", &coref::CxxMethodDeclaration::debugMessage)),
        make_table(
            "cxx_record_declaration",
            make_column("oid", &coref::CxxRecordDeclaration::oid, primary_key()),
            make_column("debug_message", &coref::CxxRecordDeclaration::debugMessage)),
        make_table(
            "declaration",
            make_column("oid", &coref::Declaration::oid, primary_key()),
            make_column("parent_oid", &coref::Declaration::parentOid),
            make_column("index_order", &coref::Declaration::indexOrder),
            make_column("location_oid", &coref::Declaration::locationOid),
            make_column("kind_name", &coref::Declaration::kindName),
            make_column("debug_message", &coref::Declaration::debugMessage)),
        make_table(
            "declaration_context",
            make_column("oid", &coref::DeclarationContext::oid, primary_key()),
            make_column("debug_message", &coref::DeclarationContext::debugMessage)),
        make_table(
            "declaration_statement",
            make_column("oid", &coref::DeclarationStatement::oid, primary_key()),
            make_column("debug_message", &coref::DeclarationStatement::debugMessage)),
        make_table(
            "declarator_declaration",
            make_column("oid", &coref::DeclaratorDeclaration::oid, primary_key()),
            make_column("debug_message", &coref::DeclaratorDeclaration::debugMessage)),
        make_table(
            "do_statement",
            make_column("oid", &coref::DoStatement::oid, primary_key()),
            make_column("condition_expression_oid", &coref::DoStatement::conditionExpressionOid),
            make_column("body_statement_oid", &coref::DoStatement::bodyStatementOid),
            make_column("debug_message", &coref::DoStatement::debugMessage)),
        make_table(
            "else_statement_in_if",
            make_column("oid", &coref::ElseStatementInIf::oid, primary_key()),
            make_column("if_statement_oid", &coref::ElseStatementInIf::ifStatementOid)),
        make_table(
            "expression",
            make_column("oid", &coref::Expression::oid, primary_key()),
            make_column("debug_message", &coref::Expression::debugMessage)),
        make_table(
            "field_declaration",
            make_column("oid", &coref::FieldDeclaration::oid, primary_key()),
            make_column("type_oid", &coref::FieldDeclaration::typeOid),
            make_column("record_oid", &coref::FieldDeclaration::recordOid),
            make_column("debug_message", &coref::FieldDeclaration::debugMessage)),
        make_table(
            "file",
            make_column("oid", &coref::File::oid, primary_key()),
            make_column("relative_path", &coref::File::relativePath),
            make_column("extension", &coref::File::extension),
            make_column("name", &coref::File::name),
            make_column("program_oid", &coref::File::programOid)),
        make_table(
            "for_statement",
            make_column("oid", &coref::ForStatement::oid, primary_key()),
            make_column("initialization_statement_oid", &coref::ForStatement::initializationStatementOid),
            make_column("body_statement_oid", &coref::ForStatement::bodyStatementOid),
            make_column("condition_expression_oid", &coref::ForStatement::conditionExpressionOid),
            make_column("increment_expression_oid", &coref::ForStatement::incrementExpressionOid),
            make_column("debug_message", &coref::ForStatement::debugMessage)),
        make_table(
            "function_declaration",
            make_column("oid", &coref::FunctionDeclaration::oid, primary_key()),
            make_column("return_type_oid", &coref::FunctionDeclaration::returnTypeOid),
            make_column("is_definition", &coref::FunctionDeclaration::isDefinition),
            make_column("debug_message", &coref::FunctionDeclaration::debugMessage)),
        make_table(
            "if_statement",
            make_column("oid", &coref::IfStatement::oid, primary_key()),
            make_column("condition_expression_oid", &coref::IfStatement::conditionExpressionOid),
            make_column("then_statement_oid", &coref::IfStatement::thenStatementOid),
            make_column("debug_message", &coref::IfStatement::debugMessage)),
        make_table(
            "location",
            make_column("oid", &coref::Location::oid, primary_key()),
            make_column("file_oid", &coref::Location::fileOid),
            make_column("start_line_number", &coref::Location::startLineNumber),
            make_column("start_column_number", &coref::Location::startColumnNumber),
            make_column("end_line_number", &coref::Location::endLineNumber),
            make_column("end_column_number", &coref::Location::endColumnNumber)),
        make_table(
            "named_declaration",
            make_column("oid", &coref::NamedDeclaration::oid, primary_key()),
            make_column("name", &coref::NamedDeclaration::name),
            make_column("debug_message", &coref::NamedDeclaration::debugMessage)),
        make_table(
            "obj_c_category_declaration",
            make_column("oid", &coref::ObjCCategoryDeclaration::oid, primary_key()),
            make_column("interface_oid", &coref::ObjCCategoryDeclaration::interfaceOid),
            make_column("is_extension", &coref::ObjCCategoryDeclaration::isExtension),
            make_column("display_name", &coref::ObjCCategoryDeclaration::displayName),
            make_column("debug_message", &coref::ObjCCategoryDeclaration::debugMessage)),
        make_table(
            "obj_c_category_protocol_binding",
            make_column("obj_c_category_declaration_oid", &coref::ObjCCategoryProtocolBinding::objCCategoryDeclarationOid),
            make_column("obj_c_protocol_declaration_oid", &coref::ObjCCategoryProtocolBinding::objCProtocolDeclarationOid)),
        make_table(
            "obj_c_container_declaration",
            make_column("oid", &coref::ObjCContainerDeclaration::oid, primary_key()),
            make_column("declaration_kind", &coref::ObjCContainerDeclaration::declarationKind),
            make_column("declaration_context_oid", &coref::ObjCContainerDeclaration::declarationContextOid),
            make_column("debug_message", &coref::ObjCContainerDeclaration::debugMessage)),
        make_table(
            "obj_c_for_collection_statement",
            make_column("oid", &coref::ObjCForCollectionStatement::oid, primary_key()),
            make_column("element_statement_oid", &coref::ObjCForCollectionStatement::elementStatementOid),
            make_column("collection_expression_oid", &coref::ObjCForCollectionStatement::collectionExpressionOid),
            make_column("body_statement_oid", &coref::ObjCForCollectionStatement::bodyStatementOid),
            make_column("debug_message", &coref::ObjCForCollectionStatement::debugMessage)),
        make_table(
            "obj_c_implementation_declaration",
            make_column("oid", &coref::ObjCImplementationDeclaration::oid, primary_key()),
            make_column("is_category", &coref::ObjCImplementationDeclaration::isCategory),
            make_column("debug_message", &coref::ObjCImplementationDeclaration::debugMessage)),
        make_table(
            "obj_c_instance_variable_declaration",
            make_column("oid", &coref::ObjCInstanceVariableDeclaration::oid, primary_key()),
            make_column("obj_c_interface_declaration_oid", &coref::ObjCInstanceVariableDeclaration::objCInterfaceDeclarationOid),
            make_column("debug_message", &coref::ObjCInstanceVariableDeclaration::debugMessage)),
        make_table(
            "obj_c_instance_variable_ref_expression",
            make_column("oid", &coref::ObjCInstanceVariableRefExpression::oid, primary_key()),
            make_column("obj_c_instance_variable_oid", &coref::ObjCInstanceVariableRefExpression::objCInstanceVariableOid),
            make_column("debug_message", &coref::ObjCInstanceVariableRefExpression::debugMessage)),
        make_table(
            "obj_c_interface_declaration",
            make_column("oid", &coref::ObjCInterfaceDeclaration::oid, primary_key()),
            make_column("super_class_obj_c_interface_declaration_oid", &coref::ObjCInterfaceDeclaration::superClassObjCInterfaceDeclarationOid),
            make_column("is_definition", &coref::ObjCInterfaceDeclaration::isDefinition),
            make_column("debug_message", &coref::ObjCInterfaceDeclaration::debugMessage)),
        make_table(
            "obj_c_interface_protocol_binding",
            make_column("obj_c_interface_declaration_oid", &coref::ObjCInterfaceProtocolBinding::objCInterfaceDeclarationOid),
            make_column("obj_c_protocol_declaration_oid", &coref::ObjCInterfaceProtocolBinding::objCProtocolDeclarationOid)),
        make_table(
            "obj_c_message_expression",
            make_column("oid", &coref::ObjCMessageExpression::oid, primary_key()),
            make_column("receiver_kind", &coref::ObjCMessageExpression::receiverKind),
            make_column("receiver_qualified_type_oid", &coref::ObjCMessageExpression::receiverQualifiedTypeOid),
            make_column("receiver_interface_obj_c_interface_declaration_oid", &coref::ObjCMessageExpression::receiverInterfaceObjCInterfaceDeclarationOid),
            make_column("obj_c_method_declaration_oid", &coref::ObjCMessageExpression::objCMethodDeclarationOid),
            make_column("debug_message", &coref::ObjCMessageExpression::debugMessage)),
        make_table(
            "obj_c_message_expression_arguments",
            make_column("oid", &coref::ObjCMessageExpressionArguments::oid, primary_key()),
            make_column("obj_c_message_expression_oid", &coref::ObjCMessageExpressionArguments::objCMessageExpressionOid),
            make_column("debug_message", &coref::ObjCMessageExpressionArguments::debugMessage)),
        make_table(
            "obj_c_method_declaration",
            make_column("oid", &coref::ObjCMethodDeclaration::oid, primary_key()),
            make_column("obj_c_container_declaration_oid", &coref::ObjCMethodDeclaration::objCContainerDeclarationOid),
            make_column("return_type_oid", &coref::ObjCMethodDeclaration::returnTypeOid),
            make_column("is_definition", &coref::ObjCMethodDeclaration::isDefinition),
            make_column("debug_message", &coref::ObjCMethodDeclaration::debugMessage)),
        make_table(
            "obj_c_object_type",
            make_column("oid", &coref::ObjCObjectType::oid, primary_key()),
            make_column("obj_c_interface_declaration_oid", &coref::ObjCObjectType::objCInterfaceDeclarationOid)),
        make_table(
            "obj_c_property_declaration",
            make_column("oid", &coref::ObjCPropertyDeclaration::oid, primary_key()),
            make_column("type_oid", &coref::ObjCPropertyDeclaration::typeOid),
            make_column("obj_c_container_declaration_oid", &coref::ObjCPropertyDeclaration::objCContainerDeclarationOid),
            make_column("property_control", &coref::ObjCPropertyDeclaration::propertyControl),
            make_column("setter_kind", &coref::ObjCPropertyDeclaration::setterKind),
            make_column("debug_message", &coref::ObjCPropertyDeclaration::debugMessage)),
        make_table(
            "obj_c_property_ref_expression",
            make_column("oid", &coref::ObjCPropertyRefExpression::oid, primary_key()),
            make_column("is_messaging_getter", &coref::ObjCPropertyRefExpression::isMessagingGetter),
            make_column("obj_c_property_declaration_oid", &coref::ObjCPropertyRefExpression::objCPropertyDeclarationOid),
            make_column("debug_message", &coref::ObjCPropertyRefExpression::debugMessage)),
        make_table(
            "obj_c_protocol_declaration",
            make_column("oid", &coref::ObjCProtocolDeclaration::oid, primary_key()),
            make_column("is_definition", &coref::ObjCProtocolDeclaration::isDefinition),
            make_column("debug_message", &coref::ObjCProtocolDeclaration::debugMessage)),
        make_table(
            "obj_c_string_literal",
            make_column("oid", &coref::ObjCStringLiteral::oid, primary_key()),
            make_column("debug_message", &coref::ObjCStringLiteral::debugMessage)),
        make_table(
            "param_variable_declaration",
            make_column("oid", &coref::ParamVariableDeclaration::oid, primary_key()),
            make_column("callable_oid", &coref::ParamVariableDeclaration::callableOid),
            make_column("type_oid", &coref::ParamVariableDeclaration::typeOid),
            make_column("debug_message", &coref::ParamVariableDeclaration::debugMessage)),
        make_table(
            "pointer_type",
            make_column("oid", &coref::PointerType::oid, primary_key()),
            make_column("pointee_type_oid", &coref::PointerType::pointeeTypeOid)),
        make_table(
            "program",
            make_column("oid", &coref::Program::oid, primary_key()),
            make_column("debug_message", &coref::Program::debugMessage)),
        make_table(
            "qualified_type",
            make_column("oid", &coref::QualifiedType::oid, primary_key()),
            make_column("debug_message", &coref::QualifiedType::debugMessage)),
        make_table(
            "record_declaration",
            make_column("oid", &coref::RecordDeclaration::oid, primary_key()),
            make_column("debug_message", &coref::RecordDeclaration::debugMessage)),
        make_table(
            "statement",
            make_column("oid", &coref::Statement::oid, primary_key()),
            make_column("parent_oid", &coref::Statement::parentOid),
            make_column("index_order", &coref::Statement::indexOrder),
            make_column("location_oid", &coref::Statement::locationOid),
            make_column("kind_name", &coref::Statement::kindName),
            make_column("debug_message", &coref::Statement::debugMessage)),
        make_table(
            "switch_case",
            make_column("oid", &coref::SwitchCase::oid, primary_key()),
            make_column("sub_statement_oid", &coref::SwitchCase::subStatementOid),
            make_column("next_switch_case_oid", &coref::SwitchCase::nextSwitchCaseOid),
            make_column("is_default", &coref::SwitchCase::isDefault),
            make_column("debug_message", &coref::SwitchCase::debugMessage)),
        make_table(
            "switch_statement",
            make_column("oid", &coref::SwitchStatement::oid, primary_key()),
            make_column("condition_expression_oid", &coref::SwitchStatement::conditionExpressionOid),
            make_column("starting_switch_case_oid", &coref::SwitchStatement::startingSwitchCaseOid),
            make_column("debug_message", &coref::SwitchStatement::debugMessage)),
        make_table(
            "symbol_table",
            make_column("named_declaration_oid", &coref::SymbolTable::namedDeclarationOid, primary_key()),
            make_column("symbol_name", &coref::SymbolTable::symbolName)),
        make_table(
            "tag_declaration",
            make_column("oid", &coref::TagDeclaration::oid, primary_key()),
            make_column("tag_kind", &coref::TagDeclaration::tagKind),
            make_column("is_definition", &coref::TagDeclaration::isDefinition),
            make_column("debug_message", &coref::TagDeclaration::debugMessage)),
        make_table(
            "tag_type",
            make_column("oid", &coref::TagType::oid, primary_key()),
            make_column("tag_declaration_oid", &coref::TagType::tagDeclarationOid)),
        make_table(
            "type",
            make_column("oid", &coref::Type::oid, primary_key()),
            make_column("kind_name", &coref::Type::kindName),
            make_column("debug_message", &coref::Type::debugMessage)),
        make_table(
            "type_declaration",
            make_column("oid", &coref::TypeDeclaration::oid, primary_key()),
            make_column("type_oid", &coref::TypeDeclaration::typeOid),
            make_column("debug_message", &coref::TypeDeclaration::debugMessage)),
        make_table(
            "value_declaration",
            make_column("oid", &coref::ValueDeclaration::oid, primary_key()),
            make_column("debug_message", &coref::ValueDeclaration::debugMessage)),
        make_table(
            "value_statement",
            make_column("oid", &coref::ValueStatement::oid, primary_key()),
            make_column("debug_message", &coref::ValueStatement::debugMessage)),
        make_table(
            "variable_declaration",
            make_column("oid", &coref::VariableDeclaration::oid, primary_key()),
            make_column("debug_message", &coref::VariableDeclaration::debugMessage)),
        make_table(
            "while_statement",
            make_column("oid", &coref::WhileStatement::oid, primary_key()),
            make_column("condition_expression_oid", &coref::WhileStatement::conditionExpressionOid),
            make_column("body_statement_oid", &coref::WhileStatement::bodyStatementOid),
            make_column("debug_message", &coref::WhileStatement::debugMessage))
    );
}
// clang-format on

class Storage {
  public:
    using StorageType = decltype(initStorage(""));

    static Storage &getInstance() {
        static Storage instance;
        return instance;
    }

    /// initialize ORM
    /// \param sqliteDbPath
    inline void initialize(const std::string &sqliteDbPath = "") {
        if (!sqliteDbPath.empty())
            _sqliteDbPath = sqliteDbPath;

        _storage = std::make_unique<Storage::StorageType>(initStorage(_sqliteDbPath));
        _storage->sync_schema();
        _storage->pragma.synchronous(0); // PRAGMA synchronous = OFF
        _storage->pragma.journal_mode(journal_mode::MEMORY); // PRAGMA journal_mode = MEMORY
        _initialized = true;
    }

    /// Check if all the models are completely mapped
    /// \return
    inline bool isInitialised() const {
        return _initialized.load();
    }

    /// Get Sqlite ORM Object
    /// \return
    std::shared_ptr<StorageType> getStorage() {
        return _storage;
    }

    ~Storage() = default;

    Storage(const Storage &) = delete;

    Storage &operator=(const Storage &) = delete;

  private:
    Storage() = default;

    std::string _sqliteDbPath;
    std::atomic<bool> _initialized{false};
    std::shared_ptr<StorageType> _storage;
};

} // namespace coref

#endif // COREF_CFAMILY_SRC_EXTRACTOR_STORAGE_HPP
