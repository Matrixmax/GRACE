/**
 * @brief A single argument in a list.
 */
schema Arg extends ArgDO {
    
}
impl Arg {
    @data_constraint
    @inline
    pub fn __all__(db: PythonDB) -> *Arg {
        for (tmp in ArgDO(db)) {
            yield Arg {
                element_oid : tmp.element_oid,
                annotation : tmp.annotation,
                element_index : tmp.element_index,
                parent_oid : tmp.parent_oid,
                location_oid : tmp.location_oid,
                printable_text : tmp.printable_text
            }
        }
    }
    /**
     * @brief gets the annotation element of the element, if any.
     * @return Expression 
     */
    pub fn getAnnotation(self) -> Expression {
        for (c in Expression(__all_data__)) {
            if (c.element_oid = self.getAnnotationOid()) {
                return c
            }
        }
    }
    /**
     * @brief gets the parent element of the element
     * @return CombineElement 
     */
    pub fn getParent(self) -> CombineElement {
        for (parent in CombineElement(__all_data__)) {
            if (parent.id = self.getParentOid()) {
                return parent
            }
        }
    }
    /**
     * @brief gets an ancestor of the element.
     * @return CombineElement 
     */
    pub fn getAnAncestor(self) -> *CombineElement {
        for (temp in CombineElement(__all_data__)) {
            if (self.key_eq(temp)) {
                yield temp.getAnAncestor()
            }
        }
    }
    /**
     * @brief gets the location for the element.
     * @return Location
     */
    pub fn getLocation(self) -> Location {
        for (loc in Location(__all_data__)) {
            if (loc.element_oid = self.getLocationOid()) {
                return loc
            }
        }
    }
}
/**
 * @brief The arguments for a function.
 */
schema Arguments extends ArgumentsDO {
    
}
impl Arguments {
    @data_constraint
    @inline
    pub fn __all__(db: PythonDB) -> *Arguments {
        for (tmp in ArgumentsDO(db)) {
            yield Arguments {
                element_oid : tmp.element_oid,
                parent_oid : tmp.parent_oid,
                printable_text : tmp.printable_text
            }
        }
    }
    /**
     * @brief gets the parent element of the element
     * @return CombineElement 
     */
    pub fn getParent(self) -> CombineElement {
        for (parent in CombineElement(__all_data__)) {
            if (parent.id = self.getParentOid()) {
                return parent
            }
        }
    }
    /**
     * @brief gets an ancestor of the element.
     * @return CombineElement 
     */
    pub fn getAnAncestor(self) -> *CombineElement {
        for (temp in CombineElement(__all_data__)) {
            if (self.key_eq(temp)) {
                yield temp.getAnAncestor()
            }
        }
    }
    /**
     * @brief gets the location for the element's parent since this type has no location info.
     * @return Location
     */
    pub fn getLocation(self) -> Location {
        for (loc in Location(__all_data__)) {
            if (loc.element_oid = self.getParentOid()) {
                return loc
            }
        }
    }
    /**
     * @brief gets the arg in the arguments by index, if any.
     * @return Arg
     */
    pub fn getArgByIndex(self, i : int) -> Arg {
        for (a in Arg(__all_data__)) {
            if (self.key_eq(a.getParent())) {
                if (i = a.getElementIndex()) {
                    return a
                }
            }
        }
    }
}
